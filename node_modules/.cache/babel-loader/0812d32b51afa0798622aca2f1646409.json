{"ast":null,"code":"var _jsxFileName = \"/Users/eduardkazeks/Documents/GitHub/JobPortalEE/src/components/companies/ads/activeAds.component.js\";\nimport React, { useEffect, useState } from 'react';\nimport { Grid, Paper, Button } from '@material-ui/core';\nimport { Link } from 'react-router-dom';\nimport ReactPaginate from 'react-paginate';\nimport NavigateNextIcon from '@material-ui/icons/NavigateNext';\nimport NavigateBeforeIcon from '@material-ui/icons/NavigateBefore';\nimport { useTranslation } from 'react-i18next';\nimport { customURL } from '../../../utils/helperFunctions';\nimport CustomizedDialogs from '../../../utils/customizedDialog';\nimport i18n from '../../../utils/i18n';\nimport axios from 'axios';\nimport { fetchJobById } from '../../../actions'; //import clientReducer from '../../../reducers/clientReducer';\n//import { format } from 'date-fns';\n//import moment from 'moment';\n\nconst ActiveAdsComponent = _ref => {\n  let {\n    activeAds,\n    warnToDelete,\n    populateVacancyForm,\n    deleteAdvertisement,\n    changeAdvertPage,\n    selectedPage,\n    advertPages,\n    openAdToSeeAdInfo,\n    openAdToSeeJobPost,\n    postAdvertisement,\n    companyId,\n    companyBusinessId,\n    showDialog,\n    isToDeleteAdvertisementId,\n    fetchJobById\n  } = _ref;\n  const {\n    t\n  } = useTranslation('jobs');\n  const [isDesktop, setIsDesktop] = useState(window.innerWidth);\n  const [jobsToRender, setJobsToRender] = useState([]);\n  useEffect(() => {\n    axios.get(`https://localhost:7262/jobsEn`).then(res => {\n      setJobsToRender(res.data);\n    });\n  }, []);\n\n  const updateSize = () => {\n    setIsDesktop(window.innerWidth >= 1440);\n  };\n\n  useEffect(() => {\n    window.addEventListener('resize', updateSize);\n    return () => window.removeEventListener('resize', updateSize);\n  });\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 5\n    }\n  }, jobsToRender.slice(selectedPage * 10, selectedPage * 10 + 10).map(job => {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      key: job.jobPostNumber,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(Grid, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"h1\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 15\n      }\n    }, job.jobTags, console.log(job.jobPostNumber)))));\n  })) // <div className=\"container\">\n  //   <Grid container style={{ margin: '30px 0px' }}>\n  //     <Grid item sm={10}>\n  //       <h3>\n  //         {t('activeJobsTitle')} ({`${jobsToRender && jobsToRender.length === null ? jobsToRender.length : jobsToRender.length}`}):\n  //       </h3>\n  //     </Grid>\n  //     <Grid item sm={2}>\n  //       {jobsToRender.companyBusinessId !== 0 && jobsToRender.companyBusinessId === null ? (\n  //         <Link to=\"/tyopaikkailmoitus\" className=\"btnLink\">\n  //           <Button onClick={postAdvertisement} variant=\"contained\" size={i18n.language === 'ru' ? 'small' : 'medium'} color=\"primary\">\n  //             {t('addPost')}\n  //           </Button>\n  //         </Link>\n  //       ) : (\n  //         <Link to=\"/tyopaikkailmoitus\" className=\"btnLink\">\n  //           <Button onClick={postAdvertisement} variant=\"contained\" size={i18n.language === 'ru' ? 'small' : 'medium'} color=\"primary\">\n  //             {t('addPost')}\n  //           </Button>\n  //         </Link>\n  //       )}\n  //     </Grid>\n  //   </Grid>\n  //   {jobsToRender.slice(selectedPage * 10, selectedPage * 10 + 10).map(item => {\n  //     return (\n  //       <div key={item.jobPostNumber === null ? item.jobPostNumber : item.jobPostNumber}>\n  //         <Paper style={{ marginTop: 20 }}>\n  //           <Grid container spacing={3} style={{ padding: 20 }} alignItems=\"center\">\n  //             <Grid item md={5}>\n  //               <div>\n  //                 <Link to={customURL(item.url, 'internal')} className=\"btnLink\">\n  //                   <h4 onClick={() => {\n  //                     // openAdToSeeAdInfo(item.jobPostNumber)\n  //                    fetchJobById(item.jobPostNumber)\n  //                   }}>\n  //                     {item.jobName === null ? item.jobName : item.jobName},\n  //                     {item.jobPostAsukohaAddress.map(address => {\n  //                       {\n  //                         if (address.address[17] === null) {\n  //                           return address.address.split(',').splice(1).toString();\n  //                         } else return address.address\n  //                       }\n  //                     })}\n  //                   </h4>\n  //                 </Link>\n  //               </div>\n  //               <div>\n  //                 <span>\n  //                   {t('applicationsInTotal')}:<span style={{ color: 'red', margin: '0 5px' }}>({`${item.totalApplicants === null ? item.totalApplicants : item.totalApplicants}`})</span>\n  //                 </span>\n  //                 <span />\n  //                 <span>\n  //                   {t('viewed')}: <span />\n  //                   <span style={{ color: 'red', margin: '0 5px' }}>({`${item.totalViewed}`})</span>\n  //                   {t('times')}\n  //                 </span>\n  //               </div>\n  //             </Grid>\n  //             <Grid item md={3} style={{ color: '#34495E ' }}>\n  //               <div>\n  //                 <h5>{item.dateOfApplication === null ? item.dateOfApplication : item.dateOfApplication}</h5>\n  //               </div>\n  //             </Grid>\n  //             <Grid item md={4}>\n  //               <Grid container spacing={1}>\n  //                 <Grid item md={4}>\n  //                   <Button variant=\"outlined\" color=\"secondary\" onClick={() => warnToDelete(item.jobPostNumber) === null ? warnToDelete(item.jobPostNumber) : warnToDelete(item.jobPostNumber)}>\n  //                     {t('common:deleteBtn')}\n  //                   </Button>\n  //                 </Grid>\n  //                 <Grid item md={4}>\n  //                   <Link to=\"/tyopaikkailmoitus/\" className=\"btnLink\">\n  //                     <Button\n  //                       //style={ isDesktop && i18n.language === 'ru' ? {left: '15px'} : null }\n  //                       variant=\"contained\"\n  //                       color=\"secondary\"\n  //                       onClick={() => {\n  //                         populateVacancyForm(item.jobPostNumber, false) === null ?  populateVacancyForm(item.jobPostNumber, false) :  populateVacancyForm(item.jobPostNumber, false)\n  //                       }}\n  //                     >\n  //                       {t('common:copyBtn')}\n  //                     </Button>\n  //                   </Link>\n  //                 </Grid>\n  //                 <Grid item md={4}>\n  //                   <div>\n  //                     <Link className=\"btnLink\" to={customURL(item.url, 'internal') === null ? customURL(item.url, 'internal') : customURL(item.url, 'internal')}>\n  //                       <Button\n  //                         variant=\"contained\"\n  //                         style={isDesktop && i18n.language === 'ru' ? { left: '29px' } : null}\n  //                         color=\"primary\"\n  //                         onClick={() => openAdToSeeAdInfo(item.jobPostNumber) === null ? openAdToSeeAdInfo(item.jobPostNumber) : openAdToSeeAdInfo(item.jobPostNumber)}\n  //                         //onClick={() => openAdToSeeJobPost(item.jobPostNumber)}\n  //                       >\n  //                         {t('common:openBtn')}\n  //                       </Button>\n  //                     </Link>\n  //                   </div>\n  //                 </Grid>\n  //               </Grid>\n  //             </Grid>\n  //           </Grid>\n  //         </Paper>\n  //       </div>\n  //     );\n  //   })}\n  //   <CustomizedDialogs\n  //     showDialog={showDialog}\n  //     dialogText={t('warnToDeletePostText')}\n  //     warnToDeleteModal\n  //     handleClick={() => deleteAdvertisement(isToDeleteAdvertisementId)}\n  //   />\n  //   <div className=\"pagination-body\">\n  //     <ReactPaginate\n  //       previousLabel={<NavigateBeforeIcon />}\n  //       nextLabel={<NavigateNextIcon />}\n  //       breakLabel=\"...\"\n  //       breakClassName=\"break-me\"\n  //       pageCount={5}\n  //       marginPagesDisplayed={2}\n  //       pageRangeDisplayed={5}\n  //       onPageChange={changeAdvertPage}\n  //       containerClassName=\"pagination\"\n  //       subContainerClassName=\"pages pagination\"\n  //       activeClassName=\"active\"\n  //       forcePage={selectedPage}\n  //     />\n  //   </div>\n  // </div>\n  ;\n};\n\nexport default ActiveAdsComponent;","map":{"version":3,"names":["React","useEffect","useState","Grid","Paper","Button","Link","ReactPaginate","NavigateNextIcon","NavigateBeforeIcon","useTranslation","customURL","CustomizedDialogs","i18n","axios","fetchJobById","ActiveAdsComponent","activeAds","warnToDelete","populateVacancyForm","deleteAdvertisement","changeAdvertPage","selectedPage","advertPages","openAdToSeeAdInfo","openAdToSeeJobPost","postAdvertisement","companyId","companyBusinessId","showDialog","isToDeleteAdvertisementId","t","isDesktop","setIsDesktop","window","innerWidth","jobsToRender","setJobsToRender","get","then","res","data","updateSize","addEventListener","removeEventListener","slice","map","job","jobPostNumber","jobTags","console","log"],"sources":["/Users/eduardkazeks/Documents/GitHub/JobPortalEE/src/components/companies/ads/activeAds.component.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { Grid, Paper, Button } from '@material-ui/core';\nimport { Link } from 'react-router-dom';\nimport ReactPaginate from 'react-paginate';\nimport NavigateNextIcon from '@material-ui/icons/NavigateNext';\nimport NavigateBeforeIcon from '@material-ui/icons/NavigateBefore';\nimport { useTranslation } from 'react-i18next';\nimport { customURL } from '../../../utils/helperFunctions';\nimport CustomizedDialogs from '../../../utils/customizedDialog';\nimport i18n from '../../../utils/i18n';\nimport axios from 'axios';\nimport { fetchJobById } from '../../../actions';\n\n//import clientReducer from '../../../reducers/clientReducer';\n//import { format } from 'date-fns';\n//import moment from 'moment';\nconst ActiveAdsComponent = ({\n  activeAds,\n  warnToDelete,\n  populateVacancyForm,\n  deleteAdvertisement,\n  changeAdvertPage,\n  selectedPage,\n  advertPages,\n  openAdToSeeAdInfo,\n  openAdToSeeJobPost,\n  postAdvertisement,\n  companyId,\n  companyBusinessId,\n  showDialog,\n  isToDeleteAdvertisementId,\n  fetchJobById\n}) => {\n  const { t } = useTranslation('jobs');\n  const [isDesktop, setIsDesktop] = useState(window.innerWidth);\n  const [jobsToRender, setJobsToRender] = useState([]);\n  \n  useEffect(() => {\n    axios\n    .get(`https://localhost:7262/jobsEn`)\n    .then(res => {\n       setJobsToRender(res.data);\n    })\n  },[]);\n  \n  const updateSize = () => {\n    setIsDesktop(window.innerWidth >= 1440);\n  };\n  useEffect(() => {\n    window.addEventListener('resize', updateSize);\n    return () => window.removeEventListener('resize', updateSize);\n  });\n  return (\n    <div>\n      {jobsToRender.slice(selectedPage * 10, selectedPage * 10 + 10).map(job => {\n        return (\n          <div key={job.jobPostNumber}>\n          <Grid>\n            <div>\n              <h1>\n                {job.jobTags}\n                {console.log(job.jobPostNumber)}\n              </h1>\n            </div>\n          </Grid>\n          </div>\n        )\n      })}\n    </div>\n    // <div className=\"container\">\n    //   <Grid container style={{ margin: '30px 0px' }}>\n    //     <Grid item sm={10}>\n    //       <h3>\n    //         {t('activeJobsTitle')} ({`${jobsToRender && jobsToRender.length === null ? jobsToRender.length : jobsToRender.length}`}):\n    //       </h3>\n    //     </Grid>\n    //     <Grid item sm={2}>\n    //       {jobsToRender.companyBusinessId !== 0 && jobsToRender.companyBusinessId === null ? (\n    //         <Link to=\"/tyopaikkailmoitus\" className=\"btnLink\">\n    //           <Button onClick={postAdvertisement} variant=\"contained\" size={i18n.language === 'ru' ? 'small' : 'medium'} color=\"primary\">\n    //             {t('addPost')}\n    //           </Button>\n    //         </Link>\n    //       ) : (\n    //         <Link to=\"/tyopaikkailmoitus\" className=\"btnLink\">\n    //           <Button onClick={postAdvertisement} variant=\"contained\" size={i18n.language === 'ru' ? 'small' : 'medium'} color=\"primary\">\n    //             {t('addPost')}\n    //           </Button>\n    //         </Link>\n    //       )}\n    //     </Grid>\n    //   </Grid>\n    //   {jobsToRender.slice(selectedPage * 10, selectedPage * 10 + 10).map(item => {\n    //     return (\n    //       <div key={item.jobPostNumber === null ? item.jobPostNumber : item.jobPostNumber}>\n    //         <Paper style={{ marginTop: 20 }}>\n    //           <Grid container spacing={3} style={{ padding: 20 }} alignItems=\"center\">\n    //             <Grid item md={5}>\n    //               <div>\n    //                 <Link to={customURL(item.url, 'internal')} className=\"btnLink\">\n    //                   <h4 onClick={() => {\n    //                     // openAdToSeeAdInfo(item.jobPostNumber)\n    //                    fetchJobById(item.jobPostNumber)\n    //                   }}>\n    //                     {item.jobName === null ? item.jobName : item.jobName},\n    //                     {item.jobPostAsukohaAddress.map(address => {\n    //                       {\n    //                         if (address.address[17] === null) {\n    //                           return address.address.split(',').splice(1).toString();\n    //                         } else return address.address\n    //                       }\n    //                     })}\n    //                   </h4>\n    //                 </Link>\n    //               </div>\n    //               <div>\n    //                 <span>\n    //                   {t('applicationsInTotal')}:<span style={{ color: 'red', margin: '0 5px' }}>({`${item.totalApplicants === null ? item.totalApplicants : item.totalApplicants}`})</span>\n    //                 </span>\n    //                 <span />\n    //                 <span>\n    //                   {t('viewed')}: <span />\n    //                   <span style={{ color: 'red', margin: '0 5px' }}>({`${item.totalViewed}`})</span>\n    //                   {t('times')}\n    //                 </span>\n    //               </div>\n    //             </Grid>\n    //             <Grid item md={3} style={{ color: '#34495E ' }}>\n    //               <div>\n    //                 <h5>{item.dateOfApplication === null ? item.dateOfApplication : item.dateOfApplication}</h5>\n    //               </div>\n    //             </Grid>\n    //             <Grid item md={4}>\n    //               <Grid container spacing={1}>\n    //                 <Grid item md={4}>\n    //                   <Button variant=\"outlined\" color=\"secondary\" onClick={() => warnToDelete(item.jobPostNumber) === null ? warnToDelete(item.jobPostNumber) : warnToDelete(item.jobPostNumber)}>\n    //                     {t('common:deleteBtn')}\n    //                   </Button>\n    //                 </Grid>\n    //                 <Grid item md={4}>\n    //                   <Link to=\"/tyopaikkailmoitus/\" className=\"btnLink\">\n    //                     <Button\n    //                       //style={ isDesktop && i18n.language === 'ru' ? {left: '15px'} : null }\n    //                       variant=\"contained\"\n    //                       color=\"secondary\"\n    //                       onClick={() => {\n    //                         populateVacancyForm(item.jobPostNumber, false) === null ?  populateVacancyForm(item.jobPostNumber, false) :  populateVacancyForm(item.jobPostNumber, false)\n    //                       }}\n    //                     >\n    //                       {t('common:copyBtn')}\n    //                     </Button>\n    //                   </Link>\n    //                 </Grid>\n    //                 <Grid item md={4}>\n    //                   <div>\n    //                     <Link className=\"btnLink\" to={customURL(item.url, 'internal') === null ? customURL(item.url, 'internal') : customURL(item.url, 'internal')}>\n    //                       <Button\n    //                         variant=\"contained\"\n    //                         style={isDesktop && i18n.language === 'ru' ? { left: '29px' } : null}\n    //                         color=\"primary\"\n    //                         onClick={() => openAdToSeeAdInfo(item.jobPostNumber) === null ? openAdToSeeAdInfo(item.jobPostNumber) : openAdToSeeAdInfo(item.jobPostNumber)}\n    //                         //onClick={() => openAdToSeeJobPost(item.jobPostNumber)}\n    //                       >\n    //                         {t('common:openBtn')}\n    //                       </Button>\n    //                     </Link>\n    //                   </div>\n    //                 </Grid>\n    //               </Grid>\n    //             </Grid>\n    //           </Grid>\n    //         </Paper>\n    //       </div>\n    //     );\n    //   })}\n    //   <CustomizedDialogs\n    //     showDialog={showDialog}\n    //     dialogText={t('warnToDeletePostText')}\n    //     warnToDeleteModal\n    //     handleClick={() => deleteAdvertisement(isToDeleteAdvertisementId)}\n    //   />\n    //   <div className=\"pagination-body\">\n    //     <ReactPaginate\n    //       previousLabel={<NavigateBeforeIcon />}\n    //       nextLabel={<NavigateNextIcon />}\n    //       breakLabel=\"...\"\n    //       breakClassName=\"break-me\"\n    //       pageCount={5}\n    //       marginPagesDisplayed={2}\n    //       pageRangeDisplayed={5}\n    //       onPageChange={changeAdvertPage}\n    //       containerClassName=\"pagination\"\n    //       subContainerClassName=\"pages pagination\"\n    //       activeClassName=\"active\"\n    //       forcePage={selectedPage}\n    //     />\n    //   </div>\n    // </div>\n  );\n};\nexport default ActiveAdsComponent;"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,SAASC,IAAT,EAAeC,KAAf,EAAsBC,MAAtB,QAAoC,mBAApC;AACA,SAASC,IAAT,QAAqB,kBAArB;AACA,OAAOC,aAAP,MAA0B,gBAA1B;AACA,OAAOC,gBAAP,MAA6B,iCAA7B;AACA,OAAOC,kBAAP,MAA+B,mCAA/B;AACA,SAASC,cAAT,QAA+B,eAA/B;AACA,SAASC,SAAT,QAA0B,gCAA1B;AACA,OAAOC,iBAAP,MAA8B,iCAA9B;AACA,OAAOC,IAAP,MAAiB,qBAAjB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAASC,YAAT,QAA6B,kBAA7B,C,CAEA;AACA;AACA;;AACA,MAAMC,kBAAkB,GAAG,QAgBrB;EAAA,IAhBsB;IAC1BC,SAD0B;IAE1BC,YAF0B;IAG1BC,mBAH0B;IAI1BC,mBAJ0B;IAK1BC,gBAL0B;IAM1BC,YAN0B;IAO1BC,WAP0B;IAQ1BC,iBAR0B;IAS1BC,kBAT0B;IAU1BC,iBAV0B;IAW1BC,SAX0B;IAY1BC,iBAZ0B;IAa1BC,UAb0B;IAc1BC,yBAd0B;IAe1Bf;EAf0B,CAgBtB;EACJ,MAAM;IAAEgB;EAAF,IAAQrB,cAAc,CAAC,MAAD,CAA5B;EACA,MAAM,CAACsB,SAAD,EAAYC,YAAZ,IAA4B/B,QAAQ,CAACgC,MAAM,CAACC,UAAR,CAA1C;EACA,MAAM,CAACC,YAAD,EAAeC,eAAf,IAAkCnC,QAAQ,CAAC,EAAD,CAAhD;EAEAD,SAAS,CAAC,MAAM;IACda,KAAK,CACJwB,GADD,CACM,+BADN,EAECC,IAFD,CAEMC,GAAG,IAAI;MACVH,eAAe,CAACG,GAAG,CAACC,IAAL,CAAf;IACF,CAJD;EAKD,CANQ,EAMP,EANO,CAAT;;EAQA,MAAMC,UAAU,GAAG,MAAM;IACvBT,YAAY,CAACC,MAAM,CAACC,UAAP,IAAqB,IAAtB,CAAZ;EACD,CAFD;;EAGAlC,SAAS,CAAC,MAAM;IACdiC,MAAM,CAACS,gBAAP,CAAwB,QAAxB,EAAkCD,UAAlC;IACA,OAAO,MAAMR,MAAM,CAACU,mBAAP,CAA2B,QAA3B,EAAqCF,UAArC,CAAb;EACD,CAHQ,CAAT;EAIA,oBACE;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,GACGN,YAAY,CAACS,KAAb,CAAmBvB,YAAY,GAAG,EAAlC,EAAsCA,YAAY,GAAG,EAAf,GAAoB,EAA1D,EAA8DwB,GAA9D,CAAkEC,GAAG,IAAI;IACxE,oBACE;MAAK,GAAG,EAAEA,GAAG,CAACC,aAAd;MAAA;MAAA;QAAA;QAAA;QAAA;MAAA;IAAA,gBACA,oBAAC,IAAD;MAAA;MAAA;QAAA;QAAA;QAAA;MAAA;IAAA,gBACE;MAAA;MAAA;QAAA;QAAA;QAAA;MAAA;IAAA,gBACE;MAAA;MAAA;QAAA;QAAA;QAAA;MAAA;IAAA,GACGD,GAAG,CAACE,OADP,EAEGC,OAAO,CAACC,GAAR,CAAYJ,GAAG,CAACC,aAAhB,CAFH,CADF,CADF,CADA,CADF;EAYD,CAbA,CADH,CADF,CAijJF;AAmJD,CAvLD;;AAwLA,eAAehC,kBAAf"},"metadata":{},"sourceType":"module"}