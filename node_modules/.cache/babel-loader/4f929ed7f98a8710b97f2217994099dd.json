{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\shuli\\\\OneDrive\\\\Desktop\\\\Work\\\\JobportalN\\\\JobPortalEE\\\\src\\\\components\\\\companies\\\\ads\\\\adDetails.component.js\";\nimport React, { useEffect, useState } from \"react\";\nimport { withStyles } from \"@material-ui/core/styles\";\nimport { Divider, Grid, Button, Snackbar } from \"@material-ui/core\";\nimport ArrowBackIosIcon from \"@material-ui/icons/ArrowBackIos\";\nimport { Link } from \"react-router-dom\";\nimport { useTranslation } from \"react-i18next\";\nimport store from \"../../../store\";\nimport { customURL } from \"../../../utils/helperFunctions\";\nimport { updateAdvertisement, changeCampaign, populateVacancyForm, changeActivePostToInactive, closeSnackbar } from \"../../../actions\";\nimport { MySnackbarContentWrapper } from \"../../../utils/snackbar.utils\";\nimport { customTranslateCampaign, customTranslateStatus } from \"../../../utils/customTranslate\";\nimport Loader from \"../../../utils/loader\";\nimport axios from \"axios\";\nimport { useDispatch, useSelector } from \"react-redux\";\n\nconst styles = theme => ({\n  titleMargin: {\n    margin: \"20px auto 24px auto\",\n    [theme.breakpoints.down(\"sm\")]: {\n      marginTop: 4\n    }\n  },\n  companyLogo: {\n    minHeight: 80,\n    minWidth: 150,\n    backgroundSize: \"contain\",\n    backgroundRepeat: \"no-repeat\",\n    marginBottom: 6\n  },\n  companyImgFrame: {\n    display: \"flex\",\n    alignItems: \"center\",\n    justifyContent: \"center\"\n  },\n  companyImage: {\n    minHeight: 420,\n    maxHeight: 600,\n    maxWidth: \"100%\",\n    [theme.breakpoints.down(\"xs\")]: {\n      minHeight: 190,\n      maxHeight: 190,\n      width: \"100%\"\n    },\n    [theme.breakpoints.only(\"sm\")]: {\n      minHeight: 360,\n      maxHeight: 420,\n      width: \"100%\"\n    }\n  },\n  adDetail: {\n    margin: \"0px 0 50px 0\",\n    padding: \"0 0 50px\",\n    border: \"1px solid lightgray\"\n  },\n  jobDesc: {\n    padding: 40\n  },\n  ctaBtn: {\n    marginBottom: 50,\n    [theme.breakpoints.up(\"md\")]: {\n      justifyContent: \"flex-end\"\n    }\n  },\n  backBtnText: {\n    color: theme.palette.secondary.main,\n    \"&:hover\": {\n      textDecoration: \"none\",\n      color: theme.palette.primary.main\n    }\n  },\n  backBtnContainer: {\n    marginTop: 2\n  },\n  campaignType: {\n    marginRight: 16\n  }\n});\n\nconst AdDetails = _ref => {\n  let {\n    classes,\n    viewSelectedAd,\n    userRole,\n    showSuccessSnackbar,\n    showFailedSnackbar,\n    showSpinner,\n    selectedPage,\n    campaignsList,\n    props\n  } = _ref;\n  const {\n    t\n  } = useTranslation(\"adDetails\");\n  const dispatch = useDispatch();\n  const {\n    jobPostNumber\n  } = useSelector(state => state.jobs);\n  const [jobsToRender, setJobsToRender] = useState([]);\n  selectedPage = 1; //const jobsPostNumber =  useSelector(state => state.getState().jobPostNumber);\n  // const jobPostNumber = 653536;\n\n  useEffect(() => {\n    axios.get(`https://localhost:7262/jobsEn/${jobPostNumber}`).then(res => {\n      setJobsToRender(res.data);\n    });\n  }, []);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Grid, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 13\n    }\n  }, jobsToRender.jobPostNumber, console.log(item.jobPostNumber))))), /*#__PURE__*/React.createElement(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 127,\n      columnNumber: 7\n    }\n  }, \"Test\")) // <div>\n  //   {jobsToRender\n  //     .slice(selectedPage * 1, selectedPage * 1 + 1)\n  //     .map((item) => {\n  //       return item !== [] && item.jobPostNumber !== undefined ? (\n  //         <div className=\"container\" key={item.jobPostNumber}>\n  //           <div className={classes.backBtnContainer}>\n  //             <Link\n  //               to={\n  //                 userRole === \"company\" ? \"/omat-ilmoitukseni\" : \"/tyopaikat\"\n  //               }\n  //               className={classes.backBtnText}\n  //             >\n  //               <ArrowBackIosIcon /> {t(\"jobs:backButton\")}\n  //             </Link>\n  //           </div>\n  //           <div className={classes.titleMargin}>\n  //             <Grid container>\n  //               <Grid item sm={12} md={7}>\n  //                 <h2 className=\"ad_title_1\">\n  //                   {/* {`${item.jobName}, ${item.jobPostAsukohaAddress.map(address => {\n  //                 {\n  //                   if (address.address[17]) {\n  //                     return address.address\n  //                       .split(',')\n  //                       .splice(1)\n  //                       .toString();\n  //                   } else return address.address;\n  //                 }\n  //               })}`} */}\n  //                   {item.jobName}\n  //                   {\"adress\"}\n  //                 </h2>\n  //                 <h6 className=\"ad_title_2\">\n  //                   <strong style={{ marginRight: 10 }}>\n  //                     {`${\n  //                       item.status === 0\n  //                         ? t(\"draft\")\n  //                         : item.status === 1\n  //                         ? t(\"active\")\n  //                         : t(\"inactive\")\n  //                     }`}\n  //                     :\n  //                   </strong>\n  //                   <strong>{item.dateOfApplication}</strong>\n  //                 </h6>\n  //               </Grid>\n  //               <Grid item sm={12} md={5}>\n  //                 <Grid container spacing={2} className={classes.ctaBtn}>\n  //                   <Grid item>\n  //                     {/* If post is active post, show Inactive btn. If it is inactive post, show copy btn in Addetails */}\n  //                     {item.campaignType === \"Free\" ? (\n  //                       <Link to=\"/tyopaikkailmoitus/\" className=\"btnLink\">\n  //                         <Button\n  //                           variant=\"outlined\"\n  //                           color=\"primary\"\n  //                           onClick={() => {\n  //                             store.dispatch(\n  //                               populateVacancyForm(item.jobPostNumber, false)\n  //                             );\n  //                           }}\n  //                         >\n  //                           {t(\"common:copyBtn\")}\n  //                         </Button>\n  //                       </Link>\n  //                     ) : item.campaignType === \"Free\" ? (\n  //                       <Button\n  //                         variant=\"outlined\"\n  //                         color=\"primary\"\n  //                         onClick={() => {\n  //                           // alert('updateJOBPOSTSTATUS');\n  //                           store.dispatch(\n  //                             changeActivePostToInactive(\n  //                               userRole === \"admin\"\n  //                                 ? `${item.jobPostNumber}admin${item.companyBusinessId}`\n  //                                 : item.jobPostNumber\n  //                             )\n  //                           );\n  //                         }}\n  //                       >\n  //                         {t(\"common:inactiveBtn\")}\n  //                       </Button>\n  //                     ) : (\n  //                       \"\"\n  //                     )}\n  //                   </Grid>\n  //                   {item.campaignType === \"Free\" && (\n  //                     <Grid item>\n  //                       <Link\n  //                         to={`/tyopaikkailmoitus/${item.jobPostNumber}`}\n  //                         className=\"btnLink\"\n  //                       >\n  //                         <Button\n  //                           variant=\"outlined\"\n  //                           color=\"primary\"\n  //                           onClick={() =>\n  //                             store.dispatch(updateAdvertisement())\n  //                           }\n  //                         >\n  //                           {t(\"editBtn\")}\n  //                         </Button>\n  //                       </Link>\n  //                     </Grid>\n  //                   )}\n  //                   <Grid item>\n  //                     {/* To avoid errors when viewSelectedAd is empty array */}\n  //                     {item.jobName && (\n  //                       <Link\n  //                         to={customURL(item.url, \"campaign\")}\n  //                         className=\"btnLink\"\n  //                       >\n  //                         <Button\n  //                           variant=\"contained\"\n  //                           color=\"primary\"\n  //                           onClick={() =>\n  //                             store.dispatch(\n  //                               changeCampaign(\n  //                                 campaignsList.find(\n  //                                   (campaign) =>\n  //                                     campaign.id === item.campaignType\n  //                                 )\n  //                               )\n  //                             )\n  //                           }\n  //                         >\n  //                           {t(\"boostBtn\")}\n  //                         </Button>\n  //                       </Link>\n  //                     )}\n  //                   </Grid>\n  //                 </Grid>\n  //               </Grid>\n  //             </Grid>\n  //             <Divider />\n  //           </div>\n  //           <div className={classes.addMargin}>\n  //             <Grid container>\n  //               <Grid item sm={8}>\n  //                 <div className={classes.campaignType}>\n  //                   <h6>\n  //                     <strong>{t(\"postType\")}: </strong>\n  //                     {/* <span>{customTranslateCampaign(item.campaignType)}</span> */}\n  //                     <span>{item.campaignType}</span>\n  //                   </h6>\n  //                   <h6>\n  //                     <strong>{t(\"postStatus\")}: </strong>\n  //                     {/* {customTranslateStatus(item.campaignType)} */}\n  //                     {`Active`}\n  //                   </h6>\n  //                 </div>\n  //               </Grid>\n  //               <Grid\n  //                 item\n  //                 sm={4}\n  //                 style={{ display: \"flex\", justifyContent: \"flex-end\" }}\n  //               >\n  //                 <div\n  //                   className={classes.companyLogo}\n  //                   style={{\n  //                     backgroundImage: `url(${\n  //                       item.logo ? item.logo[0].path : \"\"\n  //                     })`,\n  //                   }}\n  //                 />\n  //               </Grid>\n  //             </Grid>\n  //           </div>\n  //           <div className={classes.adDetail}>\n  //             <div className={classes.companyImgFrame}>\n  //               <img\n  //                 src={item.logo && item.logo[0].path}\n  //                 alt={item.logo ? `${item.jobName} Company-Image` : \"\"}\n  //                 className={item.company_image ? classes.companyImage : \"\"}\n  //               />\n  //             </div>\n  //             <div\n  //               className={classes.jobDesc}\n  //               dangerouslySetInnerHTML={{\n  //                 __html: item.jobDescription,\n  //               }} // To convert rte string into html\n  //             />\n  //           </div>\n  //           <Grid container>\n  //             <Grid item sm={12} md={6} />\n  //             <Grid item sm={12} md={6}>\n  //               <Grid container spacing={2} className={classes.ctaBtn}>\n  //                 <Grid item>\n  //                   {/* If post is active post, show Inactive btn. If it is inactive post, show copy btn in Addetails */}\n  //                   {item.campaignType === \"Free\" ? (\n  //                     <Link to=\"/tyopaikkailmoitus/\" className=\"btnLink\">\n  //                       <Button\n  //                         variant=\"outlined\"\n  //                         color=\"primary\"\n  //                         onClick={() => {\n  //                           store.dispatch(\n  //                             populateVacancyForm(item.jobPostNumber, false)\n  //                           );\n  //                         }}\n  //                       >\n  //                         {t(\"common:copyBtn\")}\n  //                       </Button>\n  //                     </Link>\n  //                   ) : item.campaignType === \"Free\" ? (\n  //                     <Button\n  //                       variant=\"outlined\"\n  //                       color=\"primary\"\n  //                       onClick={() => {\n  //                         store.dispatch(\n  //                           changeActivePostToInactive(\n  //                             userRole === \"admin\"\n  //                               ? `${item.jobPostNumber}admin${item.companyBusinessId}`\n  //                               : item.jobPostNumber\n  //                           )\n  //                         );\n  //                       }}\n  //                     >\n  //                       {t(\"common:inactiveBtn\")}\n  //                     </Button>\n  //                   ) : (\n  //                     \"\"\n  //                   )}\n  //                 </Grid>\n  //                 {item.campaignType === \"Free\" && (\n  //                   <Grid item>\n  //                     <Link\n  //                       to={`/tyopaikkailmoitus/${item.jobPostNumber}`}\n  //                       className=\"btnLink\"\n  //                     >\n  //                       <Button\n  //                         variant=\"outlined\"\n  //                         color=\"primary\"\n  //                         onClick={() =>\n  //                           store.dispatch(updateAdvertisement())\n  //                         }\n  //                       >\n  //                         {t(\"editBtn\")}\n  //                       </Button>\n  //                     </Link>\n  //                   </Grid>\n  //                 )}\n  //                 <Grid item>\n  //                   {/* To avoid errors when viewSelectedAd is empty array */}\n  //                   {item.jobName && (\n  //                     <Link\n  //                       to={customURL(item.url, \"campaign\")}\n  //                       className=\"btnLink\"\n  //                     >\n  //                       <Button\n  //                         variant=\"contained\"\n  //                         color=\"primary\"\n  //                         onClick={() =>\n  //                           store.dispatch(\n  //                             changeCampaign(\n  //                               campaignsList.find(\n  //                                 (campaign) =>\n  //                                   campaign.id === item.campaign_id\n  //                               )\n  //                             )\n  //                           )\n  //                         }\n  //                       >\n  //                         {t(\"boostBtn\")}\n  //                       </Button>\n  //                     </Link>\n  //                   )}\n  //                 </Grid>\n  //               </Grid>\n  //             </Grid>\n  //           </Grid>\n  //         </div>\n  //       ) : (\n  //         \" \"\n  //       );\n  //     })}\n  //   <Loader showSpinner={showSpinner} />\n  //   <Snackbar\n  //     anchorOrigin={{\n  //       vertical: \"bottom\",\n  //       horizontal: \"center\",\n  //     }}\n  //     open={showSuccessSnackbar}\n  //     autoHideDuration={2000}\n  //     onClose={() => store.dispatch(closeSnackbar())}\n  //   >\n  //     <MySnackbarContentWrapper\n  //       onClose={() => store.dispatch(closeSnackbar())}\n  //       variant=\"success\"\n  //       message={t(\"successMsg\")}\n  //     />\n  //   </Snackbar>\n  //   <Snackbar\n  //     anchorOrigin={{\n  //       vertical: \"bottom\",\n  //       horizontal: \"center\",\n  //     }}\n  //     open={showFailedSnackbar}\n  //     autoHideDuration={2000}\n  //     onClose={() => store.dispatch(closeSnackbar())}\n  //   >\n  //     <MySnackbarContentWrapper\n  //       onClose={() => store.dispatch(closeSnackbar())}\n  //       variant=\"error\"\n  //       message={t(\"failedMsg\")}\n  //     />\n  //   </Snackbar>\n  // </div>\n  ;\n};\n\nexport default withStyles(styles)(AdDetails);","map":{"version":3,"names":["React","useEffect","useState","withStyles","Divider","Grid","Button","Snackbar","ArrowBackIosIcon","Link","useTranslation","store","customURL","updateAdvertisement","changeCampaign","populateVacancyForm","changeActivePostToInactive","closeSnackbar","MySnackbarContentWrapper","customTranslateCampaign","customTranslateStatus","Loader","axios","useDispatch","useSelector","styles","theme","titleMargin","margin","breakpoints","down","marginTop","companyLogo","minHeight","minWidth","backgroundSize","backgroundRepeat","marginBottom","companyImgFrame","display","alignItems","justifyContent","companyImage","maxHeight","maxWidth","width","only","adDetail","padding","border","jobDesc","ctaBtn","up","backBtnText","color","palette","secondary","main","textDecoration","primary","backBtnContainer","campaignType","marginRight","AdDetails","classes","viewSelectedAd","userRole","showSuccessSnackbar","showFailedSnackbar","showSpinner","selectedPage","campaignsList","props","t","dispatch","jobPostNumber","state","jobs","jobsToRender","setJobsToRender","get","then","res","data","console","log","item"],"sources":["C:/Users/shuli/OneDrive/Desktop/Work/JobportalN/JobPortalEE/src/components/companies/ads/adDetails.component.js"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport { withStyles } from \"@material-ui/core/styles\";\r\nimport { Divider, Grid, Button, Snackbar } from \"@material-ui/core\";\r\nimport ArrowBackIosIcon from \"@material-ui/icons/ArrowBackIos\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport store from \"../../../store\";\r\nimport { customURL } from \"../../../utils/helperFunctions\";\r\nimport {\r\n  updateAdvertisement,\r\n  changeCampaign,\r\n  populateVacancyForm,\r\n  changeActivePostToInactive,\r\n  closeSnackbar,\r\n} from \"../../../actions\";\r\nimport { MySnackbarContentWrapper } from \"../../../utils/snackbar.utils\";\r\nimport {\r\n  customTranslateCampaign,\r\n  customTranslateStatus,\r\n} from \"../../../utils/customTranslate\";\r\nimport Loader from \"../../../utils/loader\";\r\nimport axios from \"axios\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\n\r\nconst styles = (theme) => ({\r\n  titleMargin: {\r\n    margin: \"20px auto 24px auto\",\r\n    [theme.breakpoints.down(\"sm\")]: {\r\n      marginTop: 4,\r\n    },\r\n  },\r\n  companyLogo: {\r\n    minHeight: 80,\r\n    minWidth: 150,\r\n    backgroundSize: \"contain\",\r\n    backgroundRepeat: \"no-repeat\",\r\n    marginBottom: 6,\r\n  },\r\n  companyImgFrame: {\r\n    display: \"flex\",\r\n    alignItems: \"center\",\r\n    justifyContent: \"center\",\r\n  },\r\n\r\n  companyImage: {\r\n    minHeight: 420,\r\n    maxHeight: 600,\r\n    maxWidth: \"100%\",\r\n    [theme.breakpoints.down(\"xs\")]: {\r\n      minHeight: 190,\r\n      maxHeight: 190,\r\n      width: \"100%\",\r\n    },\r\n    [theme.breakpoints.only(\"sm\")]: {\r\n      minHeight: 360,\r\n      maxHeight: 420,\r\n      width: \"100%\",\r\n    },\r\n  },\r\n  adDetail: {\r\n    margin: \"0px 0 50px 0\",\r\n    padding: \"0 0 50px\",\r\n    border: \"1px solid lightgray\",\r\n  },\r\n  jobDesc: {\r\n    padding: 40,\r\n  },\r\n  ctaBtn: {\r\n    marginBottom: 50,\r\n    [theme.breakpoints.up(\"md\")]: {\r\n      justifyContent: \"flex-end\",\r\n    },\r\n  },\r\n  backBtnText: {\r\n    color: theme.palette.secondary.main,\r\n    \"&:hover\": {\r\n      textDecoration: \"none\",\r\n      color: theme.palette.primary.main,\r\n    },\r\n  },\r\n  backBtnContainer: {\r\n    marginTop: 2,\r\n  },\r\n  campaignType: {\r\n    marginRight: 16,\r\n  },\r\n});\r\n\r\nconst AdDetails = ({\r\n  classes,\r\n  viewSelectedAd,\r\n  userRole,\r\n  showSuccessSnackbar,\r\n  showFailedSnackbar,\r\n  showSpinner,\r\n  selectedPage,\r\n  campaignsList,\r\n  props,\r\n}) => {\r\n  const { t } = useTranslation(\"adDetails\");\r\n  const dispatch = useDispatch();\r\n  const { jobPostNumber } = useSelector((state) => state.jobs);\r\n  const [jobsToRender, setJobsToRender] = useState([]);\r\n  selectedPage = 1;\r\n  //const jobsPostNumber =  useSelector(state => state.getState().jobPostNumber);\r\n  // const jobPostNumber = 653536;\r\n\r\n  useEffect(() => {\r\n    axios.get(`https://localhost:7262/jobsEn/${jobPostNumber}`).then((res) => {\r\n      setJobsToRender(res.data);\r\n    });\r\n  }, []);\r\n\r\n  return (\r\n    <div>\r\n      <div>\r\n        <Grid>\r\n          <div>\r\n            <h1>\r\n              {jobsToRender.jobPostNumber}\r\n              {console.log(item.jobPostNumber)}\r\n            </h1>\r\n          </div>\r\n        </Grid>\r\n      </div>\r\n\r\n      <h1>Test</h1>\r\n    </div>\r\n    // <div>\r\n    //   {jobsToRender\r\n    //     .slice(selectedPage * 1, selectedPage * 1 + 1)\r\n    //     .map((item) => {\r\n    //       return item !== [] && item.jobPostNumber !== undefined ? (\r\n    //         <div className=\"container\" key={item.jobPostNumber}>\r\n    //           <div className={classes.backBtnContainer}>\r\n    //             <Link\r\n    //               to={\r\n    //                 userRole === \"company\" ? \"/omat-ilmoitukseni\" : \"/tyopaikat\"\r\n    //               }\r\n    //               className={classes.backBtnText}\r\n    //             >\r\n    //               <ArrowBackIosIcon /> {t(\"jobs:backButton\")}\r\n    //             </Link>\r\n    //           </div>\r\n    //           <div className={classes.titleMargin}>\r\n    //             <Grid container>\r\n    //               <Grid item sm={12} md={7}>\r\n    //                 <h2 className=\"ad_title_1\">\r\n    //                   {/* {`${item.jobName}, ${item.jobPostAsukohaAddress.map(address => {\r\n    //                 {\r\n    //                   if (address.address[17]) {\r\n    //                     return address.address\r\n    //                       .split(',')\r\n    //                       .splice(1)\r\n    //                       .toString();\r\n    //                   } else return address.address;\r\n    //                 }\r\n    //               })}`} */}\r\n    //                   {item.jobName}\r\n    //                   {\"adress\"}\r\n    //                 </h2>\r\n    //                 <h6 className=\"ad_title_2\">\r\n    //                   <strong style={{ marginRight: 10 }}>\r\n    //                     {`${\r\n    //                       item.status === 0\r\n    //                         ? t(\"draft\")\r\n    //                         : item.status === 1\r\n    //                         ? t(\"active\")\r\n    //                         : t(\"inactive\")\r\n    //                     }`}\r\n    //                     :\r\n    //                   </strong>\r\n    //                   <strong>{item.dateOfApplication}</strong>\r\n    //                 </h6>\r\n    //               </Grid>\r\n    //               <Grid item sm={12} md={5}>\r\n    //                 <Grid container spacing={2} className={classes.ctaBtn}>\r\n    //                   <Grid item>\r\n    //                     {/* If post is active post, show Inactive btn. If it is inactive post, show copy btn in Addetails */}\r\n    //                     {item.campaignType === \"Free\" ? (\r\n    //                       <Link to=\"/tyopaikkailmoitus/\" className=\"btnLink\">\r\n    //                         <Button\r\n    //                           variant=\"outlined\"\r\n    //                           color=\"primary\"\r\n    //                           onClick={() => {\r\n    //                             store.dispatch(\r\n    //                               populateVacancyForm(item.jobPostNumber, false)\r\n    //                             );\r\n    //                           }}\r\n    //                         >\r\n    //                           {t(\"common:copyBtn\")}\r\n    //                         </Button>\r\n    //                       </Link>\r\n    //                     ) : item.campaignType === \"Free\" ? (\r\n    //                       <Button\r\n    //                         variant=\"outlined\"\r\n    //                         color=\"primary\"\r\n    //                         onClick={() => {\r\n    //                           // alert('updateJOBPOSTSTATUS');\r\n    //                           store.dispatch(\r\n    //                             changeActivePostToInactive(\r\n    //                               userRole === \"admin\"\r\n    //                                 ? `${item.jobPostNumber}admin${item.companyBusinessId}`\r\n    //                                 : item.jobPostNumber\r\n    //                             )\r\n    //                           );\r\n    //                         }}\r\n    //                       >\r\n    //                         {t(\"common:inactiveBtn\")}\r\n    //                       </Button>\r\n    //                     ) : (\r\n    //                       \"\"\r\n    //                     )}\r\n    //                   </Grid>\r\n    //                   {item.campaignType === \"Free\" && (\r\n    //                     <Grid item>\r\n    //                       <Link\r\n    //                         to={`/tyopaikkailmoitus/${item.jobPostNumber}`}\r\n    //                         className=\"btnLink\"\r\n    //                       >\r\n    //                         <Button\r\n    //                           variant=\"outlined\"\r\n    //                           color=\"primary\"\r\n    //                           onClick={() =>\r\n    //                             store.dispatch(updateAdvertisement())\r\n    //                           }\r\n    //                         >\r\n    //                           {t(\"editBtn\")}\r\n    //                         </Button>\r\n    //                       </Link>\r\n    //                     </Grid>\r\n    //                   )}\r\n    //                   <Grid item>\r\n    //                     {/* To avoid errors when viewSelectedAd is empty array */}\r\n    //                     {item.jobName && (\r\n    //                       <Link\r\n    //                         to={customURL(item.url, \"campaign\")}\r\n    //                         className=\"btnLink\"\r\n    //                       >\r\n    //                         <Button\r\n    //                           variant=\"contained\"\r\n    //                           color=\"primary\"\r\n    //                           onClick={() =>\r\n    //                             store.dispatch(\r\n    //                               changeCampaign(\r\n    //                                 campaignsList.find(\r\n    //                                   (campaign) =>\r\n    //                                     campaign.id === item.campaignType\r\n    //                                 )\r\n    //                               )\r\n    //                             )\r\n    //                           }\r\n    //                         >\r\n    //                           {t(\"boostBtn\")}\r\n    //                         </Button>\r\n    //                       </Link>\r\n    //                     )}\r\n    //                   </Grid>\r\n    //                 </Grid>\r\n    //               </Grid>\r\n    //             </Grid>\r\n    //             <Divider />\r\n    //           </div>\r\n    //           <div className={classes.addMargin}>\r\n    //             <Grid container>\r\n    //               <Grid item sm={8}>\r\n    //                 <div className={classes.campaignType}>\r\n    //                   <h6>\r\n    //                     <strong>{t(\"postType\")}: </strong>\r\n    //                     {/* <span>{customTranslateCampaign(item.campaignType)}</span> */}\r\n    //                     <span>{item.campaignType}</span>\r\n    //                   </h6>\r\n    //                   <h6>\r\n    //                     <strong>{t(\"postStatus\")}: </strong>\r\n    //                     {/* {customTranslateStatus(item.campaignType)} */}\r\n    //                     {`Active`}\r\n    //                   </h6>\r\n    //                 </div>\r\n    //               </Grid>\r\n    //               <Grid\r\n    //                 item\r\n    //                 sm={4}\r\n    //                 style={{ display: \"flex\", justifyContent: \"flex-end\" }}\r\n    //               >\r\n    //                 <div\r\n    //                   className={classes.companyLogo}\r\n    //                   style={{\r\n    //                     backgroundImage: `url(${\r\n    //                       item.logo ? item.logo[0].path : \"\"\r\n    //                     })`,\r\n    //                   }}\r\n    //                 />\r\n    //               </Grid>\r\n    //             </Grid>\r\n    //           </div>\r\n    //           <div className={classes.adDetail}>\r\n    //             <div className={classes.companyImgFrame}>\r\n    //               <img\r\n    //                 src={item.logo && item.logo[0].path}\r\n    //                 alt={item.logo ? `${item.jobName} Company-Image` : \"\"}\r\n    //                 className={item.company_image ? classes.companyImage : \"\"}\r\n    //               />\r\n    //             </div>\r\n    //             <div\r\n    //               className={classes.jobDesc}\r\n    //               dangerouslySetInnerHTML={{\r\n    //                 __html: item.jobDescription,\r\n    //               }} // To convert rte string into html\r\n    //             />\r\n    //           </div>\r\n    //           <Grid container>\r\n    //             <Grid item sm={12} md={6} />\r\n    //             <Grid item sm={12} md={6}>\r\n    //               <Grid container spacing={2} className={classes.ctaBtn}>\r\n    //                 <Grid item>\r\n    //                   {/* If post is active post, show Inactive btn. If it is inactive post, show copy btn in Addetails */}\r\n    //                   {item.campaignType === \"Free\" ? (\r\n    //                     <Link to=\"/tyopaikkailmoitus/\" className=\"btnLink\">\r\n    //                       <Button\r\n    //                         variant=\"outlined\"\r\n    //                         color=\"primary\"\r\n    //                         onClick={() => {\r\n    //                           store.dispatch(\r\n    //                             populateVacancyForm(item.jobPostNumber, false)\r\n    //                           );\r\n    //                         }}\r\n    //                       >\r\n    //                         {t(\"common:copyBtn\")}\r\n    //                       </Button>\r\n    //                     </Link>\r\n    //                   ) : item.campaignType === \"Free\" ? (\r\n    //                     <Button\r\n    //                       variant=\"outlined\"\r\n    //                       color=\"primary\"\r\n    //                       onClick={() => {\r\n    //                         store.dispatch(\r\n    //                           changeActivePostToInactive(\r\n    //                             userRole === \"admin\"\r\n    //                               ? `${item.jobPostNumber}admin${item.companyBusinessId}`\r\n    //                               : item.jobPostNumber\r\n    //                           )\r\n    //                         );\r\n    //                       }}\r\n    //                     >\r\n    //                       {t(\"common:inactiveBtn\")}\r\n    //                     </Button>\r\n    //                   ) : (\r\n    //                     \"\"\r\n    //                   )}\r\n    //                 </Grid>\r\n    //                 {item.campaignType === \"Free\" && (\r\n    //                   <Grid item>\r\n    //                     <Link\r\n    //                       to={`/tyopaikkailmoitus/${item.jobPostNumber}`}\r\n    //                       className=\"btnLink\"\r\n    //                     >\r\n    //                       <Button\r\n    //                         variant=\"outlined\"\r\n    //                         color=\"primary\"\r\n    //                         onClick={() =>\r\n    //                           store.dispatch(updateAdvertisement())\r\n    //                         }\r\n    //                       >\r\n    //                         {t(\"editBtn\")}\r\n    //                       </Button>\r\n    //                     </Link>\r\n    //                   </Grid>\r\n    //                 )}\r\n    //                 <Grid item>\r\n    //                   {/* To avoid errors when viewSelectedAd is empty array */}\r\n    //                   {item.jobName && (\r\n    //                     <Link\r\n    //                       to={customURL(item.url, \"campaign\")}\r\n    //                       className=\"btnLink\"\r\n    //                     >\r\n    //                       <Button\r\n    //                         variant=\"contained\"\r\n    //                         color=\"primary\"\r\n    //                         onClick={() =>\r\n    //                           store.dispatch(\r\n    //                             changeCampaign(\r\n    //                               campaignsList.find(\r\n    //                                 (campaign) =>\r\n    //                                   campaign.id === item.campaign_id\r\n    //                               )\r\n    //                             )\r\n    //                           )\r\n    //                         }\r\n    //                       >\r\n    //                         {t(\"boostBtn\")}\r\n    //                       </Button>\r\n    //                     </Link>\r\n    //                   )}\r\n    //                 </Grid>\r\n    //               </Grid>\r\n    //             </Grid>\r\n    //           </Grid>\r\n    //         </div>\r\n    //       ) : (\r\n    //         \" \"\r\n    //       );\r\n    //     })}\r\n\r\n    //   <Loader showSpinner={showSpinner} />\r\n\r\n    //   <Snackbar\r\n    //     anchorOrigin={{\r\n    //       vertical: \"bottom\",\r\n    //       horizontal: \"center\",\r\n    //     }}\r\n    //     open={showSuccessSnackbar}\r\n    //     autoHideDuration={2000}\r\n    //     onClose={() => store.dispatch(closeSnackbar())}\r\n    //   >\r\n    //     <MySnackbarContentWrapper\r\n    //       onClose={() => store.dispatch(closeSnackbar())}\r\n    //       variant=\"success\"\r\n    //       message={t(\"successMsg\")}\r\n    //     />\r\n    //   </Snackbar>\r\n    //   <Snackbar\r\n    //     anchorOrigin={{\r\n    //       vertical: \"bottom\",\r\n    //       horizontal: \"center\",\r\n    //     }}\r\n    //     open={showFailedSnackbar}\r\n    //     autoHideDuration={2000}\r\n    //     onClose={() => store.dispatch(closeSnackbar())}\r\n    //   >\r\n    //     <MySnackbarContentWrapper\r\n    //       onClose={() => store.dispatch(closeSnackbar())}\r\n    //       variant=\"error\"\r\n    //       message={t(\"failedMsg\")}\r\n    //     />\r\n    //   </Snackbar>\r\n    // </div>\r\n  );\r\n};\r\n\r\nexport default withStyles(styles)(AdDetails);\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}