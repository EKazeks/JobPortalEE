{"ast":null,"code":"var _jsxFileName = \"/Users/eduardkazeks/Documents/GitHub/EeJobPortal/src/containers/jobseekers/homePage.container.js\";\nimport React from 'react';\nimport { getFormValues, reduxForm } from 'redux-form';\nimport { connect } from 'react-redux';\nimport { Redirect } from 'react-router-dom';\nimport HomePageComponent from '../../components/jobseekers/homePage.component';\nimport { getApplicantDashboardInfo, toggleEmailNotification, updateEmailNotification, closeSnackbar } from '../../actions';\nimport { jobPreferenceValidate as validate } from '../validate';\nimport i18next from 'i18next';\n\nclass HomePageContainer extends React.Component {\n  componentDidMount() {\n    this.props.getApplicantDashboardInfo();\n  }\n\n  render() {\n    if (this.props.isUserType === 'applicant') {\n      return /*#__PURE__*/React.createElement(HomePageComponent, Object.assign({}, this.props, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 17,\n          columnNumber: 14\n        }\n      }));\n    }\n\n    return /*#__PURE__*/React.createElement(Redirect, {\n      to: \"/\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 19,\n        columnNumber: 12\n      }\n    });\n  }\n\n}\n\nconst HomePageContainerForm = reduxForm({\n  form: 'jobPreference',\n  //initialValues: {},\n  enableReinitialize: true,\n  validate\n})(HomePageContainer);\n\nconst mapStateToProps = state => {\n  const formValues = getFormValues('jobPreference')(state);\n  const dashboard = state.jobs.dashboard && state.jobs.dashboard[0]; // const extractJobCategoriesData = list => {\n  //   const jobcategoryList = list.map(el => {\n  //     const data = {};\n  //     data.id = el.job_category;\n  //     data.label = i18next.t(`category:${el.job_category}`);\n  //     return data;\n  //   });\n  //   return jobcategoryList;\n  // };\n\n  const extractJobTypeData = list => {\n    const jobtypeList = list.map(el => {\n      const data = {};\n      data.type = el.job_type;\n      data.label = i18next.t(`jobtype:jobType${el.job_type}`);\n      return data;\n    });\n    return jobtypeList;\n  };\n\n  const extractJobHoursData = list => {\n    const jobhourList = list.map(el => {\n      const data = {};\n      data.type = el.job_hours;\n      data.label = i18next.t(`jobhours:jobHours${el.job_hours}`);\n      return data;\n    });\n    return jobhourList;\n  };\n\n  const populateFormValues = {\n    notice_frequency: dashboard && dashboard.notice_frequency,\n    job_location: dashboard && dashboard.job_location,\n    //job_category: dashboard && dashboard.job_category && extractJobCategoriesData(dashboard.job_category.categoryList),\n    job_type: dashboard && dashboard.job_type && extractJobTypeData(dashboard.job_type.jobtypeList),\n    job_hours: dashboard && dashboard.job_hours && extractJobHoursData(dashboard.job_hours.jobhoursList)\n  };\n  return {\n    initialValues: populateFormValues,\n    dashboard,\n    jobCategories: state.jobCategories.jobCategories,\n    notificationToggleBtn: state.jobs.notificationToggleBtn,\n    showSuccessSnackbar: state.asyncActions.showSuccessSnackbar,\n    showFailedSnackbar: state.asyncActions.showFailedSnackbar,\n    isUserType: state.client.user && state.client.user.data[6].user_type,\n    formValues\n  };\n};\n\nconst mapDispatchToProps = {\n  getApplicantDashboardInfo,\n  toggleEmailNotification,\n  updateEmailNotification,\n  closeSnackbar\n};\nexport default connect(mapStateToProps, mapDispatchToProps)(HomePageContainerForm);","map":{"version":3,"names":["React","getFormValues","reduxForm","connect","Redirect","HomePageComponent","getApplicantDashboardInfo","toggleEmailNotification","updateEmailNotification","closeSnackbar","jobPreferenceValidate","validate","i18next","HomePageContainer","Component","componentDidMount","props","render","isUserType","HomePageContainerForm","form","enableReinitialize","mapStateToProps","state","formValues","dashboard","jobs","extractJobTypeData","list","jobtypeList","map","el","data","type","job_type","label","t","extractJobHoursData","jobhourList","job_hours","populateFormValues","notice_frequency","job_location","jobhoursList","initialValues","jobCategories","notificationToggleBtn","showSuccessSnackbar","asyncActions","showFailedSnackbar","client","user","user_type","mapDispatchToProps"],"sources":["/Users/eduardkazeks/Documents/GitHub/EeJobPortal/src/containers/jobseekers/homePage.container.js"],"sourcesContent":["import React from 'react';\nimport { getFormValues, reduxForm } from 'redux-form';\nimport { connect } from 'react-redux';\nimport { Redirect } from 'react-router-dom';\nimport HomePageComponent from '../../components/jobseekers/homePage.component';\nimport { getApplicantDashboardInfo, toggleEmailNotification, updateEmailNotification, closeSnackbar } from '../../actions';\nimport { jobPreferenceValidate as validate } from '../validate';\nimport i18next from 'i18next';\n\nclass HomePageContainer extends React.Component {\n  componentDidMount() {\n    this.props.getApplicantDashboardInfo();\n  }\n\n  render() {\n    if (this.props.isUserType === 'applicant') {\n      return <HomePageComponent {...this.props} />;\n    }\n    return <Redirect to=\"/\" />;\n  }\n}\nconst HomePageContainerForm = reduxForm({\n  form: 'jobPreference',\n  //initialValues: {},\n  enableReinitialize: true,\n  validate,\n})(HomePageContainer);\n\nconst mapStateToProps = state => {\n  const formValues = getFormValues('jobPreference')(state);\n  const dashboard = state.jobs.dashboard && state.jobs.dashboard[0];\n\n  // const extractJobCategoriesData = list => {\n  //   const jobcategoryList = list.map(el => {\n  //     const data = {};\n  //     data.id = el.job_category;\n  //     data.label = i18next.t(`category:${el.job_category}`);\n  //     return data;\n  //   });\n  //   return jobcategoryList;\n  // };\n\n  const extractJobTypeData = list => {\n    const jobtypeList = list.map(el => {\n      const data = {};\n      data.type = el.job_type;\n      data.label = i18next.t(`jobtype:jobType${el.job_type}`);\n      return data;\n    });\n    return jobtypeList;\n  };\n\n  const extractJobHoursData = list => {\n    const jobhourList = list.map(el => {\n      const data = {};\n      data.type = el.job_hours;\n      data.label = i18next.t(`jobhours:jobHours${el.job_hours}`);\n      return data;\n    });\n    return jobhourList;\n  };\n\n  const populateFormValues = {\n    notice_frequency: dashboard && dashboard.notice_frequency,\n    job_location: dashboard && dashboard.job_location,\n    //job_category: dashboard && dashboard.job_category && extractJobCategoriesData(dashboard.job_category.categoryList),\n    job_type: dashboard && dashboard.job_type && extractJobTypeData(dashboard.job_type.jobtypeList),\n    job_hours: dashboard && dashboard.job_hours && extractJobHoursData(dashboard.job_hours.jobhoursList),\n  };\n\n  return {\n    initialValues: populateFormValues,\n    dashboard,\n    jobCategories: state.jobCategories.jobCategories,\n    notificationToggleBtn: state.jobs.notificationToggleBtn,\n    showSuccessSnackbar: state.asyncActions.showSuccessSnackbar,\n    showFailedSnackbar: state.asyncActions.showFailedSnackbar,\n    isUserType: state.client.user && state.client.user.data[6].user_type,\n    formValues,\n  };\n};\n\nconst mapDispatchToProps = {\n  getApplicantDashboardInfo,\n  toggleEmailNotification,\n  updateEmailNotification,\n  closeSnackbar,\n};\nexport default connect(mapStateToProps, mapDispatchToProps)(HomePageContainerForm);\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}