{"ast":null,"code":"import { useState } from 'react';\nimport { takeEvery, put, call } from 'redux-saga/effects';\nimport { getFormValues, change, formValueSelector, initialize, getFormInitialValues, touch } from 'redux-form';\nimport { SAVE_AND_PUBLISH_ADVERTISEMENT, UPDATE_AND_PUBLISH_ADVERTISEMENT, API_SERVER, API_SERVER_EST, API_SERVER_EST_GET_ID, GET_ALL_CAMPAIGNS, OPEN_AD_TO_SEE_AD_INFO, UPDATE_ADVERTISEMENT, POPULATE_VACANCY_FORM, DELETE_ADVERTISEMENT, GET_ALL_JOB_CATEGORY, GET_ALL_ADS_BY_STATUS, SAVE_ADVERTISEMENT_AS_DRAFT, SAVE_NEW_CAMPAIGN, CHANGE_ACTIVE_POST_TO_INACTIVE, GET_APPLICATION_DETAILS_BY_ID, UPDATE_APPLICANT_STATUS, GET_JOBPOST_VIEWS_BY_DATE, NAVIGATE_ADS_FROM_MAIN_MENU, UPDATE_JOB_APPLICATION_DETAILS, EDIT_INTERVIEW_DETAILS, SAVE_MARKETING_DETAILS, DELETE_APPLICATION, CHANGE_ROUTE, ADMIN_GET_USER_PROFILE, HELP_SERVICE_FEE, SOS_SERVICE_FEE, POPULATE_EMAIL_MESSAGE, AUTO_EMAIL_TO_APPLICANT, EDIT_VACANCY_FORM, DELETE_JOB_OFFER } from '../constants';\nimport store from '../store';\nimport { apiManualRequest, apiManualPost, apiOpenRequest, apiGetJobsOffers } from '../utils/request';\nimport { filterObj } from '../utils/wrappers';\nimport { getAllCampaignsSuccess, saveAndPublishAdvertisementSuccess, getAllJobCategorySuccess, saveAndPublishAdvertisementFailed, getAllAdsByStatusSuccess, saveAndPublishAdvertisement, showSuccessSnackbar, showFailedSnackbar, openAdToSeeAdInfo, populateVacancyFormSuccess, updateAndPublishAdvertisementSuccess, getApplicationDetailsById, getApplicationDetailsByIdSuccess, getJobPostViewsByDateSuccess, changeAdvertPage, getAllAdsByStatus, filterJobs, hideSpinner, saveMarketingDetailsSuccess, closeDialog, registerPayment, sendInvoiceToTalous, getCompanyProfileSuccess, openAdToSeeAdInfoSuccess, getJobsOffers, getAllJobCategoryFromEstoniaSuccess, editVacancyForm } from '../actions';\nimport { customTranslateCampaign } from '../utils/customTranslate';\nimport browserHistory from '../history';\nimport { messageTemplate } from '../components/companies/advertisements/automaticMessageToApplicants/messages';\nimport axios from 'axios';\nimport { useSelector } from 'react-redux';\n\nfunction* getAllCampaignsSaga() {\n  try {\n    const url = `${API_SERVER}/GetCampaigns`;\n    const result = yield call(apiManualRequest, url);\n    const resultParsed = JSON.parse(result.data);\n    yield put(getAllCampaignsSuccess(resultParsed));\n  } catch (error) {\n    console.log(error);\n  }\n}\n\nfunction* getAllJobCategorySaga() {\n  try {\n    const url = `${API_SERVER}/GetJobCategories`;\n    const result = yield call(apiOpenRequest, url);\n    const resultParsed = JSON.parse(result.data);\n    yield put(getAllJobCategorySuccess(resultParsed));\n  } catch (error) {\n    console.log(error);\n  }\n} // function saveAndPublishAdvertisementEstonia(){\n//   try{\n//     let url;\n//     let body;\n//     let parsedCompany ={};\n//   }\n// }\n\n\nfunction* saveAndPublishAdvertisementSaga() {\n  try {\n    let url;\n    let body;\n    let parsedCompany = {};\n    const {\n      advertisement,\n      client,\n      companyProfile\n    } = store.getState();\n    const formValues = getFormValues('vacancy')(store.getState());\n    const paymentInfoForm = getFormValues('paymentInfo')(store.getState());\n    const uuid = client.user.data[2];\n    const userRole = client.user.data[6].user_type;\n    const payment_method = paymentInfoForm && paymentInfoForm.payment_method;\n    const companyId = companyProfile.profile.company_id;\n\n    if (!formValues.company_id) {\n      formValues.company_id = companyId; // Also sending company_id to add company specific post.\n    }\n\n    yield put(closeDialog());\n\n    if (userRole === 'admin') {\n      const companyDetails = {\n        company_id: parseInt(formValues.company_id),\n        uuid\n      };\n      const jobPostOwner = yield call(apiManualPost, `${API_SERVER}/GetCompanyProfile`, JSON.stringify({ ...companyDetails\n      }));\n      parsedCompany = JSON.parse(jobPostOwner.data);\n    }\n\n    const {\n      selectedCampaign,\n      isSaveAdvertisementAsDraft,\n      isToEdit,\n      uploadedImage,\n      marketingDetails,\n      extraService\n    } = advertisement;\n    const isDraft = isSaveAdvertisementAsDraft;\n    const refinedUploadedImage = uploadedImage && uploadedImage.name && uploadedImage.name.replace(/\\s+\\(\\d+\\)/g, 'JP'); // If stored filename has (int), dropzone doesn't understand the path..so changing such names before sending to db.\n\n    const refinedFormValues = filterObj('image_document', formValues);\n\n    if (isToEdit) {\n      url = `${API_SERVER_EST}/updateJobOffer`;\n    } else {\n      url = `${API_SERVER_EST}/postJob`;\n    }\n\n    const statusToUpdate = isDraft || extraService.help || extraService.sos ? 0 : selectedCampaign.type === 'free' ? 1 : 4;\n    const selectedService = extraService.help ? 'help' : extraService.sos ? 'sos' : null; // image_document array means, it already exists in db, no need to send while updating\n\n    if (Array.isArray(formValues.image_document) === true) {\n      body = { ...refinedFormValues,\n        uuid,\n        campaign_type: selectedCampaign.type,\n        status: statusToUpdate,\n        extra_service: selectedService\n      };\n    } else if (!uploadedImage.name) {\n      // no uploaded image means, no need to send any base64. Also, if there is an image stored in db..and we want to delete it, I am changing the formvalues of image_document in component\n      body = { ...formValues,\n        uuid,\n        campaignLevel: selectedCampaign.type,\n        status: statusToUpdate,\n        extra_service: selectedService\n      };\n    } else if (uploadedImage.name && !Array.isArray(formValues.image_document)) {\n      const base64 = formValues.image_document;\n      body = { ...formValues,\n        uuid,\n        campaignLevel: selectedCampaign.type,\n        status: statusToUpdate,\n        image_document: {\n          uuid,\n          document_id: uploadedImage.id,\n          path: '',\n          filename: refinedUploadedImage,\n          filetype: uploadedImage.type,\n          data: base64\n        },\n        extra_service: selectedService\n      };\n    }\n\n    if (selectedCampaign.includes_mktbudget) {\n      const {\n        marketing_platform,\n        more_budget,\n        marketing_budget\n      } = marketingDetails;\n      body.marketing_platform = !!marketing_platform ? marketing_platform : null;\n      body.more_budget = !!more_budget ? more_budget : null;\n      body.marketing_budget = !!marketing_budget ? parseInt(marketing_budget) : 0;\n    } // SAVING AND PUBLISHING JOBPOST\n    // const result = yield call(apiManualPost, url, JSON.stringify({ ...body }));\n    // const parsedResult = JSON.parse(result.data);\n\n\n    const result = axios.post(url, body).finally(res => {\n      saveAndPublishAdvertisementSuccess();\n    }); // If publishing post, Generate invoice under the hood via Talousvirta API or online payment via NETS\n    // if (parsedResult) {\n    //   const { company_name, business_id, firstname, lastname, email, address, zip_code, city } =\n    //     userRole === 'admin' ? parsedCompany[0] : companyProfile.profile;\n    //   const jobTitle = formValues.job_title;\n    //   const postId = parsedResult[0].post_id;\n    //   const orderId = parsedResult[0].order_id;\n    //   const publishedPostStatus = parsedResult[0].job_post_status;\n    //   const description = `${jobTitle} | Kampanjapaketti - ${customTranslateCampaign(selectedCampaign.id)}`;\n    //   const mkt_description = `${jobTitle} | Lisätty markkinointiraha`;\n    //   const extra_service_description = `Aktivoitu lisäpalvelu | ${extraService.help ? 'HELP' : 'SOS'}`;\n    //   // If mkt budget is added with campaigns with mkt budget, i.e. 5th campaign for now.\n    //   let marketing_budget = 0;\n    //   if (selectedCampaign.includes_mktbudget && !!parsedResult[0].marketing_budget) {\n    //     marketing_budget = parsedResult[0].marketing_budget;\n    //   }\n    //   const extra_service_fee = extraService.help ? HELP_SERVICE_FEE : extraService.sos ? SOS_SERVICE_FEE : 0;\n    //   if (\n    //     (publishedPostStatus === 0 && extra_service_fee > 0) || // If help and sos are added as extra service\n    //     publishedPostStatus === 4 // If paid campaigns are selected, temporary placeholder status\n    //   ) {\n    //     const isExtraServiceAdded = publishedPostStatus === 0 && extra_service_fee > 0 ? true : false;\n    //     const extra_service_fee_with_vat = extra_service_fee * 1.24; // Total price for the extra service including vat\n    //     const amount = parsedResult[0].job_post_campaign_money;\n    //     const totalSum = (marketing_budget + amount) * 1.24;\n    //     const details = {\n    //       company_id: formValues.company_id,\n    //       company_name,\n    //       business_id,\n    //       firstname,\n    //       lastname,\n    //       email,\n    //       address,\n    //       zip_code,\n    //       city,\n    //       description: isExtraServiceAdded ? extra_service_description : description,\n    //       totalSum: isExtraServiceAdded ? extra_service_fee_with_vat : totalSum,\n    //       amount: isExtraServiceAdded ? extra_service_fee : amount,\n    //       post_id: postId,\n    //       order_id: orderId,\n    //       marketing_budget,\n    //       mkt_description,\n    //       selectedCampaign,\n    //     };\n    //     if (payment_method === 'invoice') {\n    //       yield put(sendInvoiceToTalous(details));\n    //     } else if (payment_method === 'online') {\n    //       \\ put(registerPayment(details));\n    //     }\n    //   }\n    //   // Post saved as a draft or free campaign or help/sos feature\n    //   //if (parsedResult[0].job_post_status !== 4)\n    //   else {\n    //     yield put(saveAndPublishAdvertisementSuccess());\n    //   }\n    // } else {\n    //   yield put(saveAndPublishAdvertisementFailed());\n    // }\n  } catch (error) {\n    console.log(error);\n    yield put(saveAndPublishAdvertisementFailed());\n  }\n}\n\nfunction* getJobPostByPostIdSaga(_ref) {\n  let {\n    id\n  } = _ref;\n\n  // try {\n  //     console.log('idSaga');\n  // } catch (error) {\n  //   console.log(error);\n  // }\n  try {\n    const url = `${API_SERVER_EST}/${id}`;\n    const companyBusinessId = store.getState().jobs.companyBusinessId;\n    const userRole = store.getState().client.user.data[6].user_type;\n    const body = JSON.stringify({\n      jobPostNumber: userRole === 'admin' ? id.split('admin')[0] : id,\n      companyBusinessId: userRole === 'admin' ? id.split('admin')[1] : companyBusinessId\n    });\n    const result = yield call(apiOpenRequest, url, body);\n    const resultParsed = JSON.parse(result.data);\n    yield put(openAdToSeeAdInfoSuccess(resultParsed[0]));\n  } catch (error) {\n    console.log(error);\n    yield put(hideSpinner());\n  }\n} // function* getAllAdsByStatusSaga({ status }) {\n//   try {\n//     const url = `${API_SERVER}/SearchJobPosts`;\n//     const { client, usersCompanyList, companyProfile } = store.getState();\n//     const uuid = client.user.data[2];\n//     const roleId = client.user.data[5];\n//     let selectedCompanyId;\n//     selectedCompanyId = usersCompanyList.selectedCompany.company_id;\n//     const assignedCompanyId = client.user.data[6].company_id;\n//     if (!selectedCompanyId) {\n//       // For first time registered users, client company_id is null since user profile is not updated\n//       selectedCompanyId = companyProfile.profile.company_id;\n//     }\n//     const company_id = roleId === 0 ? selectedCompanyId : assignedCompanyId; //super user with many companies\n//     const body = JSON.stringify({\n//       status,\n//       uuid,\n//       company_id,\n//     });\n//     const result = yield call(apiManualPost, url, body);\n//     const resultParsed = JSON.parse(result.data);\n//     yield put(getAllAdsByStatusSuccess(status, resultParsed));\n//   } catch (error) {\n//     console.log(error);\n//   }\n// }\n// Populating vacancy form when editing or copying\n\n\nfunction* populateVacancyFormSaga(_ref2) {\n  let {\n    id,\n    isToEdit\n  } = _ref2;\n\n  try {\n    const url = `${API_SERVER_EST}/${id}`; //const companyBusinessId = store.getState().jobs.companyBusinessId;\n\n    const campaigns = store.getState().advertisement.campaigns;\n    const userRole = store.getState().client.user.data[6].user_type;\n    const body = JSON.stringify({\n      jobPostNumber: userRole === 'admin' ? id.split('admin')[0] : id //companyBusinessId: userRole === 'admin' ? id.split('admin')[1] : companyBusinessId,\n\n    });\n    const result = yield call(apiManualRequest, url);\n    const resultParsed = result.data;\n    console.log(resultParsed); // console.log('resultParsed', resultParsed);\n    // If we are populating from Draft Component, we are editing--> call UpdateJobPost API, it needs company_id && post_id which is being sent along with the vacancy form!\n\n    const {\n      jobPostNumber,\n      //companyBusinessId,\n      company_image,\n      image_id,\n      jobName,\n      titleSpecification,\n      workingTime,\n      jobTags,\n      job_location,\n      jobDescription,\n      is_agreement,\n      dateOfApplication,\n      is_email_notification,\n      email,\n      notice_frequency,\n      campaign_id,\n      marketing_platform,\n      more_budget,\n      marketing_budget,\n      urlToApplyJob\n    } = resultParsed;\n\n    if (isToEdit) {\n      yield put(change('vacancy', 'jobPostNumber', jobPostNumber)); // yield put(change('vacancy', 'company_id', company_id));\n\n      if (company_image) {\n        yield put(change('vacancy', 'image_document', company_image));\n        yield put(change('vacancy', 'image_id', image_id));\n      }\n    }\n\n    yield put(change('vacancy', 'jobTitle', jobName));\n    yield put(change('vacancy', 'jobType', titleSpecification));\n    yield put(change('vacancy', 'jobDuration', workingTime));\n    yield put(change('vacancy', 'jobCategory', jobTags));\n    yield put(change('vacancy', 'jobLocation', resultParsed.jobPostAddress.address));\n    yield put(change('vacancy', 'jobDescription', jobDescription));\n    yield put(change('vacancy', 'is_agreement', true));\n    yield put(change('vacancy', 'applicationUrl', urlToApplyJob));\n    yield put(change('vacancy', 'lastApplicationDate', dateOfApplication));\n    yield put(change('vacancy', 'is_email_notification', is_email_notification));\n    yield put(change('vacancy', 'email', email));\n    yield put(change('vacancy', 'notice_frequency', notice_frequency));\n    const postCampaign = campaigns.find(campaign => campaign.id === campaign_id);\n    const campaignDetails = {\n      postCampaign,\n      marketing_platform,\n      more_budget,\n      marketing_budget\n    }; // yield put(populateVacancyFormSuccess(campaignDetails, isToEdit));\n  } catch (e) {\n    console.log(e);\n  }\n}\n\nfunction* editVacancyFormSaga(_ref3) {\n  let {\n    id,\n    isToEdit\n  } = _ref3;\n\n  try {\n    const url = `${API_SERVER_EST}/${id}`;\n    const campaigns = store.getState().advertisement.campaigns;\n    const userRole = store.getState().client.user.data[6].user_type;\n    const body = JSON.stringify({\n      jobPostNumber: userRole === 'admin' ? id.split('admin')[0] : id\n    });\n    const result = yield call(apiManualRequest, url);\n    const resultParsed = result.data;\n    console.log('saga works'); // If we are populating from Draft Component, we are editing--> call UpdateJobPost API, it needs company_id && post_id which is being sent along with the vacancy form!\n\n    const {\n      jobPostNumber,\n      company_image,\n      image_id,\n      jobName,\n      titleSpecification,\n      workingTime,\n      jobTags,\n      job_location,\n      jobDescription,\n      is_agreement,\n      dateOfApplication,\n      is_email_notification,\n      email,\n      notice_frequency,\n      campaign_id,\n      marketing_platform,\n      more_budget,\n      marketing_budget,\n      urlToApplyJob\n    } = resultParsed;\n\n    if (isToEdit) {\n      yield put(change('editVacancy', 'jobPostNumber', jobPostNumber)); // yield put(change('vacancy', 'company_id', company_id));\n\n      if (company_image) {\n        yield put(change('editVacancy', 'image_document', company_image));\n        yield put(change('editVacancy', 'image_id', image_id));\n      }\n    }\n\n    yield put(change('editVacancy', 'jobTitle', jobName));\n    yield put(change('editVacancy', 'jobType', titleSpecification));\n    yield put(change('editVacancy', 'jobDuration', workingTime));\n    yield put(change('editVacancy', 'jobCategory', jobTags)); // yield put(change('editVacancy', 'jobLocation', resultParsed.jobPostAddress.address));\n\n    yield put(change('editVacancy', 'jobDescription', jobDescription));\n    yield put(change('editVacancy', 'is_agreement', true));\n    yield put(change('editVacancy', 'applicationUrl', urlToApplyJob));\n    yield put(change('editVacancy', 'lastApplicationDate', dateOfApplication));\n    yield put(change('editVacancy', 'is_email_notification', is_email_notification));\n    yield put(change('editVacancy', 'email', email));\n    yield put(change('editVacancy', 'notice_frequency', notice_frequency));\n    const postCampaign = campaigns.find(campaign => campaign.id === campaign_id);\n    const campaignDetails = {\n      postCampaign,\n      marketing_platform,\n      more_budget,\n      marketing_budget\n    };\n    yield put(populateVacancyFormSuccess(campaignDetails, isToEdit));\n  } catch (e) {\n    console.log(e);\n  }\n} // Update advertisement - editAdvertForm is open/ Campaigns are not shown here.\n\n\nfunction* updateJobPostSaga(_ref4) {\n  let {\n    isToEdit,\n    id\n  } = _ref4;\n\n  try {\n    const url = `${API_SERVER_EST}/${id}`;\n    const result = yield call(apiManualRequest, url);\n    const resultParsed = result.data;\n    const {\n      jobPostNumber,\n      logo,\n      image_id,\n      jobName,\n      companyBusinessId,\n      titleSpecification,\n      workingTime,\n      jobTags,\n      job_location,\n      jobDescription,\n      is_agreement,\n      dateOfApplication,\n      is_email_notification,\n      email,\n      notice_frequency,\n      campaign_id,\n      marketing_platform,\n      more_budget,\n      marketing_budget,\n      urlToApplyJob\n    } = resultParsed;\n\n    if (isToEdit) {\n      yield put(change('editVacancy', 'jobPostNumber', jobPostNumber));\n      yield put(change('vacancy', 'companyBusinessId', companyBusinessId));\n\n      if (logo) {\n        yield put(change('editVacancy', 'image_document', logo));\n        yield put(change('editVacancy', 'image_id', image_id));\n      }\n    }\n\n    yield put(change('editVacancy', 'jobName', jobName));\n    yield put(change('editVacancy', 'titleSpecification', titleSpecification));\n    yield put(change('editVacancy', 'jobDuration', workingTime));\n    yield put(change('editVacancy', 'jobCategory', jobTags));\n    yield put(change('editVacancy', 'jobLocation', resultParsed.jobPostAddress.address));\n    yield put(change('editVacancy', 'jobDescription', jobDescription));\n    yield put(change('editVacancy', 'is_agreement', true));\n    yield put(change('editVacancy', 'applicationUrl', urlToApplyJob));\n    yield put(change('editVacancy', 'lastApplicationDate', dateOfApplication));\n    yield put(change('editVacancy', 'is_email_notification', is_email_notification));\n    yield put(change('editVacancy', 'email', email));\n    yield put(change('editVacancy', 'notice_frequency', notice_frequency));\n  } catch (error) {\n    console.log(error);\n  }\n}\n\nfunction* updateAndPublishAdvertisementSaga() {\n  try {\n    const {\n      jobPostNumber,\n      jobName,\n      jobCategory,\n      jobType,\n      jobDuration,\n      jobLocation,\n      applicationUrl,\n      lastApplicationDate,\n      jobDescription,\n      campaignLevel\n    } = getFormValues('editVacancy')(store.getState());\n    let body = {\n      id: id,\n      jobTitle: jobName,\n      jobCategory,\n      jobType,\n      jobDuration,\n      jobLocation,\n      applicationUrl,\n      lastApplicationDate,\n      jobDescription\n    };\n    const url = `${API_SERVER_EST}/updateJobOffer`;\n    const formValues = getFormValues('editVacancy')(store.getState());\n    const uuid = store.getState().client.user.data[2];\n    const {\n      uploadedImage\n    } = store.getState().advertisement;\n    const userRole = store.getState().client.user.data[6].user_type;\n    const refinedUploadedImage = uploadedImage && uploadedImage.name && uploadedImage.name.replace(/\\(\\d+\\)/, 'JP'); // If stored filename has (int), dropzone doesn't understand the path..so changing such names before sending to db.\n\n    const refinedFormValues = filterObj('image_document', formValues); // image_document array means, it already exists in db, no need to send while updating\n    // if (Array.isArray(formValues.image_document) === true) {\n    //   body = JSON.stringify({\n    //     ...refinedFormValues,\n    //     uuid,\n    //   });\n    // } else if (!uploadedImage.name) {\n    //   // no uploaded image means, no need to send any base64. Also, if there is an image stored in db..and we want to delete it, I am changing the formvalues of image_document in component\n    //   body = JSON.stringify({\n    //     ...formValues,\n    //     uuid,\n    //   });\n    // } else {\n    //   const base64 = formValues.image_document;\n    //   body = JSON.stringify({\n    //     ...formValues,\n    //     uuid,\n    //     image_document: {\n    //       uuid,\n    //       document_id: uploadedImage.id,\n    //       path: '',\n    //       filename: refinedUploadedImage,\n    //       filetype: uploadedImage.type,\n    //       data: base64,\n    //     },\n    // });\n    // }\n    //const result = yield call(apiManualPost, url, body);\n\n    const result = axios.patch(url, body).then(res => {}); // const parsedResult = JSON.parse(result.data);\n\n    const parsedResult = result.data;\n\n    if (parsedResult) {\n      yield put(updateAndPublishAdvertisementSuccess());\n\n      if (userRole === 'admin') {\n        yield put(openAdToSeeAdInfo(`${formValues.id}admin${formValues.company_id}`));\n      } else {\n        yield put(openAdToSeeAdInfo(formValues.id));\n      }\n    } else {\n      yield put(saveAndPublishAdvertisementFailed());\n    }\n  } catch (e) {\n    console.log(e);\n    yield put(saveAndPublishAdvertisementFailed());\n  }\n} // Update campaign\n\n\nfunction* updateCampaignSaga(_ref5) {\n  let {\n    id\n  } = _ref5;\n\n  try {\n    yield put(closeDialog());\n    const {\n      advertisement,\n      client,\n      companyProfile,\n      jobs\n    } = store.getState();\n    const paymentInfoForm = getFormValues('paymentInfo')(store.getState());\n    const payment_method = paymentInfoForm && paymentInfoForm.payment_method; // Upgrade campaign\n\n    const url = `https://localhost:7262/updateJobOfferCampaignType`;\n    const uuid = store.getState().client.user.data[2];\n    const {\n      type,\n      includes_mktbudget\n    } = advertisement.selectedCampaign;\n    const campaign_id = advertisement.selectedCampaign.id;\n    const userRole = client.user.data[6].user_type;\n    const {\n      id\n    } = jobs;\n    const post_id = userRole === 'admin' ? id.split('admin')[0] : id;\n    const companyId = userRole === 'admin' ? id.split('admin')[1] : companyProfile.profile.company_id;\n    const campaignDate = formValueSelector('campaign')(store.getState(), 'due_date');\n    let parsedCompany = {};\n    const body = {\n      campaignType: type,\n      //uuid,\n      id,\n      //company_id: companyId,\n      campaignDate\n    };\n\n    if (includes_mktbudget) {\n      const {\n        marketing_platform,\n        more_budget,\n        marketing_budget\n      } = advertisement.marketingDetails;\n      body.marketing_platform = !!marketing_platform ? marketing_platform : null;\n      body.more_budget = !!more_budget ? more_budget : null;\n      body.marketing_budget = !!marketing_budget ? parseInt(marketing_budget) : 0;\n    } // const result = yield call(apiManualPost, url, JSON.stringify({ ...body }));\n\n\n    const result = axios.patch(url, body).finally(res => {\n      showSuccessSnackbar(res);\n    });\n    const resultParsed = JSON.parse(result.data); // if (resultParsed) {\n    //   //If admin is upgrading post or updating jobpost on behalf of companies:\n    //   if (userRole === 'admin') {\n    //     const body2 = {\n    //       company_id: parseInt(companyId),\n    //       uuid,\n    //     };\n    //     const jobPostOwner = yield call(apiManualPost, `${API_SERVER}/GetCompanyProfile`, JSON.stringify({ ...body2 }));\n    //     parsedCompany = JSON.parse(jobPostOwner.data);\n    //   }\n    //   const { company_name, business_id, firstname, lastname, email, address, zip_code, city } =\n    //     userRole === 'admin' ? parsedCompany[0] : companyProfile.profile;\n    //   const jobTitle = advertisement.viewSelectedAd.job_title;\n    //   const description = `${jobTitle} | Kampanjapaketti - ${customTranslateCampaign(campaign_id)}`;\n    //   const mkt_description = `${jobTitle} | Lisätty markkinointiraha`;\n    //   const orderId = resultParsed[0].order_id;\n    //   const previousCampaignPrice = resultParsed[0].prev_campaign_money;\n    //   const newCampaignPrice = resultParsed[0].new_campaign_money;\n    //   const amount = newCampaignPrice - previousCampaignPrice;\n    //   // If mkt budget is added.\n    //   let marketing_budget = 0;\n    //   const newMarketingBudget = resultParsed[0].marketing_budget;\n    //   if (includes_mktbudget && newMarketingBudget > 0) {\n    //     marketing_budget = newMarketingBudget;\n    //   }\n    //   const totalSum = (marketing_budget + amount) * 1.24;\n    //   // If new and more expensive campaign price OR more marketing budget, generate invoice\n    //   const details = {\n    //     company_id: companyId,\n    //     company_name,\n    //     business_id,\n    //     firstname,\n    //     lastname,\n    //     email,\n    //     address,\n    //     zip_code,\n    //     city,\n    //     description,\n    //     totalSum,\n    //     amount,\n    //     post_id: parseInt(post_id),\n    //     order_id: orderId,\n    //     marketing_budget,\n    //     mkt_description,\n    //     isSameCampaign: amount === 0 ? true : false, // Meaning same campaign but new budget\n    //     selectedCampaign: advertisement.selectedCampaign,\n    //     postIdToFetch: id,\n    //   };\n    //   if (payment_method === 'invoice') {\n    //     yield put(sendInvoiceToTalous(details));\n    //   } else if (payment_method === 'online') {\n    //     yield put(registerPayment(details));\n    //   } else {\n    //     yield put(showSuccessSnackbar());\n    //   }\n    // }\n  } catch (error) {\n    console.log(error);\n    yield put(showFailedSnackbar());\n  }\n}\n\nfunction* changeJobPostStatusSaga(_ref6) {\n  let {\n    id\n  } = _ref6;\n\n  try {\n    const url = `${API_SERVER}/UpdateJobPostStatus`;\n    const {\n      company_id\n    } = store.getState().companyProfile.profile;\n    const post_id = id;\n    const userRole = store.getState().client.user.data[6].user_type;\n    const body = JSON.stringify({\n      post_id: userRole === 'admin' ? id.split('admin')[0] : post_id,\n      // For admins, we need to get company id from post itself\n      company_id: userRole === 'admin' ? id.split('admin')[1] : company_id,\n      status: 2\n    });\n    const result = yield call(apiManualPost, url, body);\n\n    if (result.data === 'Job Post Status updated successfully!') {\n      yield put(showSuccessSnackbar());\n      yield put(openAdToSeeAdInfo(id));\n    } else {\n      yield put(showFailedSnackbar());\n    }\n  } catch (e) {\n    console.log(e);\n  }\n}\n\nfunction* saveMarketingDetailsSaga() {\n  try {\n    const formValues = getFormValues('marketingDetails')(store.getState());\n    const {\n      marketing_platform,\n      more_budget,\n      marketing_budget\n    } = formValues;\n\n    if (!marketing_platform) {\n      yield put(touch('marketingDetails', 'marketing_platform'));\n      return;\n    }\n\n    if (!more_budget) {\n      yield put(touch('marketingDetails', 'more_budget'));\n      return;\n    }\n\n    if (more_budget === 'yes') {\n      if (!marketing_budget) {\n        yield put(touch('marketingDetails', 'marketing_budget'));\n        return;\n      }\n    }\n\n    if (marketing_budget && (parseInt(marketing_budget) < 1 || !/^[0-9]+$/.test(marketing_budget))) {\n      return;\n    }\n\n    yield put(saveMarketingDetailsSuccess(formValues));\n    yield put(closeDialog());\n  } catch (e) {\n    console.log(e);\n  }\n}\n\nfunction* displayInitialDetails(_ref7) {\n  let {\n    isToEdit\n  } = _ref7;\n\n  try {\n    if (!isToEdit) yield put(initialize('applicantDetails', getFormInitialValues('applicantDetails')(store.getState())));\n  } catch (e) {\n    console.log(e);\n  }\n}\n\nfunction* deleteJobPostSaga(_ref8) {\n  let {\n    id\n  } = _ref8;\n\n  try {\n    const url = `${API_SERVER_EST}/${id}`;\n    const companyId = store.getState().companyProfile.profile.company_id;\n    const userRole = store.getState().client.user.data[6].user_type;\n    const body = JSON.stringify({\n      post_id: userRole === 'admin' ? id.split('admin')[0] : id,\n      company_id: userRole === 'admin' ? id.split('admin')[1] : companyId\n    }); //yield call( apiOpenRequest, url);\n\n    const result = axios.delete(url).finally(res => {});\n\n    if (userRole === 'admin') {\n      yield put(filterJobs(result, true));\n    } else {\n      yield put(getAllAdsByStatus(0));\n      yield put(getAllAdsByStatus(1));\n      yield put(getAllAdsByStatus(2));\n    }\n  } catch (error) {\n    console.log(error);\n  }\n}\n\nfunction* saveAdvertisementAsDraft() {\n  yield put(saveAndPublishAdvertisement());\n}\n\nfunction* getApplicationDetailsByIdSaga(_ref9) {\n  let {\n    application_id,\n    company_id,\n    post_id,\n    email\n  } = _ref9;\n\n  try {\n    const url = `${API_SERVER}/GetApplicationById`;\n    const body = JSON.stringify({\n      application_id,\n      company_id,\n      post_id,\n      email\n    });\n    const result = yield call(apiManualPost, url, body);\n    const resultParsed = JSON.parse(result.data);\n\n    if (resultParsed) {\n      yield put(getApplicationDetailsByIdSuccess(resultParsed[0]));\n      yield put(openAdToSeeAdInfo(post_id));\n    }\n    /* if (!resultParsed[0].interview_title) {\n      const form = getFormValues('applicantDetails')(store.getState());\n      form.interview_title = 'Haastattelu';\n    } */\n\n  } catch (e) {\n    console.log(e);\n  }\n}\n\nfunction* updateApplicantStatusSaga(_ref10) {\n  let {\n    application_id,\n    company_id,\n    post_id,\n    email,\n    status\n  } = _ref10;\n\n  try {\n    const url = `${API_SERVER}/UpdateJobApplicationStatus`;\n    const body = JSON.stringify({\n      application_id,\n      company_id,\n      post_id,\n      email,\n      status\n    });\n    const result = yield call(apiManualPost, url, body);\n\n    if (result.data === \"Job Application's status updated successfully!\") {\n      //yield put(showSuccessSnackbar());\n      yield put(getApplicationDetailsById(application_id, company_id, post_id, email));\n      yield put(openAdToSeeAdInfo(post_id));\n    } else {\n      yield put(showFailedSnackbar());\n    }\n  } catch (e) {\n    console.log(e);\n  }\n}\n\nfunction* updateJobApplicationDetailsSaga(_ref11) {\n  let {\n    application_id,\n    company_id,\n    post_id,\n    email,\n    update\n  } = _ref11;\n\n  try {\n    let body;\n    const url = `${API_SERVER}/UpdateJobApplicationDetails`;\n    const formValues = getFormValues('applicantDetails')(store.getState());\n    const loggedInUser = store.getState().client.user.data[1];\n    const {\n      application_notes,\n      interview_title,\n      interview_msg,\n      interview_date,\n      interview_time,\n      interview_place\n    } = formValues;\n\n    if (update === 'note') {\n      body = JSON.stringify({\n        application_id,\n        company_id,\n        post_id,\n        email,\n        update,\n        application_notes\n      });\n    } else {\n      body = JSON.stringify({\n        application_id,\n        company_id,\n        post_id,\n        email,\n        update,\n        interview_title,\n        interview_msg,\n        interview_date,\n        interview_time,\n        interview_place,\n        loggedInUser\n      });\n    }\n\n    const result = yield call(apiManualPost, url, body);\n\n    if (result.data === \"Job Application's details updated successfully!\" || result.data === 'Interview reminder emails sent successfully!') {\n      yield put(showSuccessSnackbar());\n      yield put(getApplicationDetailsById(application_id, company_id, post_id, email));\n      yield put(openAdToSeeAdInfo(post_id));\n    } else {\n      yield put(showFailedSnackbar());\n    } // console.log('result', result);\n\n  } catch (e) {\n    console.log(e);\n  }\n} // Dashboard chart\n\n\nfunction* getJobPostViewsByDateSaga() {\n  try {\n    const url = `${API_SERVER}/GetJobPostViewsByDate`;\n    const {\n      company_id\n    } = store.getState().advertisement.viewSelectedAd;\n    const {\n      post_id\n    } = store.getState().advertisement.viewSelectedAd;\n    const body = JSON.stringify({\n      company_id,\n      post_id\n    });\n    const result = yield call(apiManualPost, url, body);\n    const resultParsed = JSON.parse(result.data);\n\n    if (resultParsed) {\n      yield put(getJobPostViewsByDateSuccess(resultParsed));\n    }\n  } catch (e) {\n    console.log(e);\n  }\n} //DELETE APPLICATION SAGA\n\n\nfunction* deleteApplicationSaga() {\n  try {\n    const url = `${API_SERVER}/DeleteApplicationById`;\n    const {\n      applicationDetailsToDelete\n    } = store.getState().advertisement;\n    const {\n      selectedAd\n    } = store.getState().advertisement;\n    const body = JSON.stringify({ ...applicationDetailsToDelete\n    });\n    const result = yield call(apiManualPost, url, body);\n\n    if (result.data === 'Job application successfully deleted') {\n      yield put(openAdToSeeAdInfo(selectedAd));\n    }\n  } catch (error) {\n    console.log(error);\n  }\n}\n\nfunction* changeRouteSaga() {\n  try {\n    const userRole = store.getState().client.user.data[6].user_type;\n\n    if (userRole === 'company') {\n      browserHistory.push('/omat-ilmoitukseni');\n    }\n\n    if (userRole === 'admin') {\n      browserHistory.push('/lisapalvelu');\n    }\n\n    yield put(null); //Yield statement for generator function\n  } catch (error) {\n    console.log(error);\n  }\n} // When navigateAdsFromMainMenu is dispatched, we want to ensure the page lands to 0 index.\n\n\nfunction* changePaginationSaga() {\n  yield put(changeAdvertPage({\n    selected: 0\n  }));\n}\n\nfunction* adminGetUserCompanyProfileSaga(_ref12) {\n  let {\n    id\n  } = _ref12;\n  const url = `${API_SERVER}/GetCompanyProfile`;\n\n  try {\n    const uuid = store.getState().client.user.data[2];\n    const body = JSON.stringify({\n      company_id: id,\n      uuid\n    });\n    const result = yield call(apiManualPost, url, body);\n    const resultParsed = JSON.parse(result.data)[0];\n    yield put(getCompanyProfileSuccess(resultParsed));\n  } catch (e) {\n    console.log(e);\n  }\n} // Automatic answers with email messages saga\n\n\nfunction* populateEmailMessageSaga(_ref13) {\n  var _store$getState$users;\n\n  let {\n    languages\n  } = _ref13;\n  const companyName = (_store$getState$users = store.getState().usersCompanyList.selectedCompany) === null || _store$getState$users === void 0 ? void 0 : _store$getState$users.company_name;\n  const storedLanguages = formValueSelector('vacancy')(store.getState(), 'email_language');\n  const isToSendAutoEmail = store.getState().advertisement.automaticEmailToggleBtn;\n\n  try {\n    if (isToSendAutoEmail) {\n      const messages = messageTemplate(companyName, languages ? languages : storedLanguages);\n      yield put(change('vacancy', 'email_message', messages));\n    }\n  } catch (e) {\n    console.log(e);\n  }\n}\n\nexport function* watchsaveAndPublishAdvertisementSaga() {\n  yield takeEvery(SAVE_AND_PUBLISH_ADVERTISEMENT, saveAndPublishAdvertisementSaga);\n}\nexport function* watchupdateAndPublishAdvertisementSaga() {\n  yield takeEvery(UPDATE_AND_PUBLISH_ADVERTISEMENT, updateAndPublishAdvertisementSaga);\n}\nexport function* watchSaveAdvertisementAsDraft() {\n  yield takeEvery(SAVE_ADVERTISEMENT_AS_DRAFT, saveAdvertisementAsDraft);\n}\nexport function* watchgetAllCampaignsSaga() {\n  yield takeEvery(GET_ALL_CAMPAIGNS, getAllCampaignsSaga);\n}\nexport function* watchgetAllJobCategorysSaga() {\n  yield takeEvery(GET_ALL_JOB_CATEGORY, getAllJobCategorySaga);\n} // export function* watchgetAllAdsByStatusSaga() {\n//   yield takeEvery(GET_ALL_ADS_BY_STATUS, getAllAdsByStatusSaga);\n// }\n\nexport function* watchgetJobPostByPostIdSaga() {\n  yield takeEvery(OPEN_AD_TO_SEE_AD_INFO, getJobPostByPostIdSaga);\n}\nexport function* watchdeleteJobPostSaga() {\n  yield takeEvery(DELETE_JOB_OFFER, deleteJobPostSaga);\n}\nexport function* watchupdateJobPostSaga() {\n  yield takeEvery(UPDATE_ADVERTISEMENT, updateJobPostSaga);\n}\nexport function* watchpopulateVacancyFormSaga() {\n  yield takeEvery(POPULATE_VACANCY_FORM, populateVacancyFormSaga);\n} // for ee\n\nexport function* watcheditVacancyFormSaga() {\n  yield takeEvery(EDIT_VACANCY_FORM, editVacancyFormSaga);\n}\nexport function* watchupdateCampaignSaga() {\n  yield takeEvery(SAVE_NEW_CAMPAIGN, updateCampaignSaga);\n}\nexport function* watchchangeJobPostStatusSaga() {\n  yield takeEvery(CHANGE_ACTIVE_POST_TO_INACTIVE, changeJobPostStatusSaga);\n}\nexport function* watchgetApplicationDetailsByIdSaga() {\n  yield takeEvery(GET_APPLICATION_DETAILS_BY_ID, getApplicationDetailsByIdSaga);\n}\nexport function* watchupdateApplicantStatusSaga() {\n  yield takeEvery(UPDATE_APPLICANT_STATUS, updateApplicantStatusSaga);\n}\nexport function* watchupdateJobApplicationDetailsSaga() {\n  yield takeEvery(UPDATE_JOB_APPLICATION_DETAILS, updateJobApplicationDetailsSaga);\n}\nexport function* watchgetJobPostViewsByDateSaga() {\n  yield takeEvery(GET_JOBPOST_VIEWS_BY_DATE, getJobPostViewsByDateSaga);\n}\nexport function* watchchangePaginationSaga() {\n  yield takeEvery(NAVIGATE_ADS_FROM_MAIN_MENU, changePaginationSaga);\n  yield takeEvery(OPEN_AD_TO_SEE_AD_INFO, changePaginationSaga);\n}\nexport function* watchEditInterviewDetailsSaga() {\n  yield takeEvery(EDIT_INTERVIEW_DETAILS, displayInitialDetails);\n}\nexport function* watchSaveMarketingDetailsSaga() {\n  yield takeEvery(SAVE_MARKETING_DETAILS, saveMarketingDetailsSaga);\n}\nexport function* watchdeleteApplicationSaga() {\n  yield takeEvery(DELETE_APPLICATION, deleteApplicationSaga);\n}\nexport function* watchChangeRouteSaga() {\n  yield takeEvery(CHANGE_ROUTE, changeRouteSaga);\n}\nexport function* watchAdminGetUserCompanyProfileSaga() {\n  yield takeEvery(ADMIN_GET_USER_PROFILE, adminGetUserCompanyProfileSaga);\n}\nexport function* watchPopulateEmailMessageSaga() {\n  yield takeEvery(POPULATE_EMAIL_MESSAGE, populateEmailMessageSaga);\n  yield takeEvery(AUTO_EMAIL_TO_APPLICANT, populateEmailMessageSaga);\n}","map":{"version":3,"names":["useState","takeEvery","put","call","getFormValues","change","formValueSelector","initialize","getFormInitialValues","touch","SAVE_AND_PUBLISH_ADVERTISEMENT","UPDATE_AND_PUBLISH_ADVERTISEMENT","API_SERVER","API_SERVER_EST","API_SERVER_EST_GET_ID","GET_ALL_CAMPAIGNS","OPEN_AD_TO_SEE_AD_INFO","UPDATE_ADVERTISEMENT","POPULATE_VACANCY_FORM","DELETE_ADVERTISEMENT","GET_ALL_JOB_CATEGORY","GET_ALL_ADS_BY_STATUS","SAVE_ADVERTISEMENT_AS_DRAFT","SAVE_NEW_CAMPAIGN","CHANGE_ACTIVE_POST_TO_INACTIVE","GET_APPLICATION_DETAILS_BY_ID","UPDATE_APPLICANT_STATUS","GET_JOBPOST_VIEWS_BY_DATE","NAVIGATE_ADS_FROM_MAIN_MENU","UPDATE_JOB_APPLICATION_DETAILS","EDIT_INTERVIEW_DETAILS","SAVE_MARKETING_DETAILS","DELETE_APPLICATION","CHANGE_ROUTE","ADMIN_GET_USER_PROFILE","HELP_SERVICE_FEE","SOS_SERVICE_FEE","POPULATE_EMAIL_MESSAGE","AUTO_EMAIL_TO_APPLICANT","EDIT_VACANCY_FORM","DELETE_JOB_OFFER","store","apiManualRequest","apiManualPost","apiOpenRequest","apiGetJobsOffers","filterObj","getAllCampaignsSuccess","saveAndPublishAdvertisementSuccess","getAllJobCategorySuccess","saveAndPublishAdvertisementFailed","getAllAdsByStatusSuccess","saveAndPublishAdvertisement","showSuccessSnackbar","showFailedSnackbar","openAdToSeeAdInfo","populateVacancyFormSuccess","updateAndPublishAdvertisementSuccess","getApplicationDetailsById","getApplicationDetailsByIdSuccess","getJobPostViewsByDateSuccess","changeAdvertPage","getAllAdsByStatus","filterJobs","hideSpinner","saveMarketingDetailsSuccess","closeDialog","registerPayment","sendInvoiceToTalous","getCompanyProfileSuccess","openAdToSeeAdInfoSuccess","getJobsOffers","getAllJobCategoryFromEstoniaSuccess","editVacancyForm","customTranslateCampaign","browserHistory","messageTemplate","axios","useSelector","getAllCampaignsSaga","url","result","resultParsed","JSON","parse","data","error","console","log","getAllJobCategorySaga","saveAndPublishAdvertisementSaga","body","parsedCompany","advertisement","client","companyProfile","getState","formValues","paymentInfoForm","uuid","user","userRole","user_type","payment_method","companyId","profile","company_id","companyDetails","parseInt","jobPostOwner","stringify","selectedCampaign","isSaveAdvertisementAsDraft","isToEdit","uploadedImage","marketingDetails","extraService","isDraft","refinedUploadedImage","name","replace","refinedFormValues","statusToUpdate","help","sos","type","selectedService","Array","isArray","image_document","campaign_type","status","extra_service","campaignLevel","base64","document_id","id","path","filename","filetype","includes_mktbudget","marketing_platform","more_budget","marketing_budget","post","finally","res","getJobPostByPostIdSaga","companyBusinessId","jobs","jobPostNumber","split","populateVacancyFormSaga","campaigns","company_image","image_id","jobName","titleSpecification","workingTime","jobTags","job_location","jobDescription","is_agreement","dateOfApplication","is_email_notification","email","notice_frequency","campaign_id","urlToApplyJob","jobPostAddress","address","postCampaign","find","campaign","campaignDetails","e","editVacancyFormSaga","updateJobPostSaga","logo","updateAndPublishAdvertisementSaga","jobCategory","jobType","jobDuration","jobLocation","applicationUrl","lastApplicationDate","jobTitle","patch","then","parsedResult","updateCampaignSaga","post_id","campaignDate","campaignType","changeJobPostStatusSaga","saveMarketingDetailsSaga","test","displayInitialDetails","deleteJobPostSaga","delete","saveAdvertisementAsDraft","getApplicationDetailsByIdSaga","application_id","updateApplicantStatusSaga","updateJobApplicationDetailsSaga","update","loggedInUser","application_notes","interview_title","interview_msg","interview_date","interview_time","interview_place","getJobPostViewsByDateSaga","viewSelectedAd","deleteApplicationSaga","applicationDetailsToDelete","selectedAd","changeRouteSaga","push","changePaginationSaga","selected","adminGetUserCompanyProfileSaga","populateEmailMessageSaga","languages","companyName","usersCompanyList","selectedCompany","company_name","storedLanguages","isToSendAutoEmail","automaticEmailToggleBtn","messages","watchsaveAndPublishAdvertisementSaga","watchupdateAndPublishAdvertisementSaga","watchSaveAdvertisementAsDraft","watchgetAllCampaignsSaga","watchgetAllJobCategorysSaga","watchgetJobPostByPostIdSaga","watchdeleteJobPostSaga","watchupdateJobPostSaga","watchpopulateVacancyFormSaga","watcheditVacancyFormSaga","watchupdateCampaignSaga","watchchangeJobPostStatusSaga","watchgetApplicationDetailsByIdSaga","watchupdateApplicantStatusSaga","watchupdateJobApplicationDetailsSaga","watchgetJobPostViewsByDateSaga","watchchangePaginationSaga","watchEditInterviewDetailsSaga","watchSaveMarketingDetailsSaga","watchdeleteApplicationSaga","watchChangeRouteSaga","watchAdminGetUserCompanyProfileSaga","watchPopulateEmailMessageSaga"],"sources":["/Users/eduardkazeks/Documents/GitHub/JobPortalEE/src/sagas/advertisements.saga.js"],"sourcesContent":["import {useState} from 'react'\nimport { takeEvery, put, call } from 'redux-saga/effects';\nimport { getFormValues, change, formValueSelector, initialize, getFormInitialValues, touch } from 'redux-form';\nimport {\n  SAVE_AND_PUBLISH_ADVERTISEMENT,\n  UPDATE_AND_PUBLISH_ADVERTISEMENT,\n  API_SERVER,\n  API_SERVER_EST,\n  API_SERVER_EST_GET_ID,\n  GET_ALL_CAMPAIGNS,\n  OPEN_AD_TO_SEE_AD_INFO,\n  UPDATE_ADVERTISEMENT,\n  POPULATE_VACANCY_FORM,\n  DELETE_ADVERTISEMENT,\n  GET_ALL_JOB_CATEGORY,\n  GET_ALL_ADS_BY_STATUS,\n  SAVE_ADVERTISEMENT_AS_DRAFT,\n  SAVE_NEW_CAMPAIGN,\n  CHANGE_ACTIVE_POST_TO_INACTIVE,\n  GET_APPLICATION_DETAILS_BY_ID,\n  UPDATE_APPLICANT_STATUS,\n  GET_JOBPOST_VIEWS_BY_DATE,\n  NAVIGATE_ADS_FROM_MAIN_MENU,\n  UPDATE_JOB_APPLICATION_DETAILS,\n  EDIT_INTERVIEW_DETAILS,\n  SAVE_MARKETING_DETAILS,\n  DELETE_APPLICATION,\n  CHANGE_ROUTE,\n  ADMIN_GET_USER_PROFILE,\n  HELP_SERVICE_FEE,\n  SOS_SERVICE_FEE,\n  POPULATE_EMAIL_MESSAGE,\n  AUTO_EMAIL_TO_APPLICANT,\n  EDIT_VACANCY_FORM,\n  DELETE_JOB_OFFER,\n} from '../constants';\nimport store from '../store';\nimport { apiManualRequest, apiManualPost, apiOpenRequest, apiGetJobsOffers } from '../utils/request';\nimport { filterObj } from '../utils/wrappers';\nimport {\n  getAllCampaignsSuccess,\n  saveAndPublishAdvertisementSuccess,\n  getAllJobCategorySuccess,\n  saveAndPublishAdvertisementFailed,\n  getAllAdsByStatusSuccess,\n  saveAndPublishAdvertisement,\n  showSuccessSnackbar,\n  showFailedSnackbar,\n  openAdToSeeAdInfo,\n  populateVacancyFormSuccess,\n  updateAndPublishAdvertisementSuccess,\n  getApplicationDetailsById,\n  getApplicationDetailsByIdSuccess,\n  getJobPostViewsByDateSuccess,\n  changeAdvertPage,\n  getAllAdsByStatus,\n  filterJobs,\n  hideSpinner,\n  saveMarketingDetailsSuccess,\n  closeDialog,\n  registerPayment,\n  sendInvoiceToTalous,\n  getCompanyProfileSuccess,\n  openAdToSeeAdInfoSuccess,\n  getJobsOffers,\n  getAllJobCategoryFromEstoniaSuccess,\n  editVacancyForm,\n} from '../actions';\nimport { customTranslateCampaign } from '../utils/customTranslate';\nimport browserHistory from '../history';\nimport { messageTemplate } from '../components/companies/advertisements/automaticMessageToApplicants/messages';\nimport axios from 'axios';\nimport { useSelector } from 'react-redux';\n\nfunction* getAllCampaignsSaga() {\n  try {\n    const url = `${API_SERVER}/GetCampaigns`;\n    const result = yield call(apiManualRequest, url);\n    const resultParsed = JSON.parse(result.data);\n    yield put(getAllCampaignsSuccess(resultParsed));\n  } catch (error) {\n    console.log(error);\n  }\n}\nfunction* getAllJobCategorySaga() {\n  try {\n    const url = `${API_SERVER}/GetJobCategories`;\n    const result = yield call(apiOpenRequest, url);\n    const resultParsed = JSON.parse(result.data);\n    yield put(getAllJobCategorySuccess(resultParsed));\n  } catch (error) {\n    console.log(error);\n  }\n}\n\n// function saveAndPublishAdvertisementEstonia(){\n//   try{\n//     let url;\n//     let body;\n//     let parsedCompany ={};\n\n//   }\n// }\n\nfunction* saveAndPublishAdvertisementSaga() {\n  try {\n    let url;\n    let body;\n    let parsedCompany = {};\n\n    const { advertisement, client, companyProfile } = store.getState();\n    const formValues = getFormValues('vacancy')(store.getState());\n    const paymentInfoForm = getFormValues('paymentInfo')(store.getState());\n    const uuid = client.user.data[2];\n    const userRole = client.user.data[6].user_type;\n    const payment_method = paymentInfoForm && paymentInfoForm.payment_method;\n    const companyId = companyProfile.profile.company_id;\n\n    if (!formValues.company_id) {\n      formValues.company_id = companyId; // Also sending company_id to add company specific post.\n    }\n\n    yield put(closeDialog());\n\n    if (userRole === 'admin') {\n      const companyDetails = {\n        company_id: parseInt(formValues.company_id),\n        uuid,\n      };\n      const jobPostOwner = yield call(apiManualPost, `${API_SERVER}/GetCompanyProfile`, JSON.stringify({ ...companyDetails }));\n      parsedCompany = JSON.parse(jobPostOwner.data);\n    }\n\n    const { selectedCampaign, isSaveAdvertisementAsDraft, isToEdit, uploadedImage, marketingDetails, extraService } = advertisement;\n    const isDraft = isSaveAdvertisementAsDraft;\n    const refinedUploadedImage = uploadedImage && uploadedImage.name && uploadedImage.name.replace(/\\s+\\(\\d+\\)/g, 'JP'); // If stored filename has (int), dropzone doesn't understand the path..so changing such names before sending to db.\n    const refinedFormValues = filterObj('image_document', formValues);\n\n    if (isToEdit) {\n      url = `${API_SERVER_EST}/updateJobOffer`;\n    } else {\n      url = `${API_SERVER_EST}/postJob`;\n    }\n\n    const statusToUpdate = isDraft || extraService.help || extraService.sos ? 0 : selectedCampaign.type === 'free' ? 1 : 4;\n\n    const selectedService = extraService.help ? 'help' : extraService.sos ? 'sos' : null;\n\n    // image_document array means, it already exists in db, no need to send while updating\n    if (Array.isArray(formValues.image_document) === true) {\n      body = {\n        ...refinedFormValues,\n        uuid,\n        campaign_type: selectedCampaign.type,\n        status: statusToUpdate,\n        extra_service: selectedService,\n      };\n    } else if (!uploadedImage.name) {\n      // no uploaded image means, no need to send any base64. Also, if there is an image stored in db..and we want to delete it, I am changing the formvalues of image_document in component\n      body = {\n        ...formValues,\n        uuid,\n        campaignLevel: selectedCampaign.type,\n        status: statusToUpdate,\n        extra_service: selectedService,\n      };\n    } else if (uploadedImage.name && !Array.isArray(formValues.image_document)) {\n      const base64 = formValues.image_document;\n      body = {\n        ...formValues,\n        uuid,\n        campaignLevel: selectedCampaign.type,\n        status: statusToUpdate,\n        image_document: {\n          uuid,\n          document_id: uploadedImage.id,\n          path: '',\n          filename: refinedUploadedImage,\n          filetype: uploadedImage.type,\n          data: base64,\n        },\n        extra_service: selectedService,\n      };\n    }\n    if (selectedCampaign.includes_mktbudget) {\n      const { marketing_platform, more_budget, marketing_budget } = marketingDetails;\n      body.marketing_platform = !!marketing_platform ? marketing_platform : null;\n      body.more_budget = !!more_budget ? more_budget : null;\n      body.marketing_budget = !!marketing_budget ? parseInt(marketing_budget) : 0;\n    }\n    // SAVING AND PUBLISHING JOBPOST\n    // const result = yield call(apiManualPost, url, JSON.stringify({ ...body }));\n    // const parsedResult = JSON.parse(result.data);\n    const result = axios.post(url,body).finally((res)=> {\n       saveAndPublishAdvertisementSuccess();\n       \n    })\n    // If publishing post, Generate invoice under the hood via Talousvirta API or online payment via NETS\n\n    // if (parsedResult) {\n    //   const { company_name, business_id, firstname, lastname, email, address, zip_code, city } =\n    //     userRole === 'admin' ? parsedCompany[0] : companyProfile.profile;\n    //   const jobTitle = formValues.job_title;\n    //   const postId = parsedResult[0].post_id;\n    //   const orderId = parsedResult[0].order_id;\n    //   const publishedPostStatus = parsedResult[0].job_post_status;\n    //   const description = `${jobTitle} | Kampanjapaketti - ${customTranslateCampaign(selectedCampaign.id)}`;\n    //   const mkt_description = `${jobTitle} | Lisätty markkinointiraha`;\n\n    //   const extra_service_description = `Aktivoitu lisäpalvelu | ${extraService.help ? 'HELP' : 'SOS'}`;\n\n    //   // If mkt budget is added with campaigns with mkt budget, i.e. 5th campaign for now.\n    //   let marketing_budget = 0;\n    //   if (selectedCampaign.includes_mktbudget && !!parsedResult[0].marketing_budget) {\n    //     marketing_budget = parsedResult[0].marketing_budget;\n    //   }\n\n    //   const extra_service_fee = extraService.help ? HELP_SERVICE_FEE : extraService.sos ? SOS_SERVICE_FEE : 0;\n\n    //   if (\n    //     (publishedPostStatus === 0 && extra_service_fee > 0) || // If help and sos are added as extra service\n    //     publishedPostStatus === 4 // If paid campaigns are selected, temporary placeholder status\n    //   ) {\n    //     const isExtraServiceAdded = publishedPostStatus === 0 && extra_service_fee > 0 ? true : false;\n    //     const extra_service_fee_with_vat = extra_service_fee * 1.24; // Total price for the extra service including vat\n\n    //     const amount = parsedResult[0].job_post_campaign_money;\n    //     const totalSum = (marketing_budget + amount) * 1.24;\n\n    //     const details = {\n    //       company_id: formValues.company_id,\n    //       company_name,\n    //       business_id,\n    //       firstname,\n    //       lastname,\n    //       email,\n    //       address,\n    //       zip_code,\n    //       city,\n    //       description: isExtraServiceAdded ? extra_service_description : description,\n    //       totalSum: isExtraServiceAdded ? extra_service_fee_with_vat : totalSum,\n    //       amount: isExtraServiceAdded ? extra_service_fee : amount,\n    //       post_id: postId,\n    //       order_id: orderId,\n    //       marketing_budget,\n    //       mkt_description,\n    //       selectedCampaign,\n    //     };\n\n    //     if (payment_method === 'invoice') {\n    //       yield put(sendInvoiceToTalous(details));\n    //     } else if (payment_method === 'online') {\n    //       \\ put(registerPayment(details));\n    //     }\n    //   }\n    //   // Post saved as a draft or free campaign or help/sos feature\n    //   //if (parsedResult[0].job_post_status !== 4)\n    //   else {\n    //     yield put(saveAndPublishAdvertisementSuccess());\n    //   }\n    // } else {\n    //   yield put(saveAndPublishAdvertisementFailed());\n    // }\n  } catch (error) {\n    console.log(error);\n    yield put(saveAndPublishAdvertisementFailed());\n  }\n}\n\nfunction* getJobPostByPostIdSaga({ id }) {\n  // try {\n  //     console.log('idSaga');\n  // } catch (error) {\n  //   console.log(error);\n  // }\n  try {\n    const url = `${API_SERVER_EST}/${id}`;\n    const companyBusinessId = store.getState().jobs.companyBusinessId;\n    const userRole = store.getState().client.user.data[6].user_type;\n\n    const body = JSON.stringify({\n      jobPostNumber: userRole === 'admin' ? id.split('admin')[0] : id,\n      companyBusinessId: userRole === 'admin' ? id.split('admin')[1] : companyBusinessId,\n    });\n    const result = yield call(apiOpenRequest, url, body);\n    const resultParsed = JSON.parse(result.data);\n    yield put(openAdToSeeAdInfoSuccess(resultParsed[0]));\n  } catch (error) {\n    console.log(error);\n    yield put(hideSpinner());\n  }\n}\n\n// function* getAllAdsByStatusSaga({ status }) {\n//   try {\n//     const url = `${API_SERVER}/SearchJobPosts`;\n//     const { client, usersCompanyList, companyProfile } = store.getState();\n//     const uuid = client.user.data[2];\n//     const roleId = client.user.data[5];\n//     let selectedCompanyId;\n//     selectedCompanyId = usersCompanyList.selectedCompany.company_id;\n//     const assignedCompanyId = client.user.data[6].company_id;\n\n//     if (!selectedCompanyId) {\n//       // For first time registered users, client company_id is null since user profile is not updated\n//       selectedCompanyId = companyProfile.profile.company_id;\n//     }\n\n//     const company_id = roleId === 0 ? selectedCompanyId : assignedCompanyId; //super user with many companies\n//     const body = JSON.stringify({\n//       status,\n//       uuid,\n//       company_id,\n//     });\n\n//     const result = yield call(apiManualPost, url, body);\n//     const resultParsed = JSON.parse(result.data);\n//     yield put(getAllAdsByStatusSuccess(status, resultParsed));\n//   } catch (error) {\n//     console.log(error);\n//   }\n// }\n// Populating vacancy form when editing or copying\nfunction* populateVacancyFormSaga({ id, isToEdit }) {\n  try {\n    const url = `${API_SERVER_EST}/${id}`;\n    //const companyBusinessId = store.getState().jobs.companyBusinessId;\n    const campaigns = store.getState().advertisement.campaigns;\n    const userRole = store.getState().client.user.data[6].user_type;\n\n    const body = JSON.stringify({\n      jobPostNumber: userRole === 'admin' ? id.split('admin')[0] : id,\n      //companyBusinessId: userRole === 'admin' ? id.split('admin')[1] : companyBusinessId,\n    });\n    const result = yield call(apiManualRequest, url);\n    const resultParsed = result.data;\n    console.log(resultParsed)\n    // console.log('resultParsed', resultParsed);\n    // If we are populating from Draft Component, we are editing--> call UpdateJobPost API, it needs company_id && post_id which is being sent along with the vacancy form!\n\n    const {\n      jobPostNumber,\n      //companyBusinessId,\n      company_image,\n      image_id,\n      jobName,\n      titleSpecification,\n      workingTime,\n      jobTags,\n      job_location,\n      jobDescription,\n      is_agreement,\n      dateOfApplication,\n      is_email_notification,\n      email,\n      notice_frequency,\n      campaign_id,\n      marketing_platform,\n      more_budget,\n      marketing_budget,\n      urlToApplyJob,\n    } = resultParsed;\n\n    if (isToEdit) {\n      yield put(change('vacancy', 'jobPostNumber', jobPostNumber));\n     // yield put(change('vacancy', 'company_id', company_id));\n      if (company_image) {\n        yield put(change('vacancy', 'image_document', company_image));\n        yield put(change('vacancy', 'image_id', image_id));\n      }\n    }\n    yield put(change('vacancy', 'jobTitle', jobName));\n    yield put(change('vacancy', 'jobType', titleSpecification));\n    yield put(change('vacancy', 'jobDuration', workingTime));\n    yield put(change('vacancy', 'jobCategory', jobTags));\n    yield put(change('vacancy', 'jobLocation', resultParsed.jobPostAddress.address));\n    yield put(change('vacancy', 'jobDescription', jobDescription));\n    yield put(change('vacancy', 'is_agreement', true));\n    yield put(change('vacancy', 'applicationUrl', urlToApplyJob));\n\n    yield put(change('vacancy', 'lastApplicationDate', dateOfApplication));\n    yield put(change('vacancy', 'is_email_notification', is_email_notification));\n    yield put(change('vacancy', 'email', email));\n    yield put(change('vacancy', 'notice_frequency', notice_frequency));\n\n    const postCampaign = campaigns.find(campaign => campaign.id === campaign_id);\n\n    const campaignDetails = {\n      postCampaign,\n      marketing_platform,\n      more_budget,\n      marketing_budget,\n    };\n\n   // yield put(populateVacancyFormSuccess(campaignDetails, isToEdit));\n  } catch (e) {\n    console.log(e);\n  }\n}\n\nfunction* editVacancyFormSaga({id, isToEdit}) {\n  try {\n    const url = `${API_SERVER_EST}/${id}`;\n    const campaigns = store.getState().advertisement.campaigns;\n    const userRole = store.getState().client.user.data[6].user_type;\n\n    const body = JSON.stringify({\n      jobPostNumber: userRole === 'admin' ? id.split('admin')[0] : id,\n    });\n    const result = yield call(apiManualRequest, url);\n    const resultParsed = result.data;\n    console.log('saga works')\n    // If we are populating from Draft Component, we are editing--> call UpdateJobPost API, it needs company_id && post_id which is being sent along with the vacancy form!\n\n    const {\n      jobPostNumber,\n      company_image,\n      image_id,\n      jobName,\n      titleSpecification,\n      workingTime,\n      jobTags,\n      job_location,\n      jobDescription,\n      is_agreement,\n      dateOfApplication,\n      is_email_notification,\n      email,\n      notice_frequency,\n      campaign_id,\n      marketing_platform,\n      more_budget,\n      marketing_budget,\n      urlToApplyJob,\n    } = resultParsed;\n\n    if (isToEdit) {\n      yield put(change('editVacancy', 'jobPostNumber', jobPostNumber));\n     // yield put(change('vacancy', 'company_id', company_id));\n      if (company_image) {\n        yield put(change('editVacancy', 'image_document', company_image));\n        yield put(change('editVacancy', 'image_id', image_id));\n      }\n    }\n    yield put(change('editVacancy', 'jobTitle', jobName));\n    yield put(change('editVacancy', 'jobType', titleSpecification));\n    yield put(change('editVacancy', 'jobDuration', workingTime));\n    yield put(change('editVacancy', 'jobCategory', jobTags));\n   // yield put(change('editVacancy', 'jobLocation', resultParsed.jobPostAddress.address));\n    yield put(change('editVacancy', 'jobDescription', jobDescription));\n    yield put(change('editVacancy', 'is_agreement', true));\n    yield put(change('editVacancy', 'applicationUrl', urlToApplyJob));\n\n    yield put(change('editVacancy', 'lastApplicationDate', dateOfApplication));\n    yield put(change('editVacancy', 'is_email_notification', is_email_notification));\n    yield put(change('editVacancy', 'email', email));\n    yield put(change('editVacancy', 'notice_frequency', notice_frequency));\n\n    const postCampaign = campaigns.find(campaign => campaign.id === campaign_id);\n\n    const campaignDetails = {\n      postCampaign,\n      marketing_platform,\n      more_budget,\n      marketing_budget,\n    };\n\n    yield put(populateVacancyFormSuccess(campaignDetails, isToEdit));\n  } catch (e) {\n    console.log(e);\n  }\n}\n// Update advertisement - editAdvertForm is open/ Campaigns are not shown here.\n\nfunction* updateJobPostSaga({isToEdit,id}) {\n  try {\n    const url = `${API_SERVER_EST}/${id}`;\n    const result = yield call(apiManualRequest, url);\n    const resultParsed = result.data;\n\n    const {\n      jobPostNumber,\n      logo,\n      image_id,\n      jobName,\n      companyBusinessId,\n      titleSpecification,\n      workingTime,\n      jobTags,\n      job_location,\n      jobDescription,\n      is_agreement,\n      dateOfApplication,\n      is_email_notification,\n      email,\n      notice_frequency,\n      campaign_id,\n      marketing_platform,\n      more_budget,\n      marketing_budget,\n      urlToApplyJob,\n    } = resultParsed;\n\n    if (isToEdit) {\n      yield put(change('editVacancy', 'jobPostNumber', jobPostNumber));\n      yield put(change('vacancy', 'companyBusinessId', companyBusinessId));\n      if (logo) {\n        yield put(change('editVacancy', 'image_document', logo));\n        yield put(change('editVacancy', 'image_id', image_id));\n      }\n    }\n    yield put(change('editVacancy', 'jobName', jobName));\n    yield put(change('editVacancy', 'titleSpecification', titleSpecification));\n    yield put(change('editVacancy', 'jobDuration', workingTime));\n    yield put(change('editVacancy', 'jobCategory', jobTags));\n    yield put(change('editVacancy', 'jobLocation', resultParsed.jobPostAddress.address));\n    yield put(change('editVacancy', 'jobDescription', jobDescription));\n    yield put(change('editVacancy', 'is_agreement', true));\n    yield put(change('editVacancy', 'applicationUrl', urlToApplyJob));\n\n    yield put(change('editVacancy', 'lastApplicationDate', dateOfApplication));\n    yield put(change('editVacancy', 'is_email_notification', is_email_notification));\n    yield put(change('editVacancy', 'email', email));\n    yield put(change('editVacancy', 'notice_frequency', notice_frequency));\n\n  } catch (error) {\n    console.log(error);\n  }\n}\n\nfunction* updateAndPublishAdvertisementSaga() {\n  try {\n    const {\n      jobPostNumber,\n      jobName,\n      jobCategory,\n      jobType,\n      jobDuration,\n      jobLocation,\n      applicationUrl,\n      lastApplicationDate,\n      jobDescription,\n      campaignLevel\n    } = getFormValues('editVacancy')(store.getState());\n    let body = {\n      id: id,\n      jobTitle: jobName,\n      jobCategory,\n      jobType,\n      jobDuration,\n      jobLocation,\n      applicationUrl,\n      lastApplicationDate,\n      jobDescription,\n    }\n    const url = `${API_SERVER_EST}/updateJobOffer`;\n    const formValues = getFormValues('editVacancy')(store.getState());\n    const uuid = store.getState().client.user.data[2];\n    const { uploadedImage } = store.getState().advertisement;\n    const userRole = store.getState().client.user.data[6].user_type;\n\n    const refinedUploadedImage = uploadedImage && uploadedImage.name && uploadedImage.name.replace(/\\(\\d+\\)/, 'JP'); // If stored filename has (int), dropzone doesn't understand the path..so changing such names before sending to db.\n    const refinedFormValues = filterObj('image_document', formValues);\n\n    // image_document array means, it already exists in db, no need to send while updating\n    // if (Array.isArray(formValues.image_document) === true) {\n    //   body = JSON.stringify({\n    //     ...refinedFormValues,\n    //     uuid,\n    //   });\n    // } else if (!uploadedImage.name) {\n    //   // no uploaded image means, no need to send any base64. Also, if there is an image stored in db..and we want to delete it, I am changing the formvalues of image_document in component\n    //   body = JSON.stringify({\n    //     ...formValues,\n    //     uuid,\n    //   });\n    // } else {\n    //   const base64 = formValues.image_document;\n    //   body = JSON.stringify({\n    //     ...formValues,\n    //     uuid,\n    //     image_document: {\n    //       uuid,\n    //       document_id: uploadedImage.id,\n    //       path: '',\n    //       filename: refinedUploadedImage,\n    //       filetype: uploadedImage.type,\n    //       data: base64,\n    //     },\n      // });\n    // }\n\n    //const result = yield call(apiManualPost, url, body);\n   const result = axios.patch(url, body).then((res) => {\n    \n   })\n    // const parsedResult = JSON.parse(result.data);\n    const parsedResult = result.data;\n    if (parsedResult) {\n      yield put(updateAndPublishAdvertisementSuccess());\n      if (userRole === 'admin') {\n        yield put(openAdToSeeAdInfo(`${formValues.id}admin${formValues.company_id}`));\n      } else {\n        yield put(openAdToSeeAdInfo(formValues.id));\n      }\n    } else {\n      yield put(saveAndPublishAdvertisementFailed());\n    }\n  } catch (e) {\n    console.log(e);\n    yield put(saveAndPublishAdvertisementFailed());\n  }\n}\n\n// Update campaign\nfunction* updateCampaignSaga({ id }) {\n  try {\n    yield put(closeDialog());\n\n    const { advertisement, client, companyProfile,jobs } = store.getState();\n    const paymentInfoForm = getFormValues('paymentInfo')(store.getState());\n    const payment_method = paymentInfoForm && paymentInfoForm.payment_method;\n\n    // Upgrade campaign\n    const url = `https://localhost:7262/updateJobOfferCampaignType`;\n    const uuid = store.getState().client.user.data[2];\n    const { type, includes_mktbudget } = advertisement.selectedCampaign;\n    const campaign_id = advertisement.selectedCampaign.id;\n    const userRole = client.user.data[6].user_type;\n    const {id} = jobs\n    const post_id = userRole === 'admin' ? id.split('admin')[0] : id;\n    const companyId = userRole === 'admin' ? id.split('admin')[1] : companyProfile.profile.company_id;\n    const campaignDate = formValueSelector('campaign')(store.getState(), 'due_date');\n    let parsedCompany = {};\n\n    const body = {\n      campaignType: type,\n      //uuid,\n      id,\n      //company_id: companyId,\n      campaignDate,\n    };\n\n    if (includes_mktbudget) {\n      const { marketing_platform, more_budget, marketing_budget } = advertisement.marketingDetails;\n\n      body.marketing_platform = !!marketing_platform ? marketing_platform : null;\n      body.more_budget = !!more_budget ? more_budget : null;\n      body.marketing_budget = !!marketing_budget ? parseInt(marketing_budget) : 0;\n    }\n\n    // const result = yield call(apiManualPost, url, JSON.stringify({ ...body }));\n      const result = axios.patch(url,body).finally((res) => {\n        showSuccessSnackbar(res)\n      })\n    const resultParsed = JSON.parse(result.data);\n\n    // if (resultParsed) {\n    //   //If admin is upgrading post or updating jobpost on behalf of companies:\n    //   if (userRole === 'admin') {\n    //     const body2 = {\n    //       company_id: parseInt(companyId),\n    //       uuid,\n    //     };\n    //     const jobPostOwner = yield call(apiManualPost, `${API_SERVER}/GetCompanyProfile`, JSON.stringify({ ...body2 }));\n    //     parsedCompany = JSON.parse(jobPostOwner.data);\n    //   }\n\n    //   const { company_name, business_id, firstname, lastname, email, address, zip_code, city } =\n    //     userRole === 'admin' ? parsedCompany[0] : companyProfile.profile;\n    //   const jobTitle = advertisement.viewSelectedAd.job_title;\n    //   const description = `${jobTitle} | Kampanjapaketti - ${customTranslateCampaign(campaign_id)}`;\n    //   const mkt_description = `${jobTitle} | Lisätty markkinointiraha`;\n\n    //   const orderId = resultParsed[0].order_id;\n    //   const previousCampaignPrice = resultParsed[0].prev_campaign_money;\n    //   const newCampaignPrice = resultParsed[0].new_campaign_money;\n    //   const amount = newCampaignPrice - previousCampaignPrice;\n\n    //   // If mkt budget is added.\n    //   let marketing_budget = 0;\n    //   const newMarketingBudget = resultParsed[0].marketing_budget;\n    //   if (includes_mktbudget && newMarketingBudget > 0) {\n    //     marketing_budget = newMarketingBudget;\n    //   }\n    //   const totalSum = (marketing_budget + amount) * 1.24;\n\n    //   // If new and more expensive campaign price OR more marketing budget, generate invoice\n\n    //   const details = {\n    //     company_id: companyId,\n    //     company_name,\n    //     business_id,\n    //     firstname,\n    //     lastname,\n    //     email,\n    //     address,\n    //     zip_code,\n    //     city,\n    //     description,\n    //     totalSum,\n    //     amount,\n    //     post_id: parseInt(post_id),\n    //     order_id: orderId,\n    //     marketing_budget,\n    //     mkt_description,\n    //     isSameCampaign: amount === 0 ? true : false, // Meaning same campaign but new budget\n    //     selectedCampaign: advertisement.selectedCampaign,\n    //     postIdToFetch: id,\n    //   };\n    //   if (payment_method === 'invoice') {\n    //     yield put(sendInvoiceToTalous(details));\n    //   } else if (payment_method === 'online') {\n    //     yield put(registerPayment(details));\n    //   } else {\n    //     yield put(showSuccessSnackbar());\n    //   }\n    // }\n  } catch (error) {\n    console.log(error);\n    yield put(showFailedSnackbar());\n  }\n}\n\nfunction* changeJobPostStatusSaga({ id }) {\n  try {\n    const url = `${API_SERVER}/UpdateJobPostStatus`;\n    const { company_id } = store.getState().companyProfile.profile;\n    const post_id = id;\n    const userRole = store.getState().client.user.data[6].user_type;\n\n    const body = JSON.stringify({\n      post_id: userRole === 'admin' ? id.split('admin')[0] : post_id, // For admins, we need to get company id from post itself\n      company_id: userRole === 'admin' ? id.split('admin')[1] : company_id,\n      status: 2,\n    });\n    const result = yield call(apiManualPost, url, body);\n    if (result.data === 'Job Post Status updated successfully!') {\n      yield put(showSuccessSnackbar());\n      yield put(openAdToSeeAdInfo(id));\n    } else {\n      yield put(showFailedSnackbar());\n    }\n  } catch (e) {\n    console.log(e);\n  }\n}\nfunction* saveMarketingDetailsSaga() {\n  try {\n    const formValues = getFormValues('marketingDetails')(store.getState());\n    const { marketing_platform, more_budget, marketing_budget } = formValues;\n    if (!marketing_platform) {\n      yield put(touch('marketingDetails', 'marketing_platform'));\n      return;\n    }\n    if (!more_budget) {\n      yield put(touch('marketingDetails', 'more_budget'));\n      return;\n    }\n    if (more_budget === 'yes') {\n      if (!marketing_budget) {\n        yield put(touch('marketingDetails', 'marketing_budget'));\n        return;\n      }\n    }\n    if (marketing_budget && (parseInt(marketing_budget) < 1 || !/^[0-9]+$/.test(marketing_budget))) {\n      return;\n    }\n    yield put(saveMarketingDetailsSuccess(formValues));\n    yield put(closeDialog());\n  } catch (e) {\n    console.log(e);\n  }\n}\n\nfunction* displayInitialDetails({ isToEdit }) {\n  try {\n    if (!isToEdit) yield put(initialize('applicantDetails', getFormInitialValues('applicantDetails')(store.getState())));\n  } catch (e) {\n    console.log(e);\n  }\n}\nfunction* deleteJobPostSaga({ id }) {\n  try {\n    const url = `${API_SERVER_EST}/${id}`;\n    const companyId = store.getState().companyProfile.profile.company_id;\n    const userRole = store.getState().client.user.data[6].user_type;\n\n    const body = JSON.stringify({\n      post_id: userRole === 'admin' ? id.split('admin')[0] : id,\n      company_id: userRole === 'admin' ? id.split('admin')[1] : companyId,\n    });\n    //yield call( apiOpenRequest, url);\n      const result = axios.delete(url).finally((res) => {})\n    if (userRole === 'admin') {\n      yield put(filterJobs(result,true));\n    } else {\n      yield put(getAllAdsByStatus(0));\n      yield put(getAllAdsByStatus(1));\n      yield put(getAllAdsByStatus(2));\n    }\n  } catch (error) {\n    console.log(error);\n  }\n}\n\nfunction* saveAdvertisementAsDraft() {\n  yield put(saveAndPublishAdvertisement());\n}\n\nfunction* getApplicationDetailsByIdSaga({ application_id, company_id, post_id, email }) {\n  try {\n    const url = `${API_SERVER}/GetApplicationById`;\n\n    const body = JSON.stringify({\n      application_id,\n      company_id,\n      post_id,\n      email,\n    });\n\n    const result = yield call(apiManualPost, url, body);\n    const resultParsed = JSON.parse(result.data);\n    if (resultParsed) {\n      yield put(getApplicationDetailsByIdSuccess(resultParsed[0]));\n      yield put(openAdToSeeAdInfo(post_id));\n    }\n\n    /* if (!resultParsed[0].interview_title) {\n      const form = getFormValues('applicantDetails')(store.getState());\n      form.interview_title = 'Haastattelu';\n    } */\n  } catch (e) {\n    console.log(e);\n  }\n}\n\nfunction* updateApplicantStatusSaga({ application_id, company_id, post_id, email, status }) {\n  try {\n    const url = `${API_SERVER}/UpdateJobApplicationStatus`;\n    const body = JSON.stringify({\n      application_id,\n      company_id,\n      post_id,\n      email,\n      status,\n    });\n    const result = yield call(apiManualPost, url, body);\n    if (result.data === \"Job Application's status updated successfully!\") {\n      //yield put(showSuccessSnackbar());\n      yield put(getApplicationDetailsById(application_id, company_id, post_id, email));\n      yield put(openAdToSeeAdInfo(post_id));\n    } else {\n      yield put(showFailedSnackbar());\n    }\n  } catch (e) {\n    console.log(e);\n  }\n}\nfunction* updateJobApplicationDetailsSaga({ application_id, company_id, post_id, email, update }) {\n  try {\n    let body;\n    const url = `${API_SERVER}/UpdateJobApplicationDetails`;\n    const formValues = getFormValues('applicantDetails')(store.getState());\n    const loggedInUser = store.getState().client.user.data[1];\n    const { application_notes, interview_title, interview_msg, interview_date, interview_time, interview_place } = formValues;\n\n    if (update === 'note') {\n      body = JSON.stringify({\n        application_id,\n        company_id,\n        post_id,\n        email,\n        update,\n        application_notes,\n      });\n    } else {\n      body = JSON.stringify({\n        application_id,\n        company_id,\n        post_id,\n        email,\n        update,\n        interview_title,\n        interview_msg,\n        interview_date,\n        interview_time,\n        interview_place,\n        loggedInUser,\n      });\n    }\n    const result = yield call(apiManualPost, url, body);\n    if (result.data === \"Job Application's details updated successfully!\" || result.data === 'Interview reminder emails sent successfully!') {\n      yield put(showSuccessSnackbar());\n      yield put(getApplicationDetailsById(application_id, company_id, post_id, email));\n      yield put(openAdToSeeAdInfo(post_id));\n    } else {\n      yield put(showFailedSnackbar());\n    }\n    // console.log('result', result);\n  } catch (e) {\n    console.log(e);\n  }\n}\n\n// Dashboard chart\nfunction* getJobPostViewsByDateSaga() {\n  try {\n    const url = `${API_SERVER}/GetJobPostViewsByDate`;\n    const { company_id } = store.getState().advertisement.viewSelectedAd;\n    const { post_id } = store.getState().advertisement.viewSelectedAd;\n    const body = JSON.stringify({\n      company_id,\n      post_id,\n    });\n    const result = yield call(apiManualPost, url, body);\n    const resultParsed = JSON.parse(result.data);\n    if (resultParsed) {\n      yield put(getJobPostViewsByDateSuccess(resultParsed));\n    }\n  } catch (e) {\n    console.log(e);\n  }\n}\n\n//DELETE APPLICATION SAGA\nfunction* deleteApplicationSaga() {\n  try {\n    const url = `${API_SERVER}/DeleteApplicationById`;\n    const { applicationDetailsToDelete } = store.getState().advertisement;\n    const { selectedAd } = store.getState().advertisement;\n\n    const body = JSON.stringify({\n      ...applicationDetailsToDelete,\n    });\n\n    const result = yield call(apiManualPost, url, body);\n\n    if (result.data === 'Job application successfully deleted') {\n      yield put(openAdToSeeAdInfo(selectedAd));\n    }\n  } catch (error) {\n    console.log(error);\n  }\n}\n\nfunction* changeRouteSaga() {\n  try {\n    const userRole = store.getState().client.user.data[6].user_type;\n\n    if (userRole === 'company') {\n      browserHistory.push('/omat-ilmoitukseni');\n    }\n    if (userRole === 'admin') {\n      browserHistory.push('/lisapalvelu');\n    }\n    yield put(null); //Yield statement for generator function\n  } catch (error) {\n    console.log(error);\n  }\n}\n\n// When navigateAdsFromMainMenu is dispatched, we want to ensure the page lands to 0 index.\nfunction* changePaginationSaga() {\n  yield put(changeAdvertPage({ selected: 0 }));\n}\n\nfunction* adminGetUserCompanyProfileSaga({ id }) {\n  const url = `${API_SERVER}/GetCompanyProfile`;\n\n  try {\n    const uuid = store.getState().client.user.data[2];\n    const body = JSON.stringify({ company_id: id, uuid });\n    const result = yield call(apiManualPost, url, body);\n    const resultParsed = JSON.parse(result.data)[0];\n    yield put(getCompanyProfileSuccess(resultParsed));\n  } catch (e) {\n    console.log(e);\n  }\n}\n\n// Automatic answers with email messages saga\nfunction* populateEmailMessageSaga({ languages }) {\n  const companyName = store.getState().usersCompanyList.selectedCompany?.company_name;\n  const storedLanguages = formValueSelector('vacancy')(store.getState(), 'email_language');\n\n  const isToSendAutoEmail = store.getState().advertisement.automaticEmailToggleBtn;\n\n  try {\n    if (isToSendAutoEmail) {\n      const messages = messageTemplate(companyName, languages ? languages : storedLanguages);\n      yield put(change('vacancy', 'email_message', messages));\n    }\n  } catch (e) {\n    console.log(e);\n  }\n}\n\nexport function* watchsaveAndPublishAdvertisementSaga() {\n  yield takeEvery(SAVE_AND_PUBLISH_ADVERTISEMENT, saveAndPublishAdvertisementSaga);\n}\nexport function* watchupdateAndPublishAdvertisementSaga() {\n  yield takeEvery(UPDATE_AND_PUBLISH_ADVERTISEMENT, updateAndPublishAdvertisementSaga);\n}\nexport function* watchSaveAdvertisementAsDraft() {\n  yield takeEvery(SAVE_ADVERTISEMENT_AS_DRAFT, saveAdvertisementAsDraft);\n}\n\nexport function* watchgetAllCampaignsSaga() {\n  yield takeEvery(GET_ALL_CAMPAIGNS, getAllCampaignsSaga);\n}\n\nexport function* watchgetAllJobCategorysSaga() {\n  yield takeEvery(GET_ALL_JOB_CATEGORY, getAllJobCategorySaga);\n}\n\n// export function* watchgetAllAdsByStatusSaga() {\n//   yield takeEvery(GET_ALL_ADS_BY_STATUS, getAllAdsByStatusSaga);\n// }\nexport function* watchgetJobPostByPostIdSaga() {\n  yield takeEvery(OPEN_AD_TO_SEE_AD_INFO, getJobPostByPostIdSaga);\n}\nexport function* watchdeleteJobPostSaga() {\n  yield takeEvery(DELETE_JOB_OFFER, deleteJobPostSaga);\n}\nexport function* watchupdateJobPostSaga() {\n  yield takeEvery(UPDATE_ADVERTISEMENT, updateJobPostSaga);\n}\nexport function* watchpopulateVacancyFormSaga() {\n  yield takeEvery(POPULATE_VACANCY_FORM, populateVacancyFormSaga);\n}\n// for ee\nexport function* watcheditVacancyFormSaga() {\n  yield takeEvery(EDIT_VACANCY_FORM, editVacancyFormSaga)\n}\nexport function* watchupdateCampaignSaga() {\n  yield takeEvery(SAVE_NEW_CAMPAIGN, updateCampaignSaga);\n}\nexport function* watchchangeJobPostStatusSaga() {\n  yield takeEvery(CHANGE_ACTIVE_POST_TO_INACTIVE, changeJobPostStatusSaga);\n}\nexport function* watchgetApplicationDetailsByIdSaga() {\n  yield takeEvery(GET_APPLICATION_DETAILS_BY_ID, getApplicationDetailsByIdSaga);\n}\nexport function* watchupdateApplicantStatusSaga() {\n  yield takeEvery(UPDATE_APPLICANT_STATUS, updateApplicantStatusSaga);\n}\nexport function* watchupdateJobApplicationDetailsSaga() {\n  yield takeEvery(UPDATE_JOB_APPLICATION_DETAILS, updateJobApplicationDetailsSaga);\n}\nexport function* watchgetJobPostViewsByDateSaga() {\n  yield takeEvery(GET_JOBPOST_VIEWS_BY_DATE, getJobPostViewsByDateSaga);\n}\nexport function* watchchangePaginationSaga() {\n  yield takeEvery(NAVIGATE_ADS_FROM_MAIN_MENU, changePaginationSaga);\n  yield takeEvery(OPEN_AD_TO_SEE_AD_INFO, changePaginationSaga);\n}\n\nexport function* watchEditInterviewDetailsSaga() {\n  yield takeEvery(EDIT_INTERVIEW_DETAILS, displayInitialDetails);\n}\nexport function* watchSaveMarketingDetailsSaga() {\n  yield takeEvery(SAVE_MARKETING_DETAILS, saveMarketingDetailsSaga);\n}\n\nexport function* watchdeleteApplicationSaga() {\n  yield takeEvery(DELETE_APPLICATION, deleteApplicationSaga);\n}\n\nexport function* watchChangeRouteSaga() {\n  yield takeEvery(CHANGE_ROUTE, changeRouteSaga);\n}\n\nexport function* watchAdminGetUserCompanyProfileSaga() {\n  yield takeEvery(ADMIN_GET_USER_PROFILE, adminGetUserCompanyProfileSaga);\n}\n\nexport function* watchPopulateEmailMessageSaga() {\n  yield takeEvery(POPULATE_EMAIL_MESSAGE, populateEmailMessageSaga);\n  yield takeEvery(AUTO_EMAIL_TO_APPLICANT, populateEmailMessageSaga);\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}