{"ast":null,"code":"import { call, put, takeEvery } from '@redux-saga/core/effects';\nimport { reset } from 'redux-form';\nimport { displayPaymentStatusMessage, hideSpinner } from '../actions';\nimport { API_SERVER, REGISTER_PAYMENT, PROCESS_ONLINE_PAYMENT } from '../constants';\nimport store from '../store';\nimport { apiManualPost } from '../utils/request';\n\nfunction* registerPaymentSaga(_ref) {\n  let {\n    jobpostOrderDetails\n  } = _ref;\n\n  try {\n    const lang = store.getState().language.lang;\n    const customerDetails = {\n      firstname: jobpostOrderDetails.firstname,\n      lastname: jobpostOrderDetails.lastname,\n      email: jobpostOrderDetails.email,\n      address: jobpostOrderDetails.address,\n      city: jobpostOrderDetails.city,\n      zip_code: jobpostOrderDetails.zip_code\n    }; // Add VAT in amount before sending for payment\n\n    const totalAmountWithVat = jobpostOrderDetails.totalSum;\n    const url = `${API_SERVER}/RegisterOnlinePayment?lang=${lang}`;\n    const body = { ...customerDetails,\n      jobPost: [{\n        company_id: jobpostOrderDetails.company_id,\n        post_id: jobpostOrderDetails.post_id,\n        jobPost_order: [{\n          order_id: jobpostOrderDetails.order_id,\n          amount: totalAmountWithVat,\n          redirect_url: `${window.location.origin}/payment`\n        }]\n      }]\n    };\n    const result = yield call(apiManualPost, url, JSON.stringify(body));\n    const parsedResult = JSON.parse(result.data);\n\n    if (parsedResult.successful) {\n      window.open(parsedResult.paymentApi, '_self');\n      yield put(hideSpinner()); // In case users don't proceed with payment, turn off spinner in advertform.\n    } else {\n      console.log('error in getting payment api');\n    }\n  } catch (e) {\n    console.log(e);\n  }\n}\n\nfunction* processOnlinePaymentSaga() {\n  try {\n    const urlParams = new URLSearchParams(window.location.search);\n    const transaction_id = urlParams.get('transactionId');\n    const company_id = parseInt(urlParams.get('paymentId').split('xx')[0]);\n    const post_id = parseInt(urlParams.get('paymentId').split('xx')[1]);\n    const order_id = parseInt(urlParams.get('paymentId').split('xx')[2]);\n    const url = `${API_SERVER}/ProcessOnlinePayment`;\n    const details = {\n      company_id,\n      post_id,\n      jobPost_order: [{\n        order_id,\n        payment_reference: transaction_id\n      }]\n    };\n    const result = yield call(apiManualPost, url, JSON.stringify({ ...details\n    }));\n    const parsedResult = JSON.parse(result.data);\n\n    if (parsedResult) {\n      yield put(displayPaymentStatusMessage(parsedResult.responseText));\n      yield put(hideSpinner());\n      yield put(reset('vacancy'));\n    }\n  } catch (e) {\n    console.log(e);\n  }\n}\n\nexport function* watchRegisterPaymentSaga() {\n  yield takeEvery(REGISTER_PAYMENT, registerPaymentSaga);\n}\nexport function* watchProcessOnlinePaymentSaga() {\n  yield takeEvery(PROCESS_ONLINE_PAYMENT, processOnlinePaymentSaga);\n}","map":{"version":3,"names":["call","put","takeEvery","reset","displayPaymentStatusMessage","hideSpinner","API_SERVER","REGISTER_PAYMENT","PROCESS_ONLINE_PAYMENT","store","apiManualPost","registerPaymentSaga","jobpostOrderDetails","lang","getState","language","customerDetails","firstname","lastname","email","address","city","zip_code","totalAmountWithVat","totalSum","url","body","jobPost","company_id","post_id","jobPost_order","order_id","amount","redirect_url","window","location","origin","result","JSON","stringify","parsedResult","parse","data","successful","open","paymentApi","console","log","e","processOnlinePaymentSaga","urlParams","URLSearchParams","search","transaction_id","get","parseInt","split","details","payment_reference","responseText","watchRegisterPaymentSaga","watchProcessOnlinePaymentSaga"],"sources":["/Users/eduardkazeks/Documents/GitHub/EeJobPortal/src/sagas/onlinePayment.saga.js"],"sourcesContent":["import { call, put, takeEvery } from '@redux-saga/core/effects';\nimport { reset } from 'redux-form';\nimport { displayPaymentStatusMessage, hideSpinner } from '../actions';\nimport { API_SERVER, REGISTER_PAYMENT, PROCESS_ONLINE_PAYMENT } from '../constants';\nimport store from '../store';\nimport { apiManualPost } from '../utils/request';\n\nfunction* registerPaymentSaga({ jobpostOrderDetails }) {\n  try {\n    const lang = store.getState().language.lang;\n    const customerDetails = {\n      firstname: jobpostOrderDetails.firstname,\n      lastname: jobpostOrderDetails.lastname,\n      email: jobpostOrderDetails.email,\n      address: jobpostOrderDetails.address,\n      city: jobpostOrderDetails.city,\n      zip_code: jobpostOrderDetails.zip_code,\n    };\n    // Add VAT in amount before sending for payment\n    const totalAmountWithVat = jobpostOrderDetails.totalSum;\n\n    const url = `${API_SERVER}/RegisterOnlinePayment?lang=${lang}`;\n    const body = {\n      ...customerDetails,\n      jobPost: [\n        {\n          company_id: jobpostOrderDetails.company_id,\n          post_id: jobpostOrderDetails.post_id,\n          jobPost_order: [\n            {\n              order_id: jobpostOrderDetails.order_id,\n              amount: totalAmountWithVat,\n              redirect_url: `${window.location.origin}/payment`,\n            },\n          ],\n        },\n      ],\n    };\n    const result = yield call(apiManualPost, url, JSON.stringify(body));\n    const parsedResult = JSON.parse(result.data);\n\n    if (parsedResult.successful) {\n      window.open(parsedResult.paymentApi, '_self');\n\n      yield put(hideSpinner()); // In case users don't proceed with payment, turn off spinner in advertform.\n    } else {\n      console.log('error in getting payment api');\n    }\n  } catch (e) {\n    console.log(e);\n  }\n}\n\nfunction* processOnlinePaymentSaga() {\n  try {\n    const urlParams = new URLSearchParams(window.location.search);\n    const transaction_id = urlParams.get('transactionId');\n    const company_id = parseInt(urlParams.get('paymentId').split('xx')[0]);\n    const post_id = parseInt(urlParams.get('paymentId').split('xx')[1]);\n    const order_id = parseInt(urlParams.get('paymentId').split('xx')[2]);\n    const url = `${API_SERVER}/ProcessOnlinePayment`;\n\n    const details = {\n      company_id,\n      post_id,\n\n      jobPost_order: [\n        {\n          order_id,\n          payment_reference: transaction_id,\n        },\n      ],\n    };\n\n    const result = yield call(\n      apiManualPost,\n      url,\n      JSON.stringify({\n        ...details,\n      }),\n    );\n    const parsedResult = JSON.parse(result.data);\n    if (parsedResult) {\n      yield put(displayPaymentStatusMessage(parsedResult.responseText));\n      yield put(hideSpinner());\n      yield put(reset('vacancy'));\n    }\n  } catch (e) {\n    console.log(e);\n  }\n}\n\nexport function* watchRegisterPaymentSaga() {\n  yield takeEvery(REGISTER_PAYMENT, registerPaymentSaga);\n}\n\nexport function* watchProcessOnlinePaymentSaga() {\n  yield takeEvery(PROCESS_ONLINE_PAYMENT, processOnlinePaymentSaga);\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}