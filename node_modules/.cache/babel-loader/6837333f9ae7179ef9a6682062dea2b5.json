{"ast":null,"code":"import { useState } from 'react';\nimport { takeEvery, put, call } from 'redux-saga/effects';\nimport { getFormValues, change, formValueSelector, initialize, getFormInitialValues, touch } from 'redux-form';\nimport { SAVE_AND_PUBLISH_ADVERTISEMENT, UPDATE_AND_PUBLISH_ADVERTISEMENT, API_SERVER, API_SERVER_EST, API_SERVER_EST_GET_ID, GET_ALL_CAMPAIGNS, OPEN_AD_TO_SEE_AD_INFO, UPDATE_ADVERTISEMENT, POPULATE_VACANCY_FORM, DELETE_ADVERTISEMENT, GET_ALL_JOB_CATEGORY, GET_ALL_ADS_BY_STATUS, SAVE_ADVERTISEMENT_AS_DRAFT, SAVE_NEW_CAMPAIGN, CHANGE_ACTIVE_POST_TO_INACTIVE, GET_APPLICATION_DETAILS_BY_ID, UPDATE_APPLICANT_STATUS, GET_JOBPOST_VIEWS_BY_DATE, NAVIGATE_ADS_FROM_MAIN_MENU, UPDATE_JOB_APPLICATION_DETAILS, EDIT_INTERVIEW_DETAILS, SAVE_MARKETING_DETAILS, DELETE_APPLICATION, CHANGE_ROUTE, ADMIN_GET_USER_PROFILE, HELP_SERVICE_FEE, SOS_SERVICE_FEE, POPULATE_EMAIL_MESSAGE, AUTO_EMAIL_TO_APPLICANT } from '../constants';\nimport store from '../store';\nimport { apiManualRequest, apiManualPost, apiOpenRequest, apiGetJobsOffers } from '../utils/request';\nimport { filterObj } from '../utils/wrappers';\nimport { getAllCampaignsSuccess, saveAndPublishAdvertisementSuccess, getAllJobCategorySuccess, saveAndPublishAdvertisementFailed, getAllAdsByStatusSuccess, saveAndPublishAdvertisement, showSuccessSnackbar, showFailedSnackbar, openAdToSeeAdInfo, populateVacancyFormSuccess, updateAndPublishAdvertisementSuccess, getApplicationDetailsById, getApplicationDetailsByIdSuccess, getJobPostViewsByDateSuccess, changeAdvertPage, getAllAdsByStatus, filterJobs, hideSpinner, saveMarketingDetailsSuccess, closeDialog, registerPayment, sendInvoiceToTalous, getCompanyProfileSuccess, openAdToSeeAdInfoSuccess, getJobsOffers, getAllJobCategoryFromEstoniaSuccess } from '../actions';\nimport { customTranslateCampaign } from '../utils/customTranslate';\nimport browserHistory from '../history';\nimport { messageTemplate } from '../components/companies/advertisements/automaticMessageToApplicants/messages';\nimport axios from 'axios';\nimport { useSelector } from 'react-redux';\n\nfunction* getAllCampaignsSaga() {\n  try {\n    const url = `${API_SERVER}/GetCampaigns`;\n    const result = yield call(apiManualRequest, url);\n    const resultParsed = JSON.parse(result.data);\n    yield put(getAllCampaignsSuccess(resultParsed));\n  } catch (error) {\n    console.log(error);\n  }\n}\n\nfunction* getAllJobCategorySaga() {\n  try {\n    const url = `${API_SERVER}/GetJobCategories`;\n    const result = yield call(apiOpenRequest, url);\n    const resultParsed = JSON.parse(result.data);\n    yield put(getAllJobCategorySuccess(resultParsed));\n  } catch (error) {\n    console.log(error);\n  }\n} // function saveAndPublishAdvertisementEstonia(){\n//   try{\n//     let url;\n//     let body;\n//     let parsedCompany ={};\n//   }\n// }\n\n\nfunction* saveAndPublishAdvertisementSaga() {\n  try {\n    let url;\n    let body;\n    let parsedCompany = {};\n    const {\n      advertisement,\n      client,\n      companyProfile\n    } = store.getState();\n    const formValues = getFormValues('vacancy')(store.getState());\n    const paymentInfoForm = getFormValues('paymentInfo')(store.getState());\n    const uuid = client.user.data[2];\n    const userRole = client.user.data[6].user_type;\n    const payment_method = paymentInfoForm && paymentInfoForm.payment_method;\n    const companyId = companyProfile.profile.company_id;\n\n    if (!formValues.company_id) {\n      formValues.company_id = companyId; // Also sending company_id to add company specific post.\n    }\n\n    yield put(closeDialog());\n\n    if (userRole === 'admin') {\n      const companyDetails = {\n        company_id: parseInt(formValues.company_id),\n        uuid\n      };\n      const jobPostOwner = yield call(apiManualPost, `${API_SERVER}/GetCompanyProfile`, JSON.stringify({ ...companyDetails\n      }));\n      parsedCompany = JSON.parse(jobPostOwner.data);\n    }\n\n    const {\n      selectedCampaign,\n      isSaveAdvertisementAsDraft,\n      isToEdit,\n      uploadedImage,\n      marketingDetails,\n      extraService\n    } = advertisement;\n    const isDraft = isSaveAdvertisementAsDraft;\n    const refinedUploadedImage = uploadedImage && uploadedImage.name && uploadedImage.name.replace(/\\s+\\(\\d+\\)/g, 'JP'); // If stored filename has (int), dropzone doesn't understand the path..so changing such names before sending to db.\n\n    const refinedFormValues = filterObj('image_document', formValues);\n\n    if (isToEdit) {\n      url = `${API_SERVER_EST}/updateJobOffer`;\n    } else {\n      url = `${API_SERVER_EST}/postJob`;\n    }\n\n    const statusToUpdate = isDraft || extraService.help || extraService.sos ? 0 : selectedCampaign.type === 'free' ? 1 : 4;\n    const selectedService = extraService.help ? 'help' : extraService.sos ? 'sos' : null; // image_document array means, it already exists in db, no need to send while updating\n\n    if (Array.isArray(formValues.image_document) === true) {\n      body = { ...refinedFormValues,\n        uuid,\n        campaign_type: selectedCampaign.type,\n        status: statusToUpdate,\n        extra_service: selectedService\n      };\n    } else if (!uploadedImage.name) {\n      // no uploaded image means, no need to send any base64. Also, if there is an image stored in db..and we want to delete it, I am changing the formvalues of image_document in component\n      body = { ...formValues,\n        uuid,\n        campaignLevel: selectedCampaign.type,\n        status: statusToUpdate,\n        extra_service: selectedService\n      };\n    } else if (uploadedImage.name && !Array.isArray(formValues.image_document)) {\n      const base64 = formValues.image_document;\n      body = { ...formValues,\n        uuid,\n        campaignLevel: selectedCampaign.type,\n        status: statusToUpdate,\n        image_document: {\n          uuid,\n          document_id: uploadedImage.id,\n          path: '',\n          filename: refinedUploadedImage,\n          filetype: uploadedImage.type,\n          data: base64\n        },\n        extra_service: selectedService\n      };\n    }\n\n    if (selectedCampaign.includes_mktbudget) {\n      const {\n        marketing_platform,\n        more_budget,\n        marketing_budget\n      } = marketingDetails;\n      body.marketing_platform = !!marketing_platform ? marketing_platform : null;\n      body.more_budget = !!more_budget ? more_budget : null;\n      body.marketing_budget = !!marketing_budget ? parseInt(marketing_budget) : 0;\n    } // SAVING AND PUBLISHING JOBPOST\n    // const result = yield call(apiManualPost, url, JSON.stringify({ ...body }));\n    // const parsedResult = JSON.parse(result.data);\n\n\n    const result = axios.post(url, body).finally(res => {\n      saveAndPublishAdvertisementSuccess();\n    }); // If publishing post, Generate invoice under the hood via Talousvirta API or online payment via NETS\n    // if (parsedResult) {\n    //   const { company_name, business_id, firstname, lastname, email, address, zip_code, city } =\n    //     userRole === 'admin' ? parsedCompany[0] : companyProfile.profile;\n    //   const jobTitle = formValues.job_title;\n    //   const postId = parsedResult[0].post_id;\n    //   const orderId = parsedResult[0].order_id;\n    //   const publishedPostStatus = parsedResult[0].job_post_status;\n    //   const description = `${jobTitle} | Kampanjapaketti - ${customTranslateCampaign(selectedCampaign.id)}`;\n    //   const mkt_description = `${jobTitle} | Lisätty markkinointiraha`;\n    //   const extra_service_description = `Aktivoitu lisäpalvelu | ${extraService.help ? 'HELP' : 'SOS'}`;\n    //   // If mkt budget is added with campaigns with mkt budget, i.e. 5th campaign for now.\n    //   let marketing_budget = 0;\n    //   if (selectedCampaign.includes_mktbudget && !!parsedResult[0].marketing_budget) {\n    //     marketing_budget = parsedResult[0].marketing_budget;\n    //   }\n    //   const extra_service_fee = extraService.help ? HELP_SERVICE_FEE : extraService.sos ? SOS_SERVICE_FEE : 0;\n    //   if (\n    //     (publishedPostStatus === 0 && extra_service_fee > 0) || // If help and sos are added as extra service\n    //     publishedPostStatus === 4 // If paid campaigns are selected, temporary placeholder status\n    //   ) {\n    //     const isExtraServiceAdded = publishedPostStatus === 0 && extra_service_fee > 0 ? true : false;\n    //     const extra_service_fee_with_vat = extra_service_fee * 1.24; // Total price for the extra service including vat\n    //     const amount = parsedResult[0].job_post_campaign_money;\n    //     const totalSum = (marketing_budget + amount) * 1.24;\n    //     const details = {\n    //       company_id: formValues.company_id,\n    //       company_name,\n    //       business_id,\n    //       firstname,\n    //       lastname,\n    //       email,\n    //       address,\n    //       zip_code,\n    //       city,\n    //       description: isExtraServiceAdded ? extra_service_description : description,\n    //       totalSum: isExtraServiceAdded ? extra_service_fee_with_vat : totalSum,\n    //       amount: isExtraServiceAdded ? extra_service_fee : amount,\n    //       post_id: postId,\n    //       order_id: orderId,\n    //       marketing_budget,\n    //       mkt_description,\n    //       selectedCampaign,\n    //     };\n    //     if (payment_method === 'invoice') {\n    //       yield put(sendInvoiceToTalous(details));\n    //     } else if (payment_method === 'online') {\n    //       \\ put(registerPayment(details));\n    //     }\n    //   }\n    //   // Post saved as a draft or free campaign or help/sos feature\n    //   //if (parsedResult[0].job_post_status !== 4)\n    //   else {\n    //     yield put(saveAndPublishAdvertisementSuccess());\n    //   }\n    // } else {\n    //   yield put(saveAndPublishAdvertisementFailed());\n    // }\n  } catch (error) {\n    console.log(error);\n    yield put(saveAndPublishAdvertisementFailed());\n  }\n}\n\nfunction* getJobPostByPostIdSaga(_ref) {\n  let {\n    id\n  } = _ref;\n\n  try {\n    const url = `${API_SERVER_EST}/${id}`;\n    const companyBusinessId = store.getState().companyProfile.profile.companyBusinessId;\n    const userRole = store.getState().client.user.data[6].user_type;\n    const body = JSON.stringify({\n      jobPostNumber: userRole === 'admin' ? id.split('admin')[0] : id,\n      companyBusinessId: userRole === 'admin' ? id.split('admin')[1] : companyBusinessId\n    });\n    const result = yield call(apiOpenRequest, url, body);\n    const resultParsed = JSON.parse(result.data);\n    yield put(openAdToSeeAdInfoSuccess(resultParsed[0]));\n  } catch (error) {\n    console.log(error);\n    yield put(hideSpinner());\n  }\n} // function* getAllAdsByStatusSaga({ status }) {\n//   try {\n//     const url = `${API_SERVER}/SearchJobPosts`;\n//     const { client, usersCompanyList, companyProfile } = store.getState();\n//     const uuid = client.user.data[2];\n//     const roleId = client.user.data[5];\n//     let selectedCompanyId;\n//     selectedCompanyId = usersCompanyList.selectedCompany.company_id;\n//     const assignedCompanyId = client.user.data[6].company_id;\n//     if (!selectedCompanyId) {\n//       // For first time registered users, client company_id is null since user profile is not updated\n//       selectedCompanyId = companyProfile.profile.company_id;\n//     }\n//     const company_id = roleId === 0 ? selectedCompanyId : assignedCompanyId; //super user with many companies\n//     const body = JSON.stringify({\n//       status,\n//       uuid,\n//       company_id,\n//     });\n//     const result = yield call(apiManualPost, url, body);\n//     const resultParsed = JSON.parse(result.data);\n//     yield put(getAllAdsByStatusSuccess(status, resultParsed));\n//   } catch (error) {\n//     console.log(error);\n//   }\n// }\n// Populating vacancy form when editing or copying\n\n\nfunction* populateVacancyFormSaga(_ref2) {\n  let {\n    id,\n    isToEdit\n  } = _ref2;\n\n  try {\n    const url = `${API_SERVER_EST}/${id}`; //const companyBusinessId = store.getState().jobs.companyBusinessId;\n\n    const campaigns = store.getState().advertisement.campaigns;\n    const userRole = store.getState().client.user.data[6].user_type;\n    const body = JSON.stringify({\n      jobPostNumber: userRole === 'admin' ? id.split('admin')[0] : id //companyBusinessId: userRole === 'admin' ? id.split('admin')[1] : companyBusinessId,\n\n    });\n    const result = yield call(apiManualRequest, url);\n    const resultParsed = JSON.parse(result.data); // console.log('resultParsed', resultParsed);\n    // If we are populating from Draft Component, we are editing--> call UpdateJobPost API, it needs company_id && post_id which is being sent along with the vacancy form!\n\n    const {\n      jobPostNumber,\n      //companyBusinessId,\n      company_image,\n      image_id,\n      job_title,\n      job_type,\n      job_hours,\n      job_category,\n      job_location,\n      job_description,\n      is_agreement,\n      due_date,\n      is_email_notification,\n      email,\n      notice_frequency,\n      campaign_id,\n      marketing_platform,\n      more_budget,\n      marketing_budget,\n      application_link\n    } = resultParsed[0];\n\n    if (isToEdit) {\n      yield put(change('vacancy', 'jobPostNumber', jobPostNumber)); // yield put(change('vacancy', 'company_id', company_id));\n\n      if (company_image) {\n        yield put(change('vacancy', 'image_document', company_image));\n        yield put(change('vacancy', 'image_id', image_id));\n      }\n    }\n\n    yield put(change('vacancy', 'job_title', job_title));\n    yield put(change('vacancy', 'job_type', job_type));\n    yield put(change('vacancy', 'job_hours', job_hours));\n    yield put(change('vacancy', 'job_category', job_category));\n    yield put(change('vacancy', 'job_location', job_location));\n    yield put(change('vacancy', 'job_description', job_description));\n    yield put(change('vacancy', 'is_agreement', is_agreement));\n    yield put(change('vacancy', 'application_link', application_link));\n    yield put(change('vacancy', 'due_date', due_date));\n    yield put(change('vacancy', 'is_email_notification', is_email_notification));\n    yield put(change('vacancy', 'email', email));\n    yield put(change('vacancy', 'notice_frequency', notice_frequency));\n    const postCampaign = campaigns.find(campaign => campaign.id === campaign_id);\n    const campaignDetails = {\n      postCampaign,\n      marketing_platform,\n      more_budget,\n      marketing_budget\n    };\n    yield put(populateVacancyFormSuccess(campaignDetails, isToEdit));\n  } catch (e) {\n    console.log(e);\n  }\n} // Update advertisement - editAdvertForm is open/ Campaigns are not shown here.\n\n\nfunction* updateJobPostSaga() {\n  try {\n    const advertisement = store.getState().advertisement.viewSelectedAd;\n    const keys = Object.keys(advertisement); // console.log('keys', keys);\n\n    const refinedKeys = keys && keys.filter(key => key !== 'company_image' && key !== 'total_applicants' && key !== 'total_likes' && key !== 'total_viewed' && key !== 'value' && key !== 'company_logo' && key !== 'marketing_budget' // Don't update budget when just editing vacancy.\n    ); // Irrelevant keys, not needed here\n\n    for (const key of refinedKeys) {\n      yield put(change('editVacancy', key, advertisement[key]));\n    }\n\n    if (advertisement.company_image) {\n      yield put(change('editVacancy', 'image_document', advertisement.company_image));\n    }\n\n    if (!advertisement.notice_frequency) {\n      yield put(change('editVacancy', 'notice_frequency', 7));\n    }\n\n    yield put(change('editVacancy', 'is_agreement', true));\n  } catch (error) {\n    console.log(error);\n  }\n}\n\nfunction* updateAndPublishAdvertisementSaga() {\n  try {\n    let body;\n    const url = `${API_SERVER_EST}/updateJobOffer`;\n    const formValues = getFormValues('editVacancy')(store.getState());\n    const uuid = store.getState().client.user.data[2];\n    const {\n      uploadedImage\n    } = store.getState().advertisement;\n    const userRole = store.getState().client.user.data[6].user_type;\n    const refinedUploadedImage = uploadedImage && uploadedImage.name && uploadedImage.name.replace(/\\(\\d+\\)/, 'JP'); // If stored filename has (int), dropzone doesn't understand the path..so changing such names before sending to db.\n\n    const refinedFormValues = filterObj('image_document', formValues); // image_document array means, it already exists in db, no need to send while updating\n\n    if (Array.isArray(formValues.image_document) === true) {\n      body = JSON.stringify({ ...refinedFormValues,\n        uuid\n      });\n    } else if (!uploadedImage.name) {\n      // no uploaded image means, no need to send any base64. Also, if there is an image stored in db..and we want to delete it, I am changing the formvalues of image_document in component\n      body = JSON.stringify({ ...formValues,\n        uuid\n      });\n    } else {\n      const base64 = formValues.image_document;\n      body = JSON.stringify({ ...formValues,\n        uuid,\n        image_document: {\n          uuid,\n          document_id: uploadedImage.id,\n          path: '',\n          filename: refinedUploadedImage,\n          filetype: uploadedImage.type,\n          data: base64\n        }\n      });\n    } // const result = yield call(apiManualPost, url, body);\n\n\n    const result = axios.patch(url, body).finally(res => res.data);\n    const parsedResult = JSON.parse(result.data);\n\n    if (parsedResult) {\n      yield put(updateAndPublishAdvertisementSuccess());\n\n      if (userRole === 'admin') {\n        yield put(openAdToSeeAdInfo(`${formValues.post_id}admin${formValues.company_id}`));\n      } else {\n        yield put(openAdToSeeAdInfo(formValues.post_id));\n      }\n    } else {\n      yield put(saveAndPublishAdvertisementFailed());\n    }\n  } catch (e) {\n    console.log(e);\n    yield put(saveAndPublishAdvertisementFailed());\n  }\n} // Update campaign\n\n\nfunction* updateCampaignSaga(_ref3) {\n  let {\n    id\n  } = _ref3;\n\n  try {\n    yield put(closeDialog());\n    const {\n      advertisement,\n      client,\n      companyProfile,\n      jobs\n    } = store.getState();\n    const paymentInfoForm = getFormValues('paymentInfo')(store.getState());\n    const payment_method = paymentInfoForm && paymentInfoForm.payment_method; // Upgrade campaign\n\n    const url = `${API_SERVER_EST}/updateJobOfferCampaignType`;\n    const uuid = store.getState().client.user.data[2];\n    const {\n      type,\n      includes_mktbudget\n    } = advertisement.selectedCampaign;\n    const campaign_id = advertisement.selectedCampaign.id;\n    const userRole = client.user.data[6].user_type;\n    const {\n      id\n    } = jobs;\n    const post_id = userRole === 'admin' ? id.split('admin')[0] : id;\n    const companyId = userRole === 'admin' ? id.split('admin')[1] : companyProfile.profile.company_id;\n    const campaignDate = formValueSelector('campaign')(store.getState(), 'due_date');\n    let parsedCompany = {};\n    const body = {\n      campaignType: type,\n      //uuid,\n      id,\n      //company_id: companyId,\n      campaignDate\n    };\n\n    if (includes_mktbudget) {\n      const {\n        marketing_platform,\n        more_budget,\n        marketing_budget\n      } = advertisement.marketingDetails;\n      body.marketing_platform = !!marketing_platform ? marketing_platform : null;\n      body.more_budget = !!more_budget ? more_budget : null;\n      body.marketing_budget = !!marketing_budget ? parseInt(marketing_budget) : 0;\n    } // const result = yield call(apiManualPost, url, JSON.stringify({ ...body }));\n\n\n    const result = axios.patch(url, body).finally(res => res);\n    const resultParsed = JSON.parse(result.data);\n\n    if (resultParsed) {\n      //If admin is upgrading post or updating jobpost on behalf of companies:\n      if (userRole === 'admin') {\n        const body2 = {\n          company_id: parseInt(companyId),\n          uuid\n        };\n        const jobPostOwner = yield call(apiManualPost, `${API_SERVER}/GetCompanyProfile`, JSON.stringify({ ...body2\n        }));\n        parsedCompany = JSON.parse(jobPostOwner.data);\n      }\n\n      const {\n        company_name,\n        business_id,\n        firstname,\n        lastname,\n        email,\n        address,\n        zip_code,\n        city\n      } = userRole === 'admin' ? parsedCompany[0] : companyProfile.profile;\n      const jobTitle = advertisement.viewSelectedAd.job_title;\n      const description = `${jobTitle} | Kampanjapaketti - ${customTranslateCampaign(campaign_id)}`;\n      const mkt_description = `${jobTitle} | Lisätty markkinointiraha`;\n      const orderId = resultParsed[0].order_id;\n      const previousCampaignPrice = resultParsed[0].prev_campaign_money;\n      const newCampaignPrice = resultParsed[0].new_campaign_money;\n      const amount = newCampaignPrice - previousCampaignPrice; // If mkt budget is added.\n\n      let marketing_budget = 0;\n      const newMarketingBudget = resultParsed[0].marketing_budget;\n\n      if (includes_mktbudget && newMarketingBudget > 0) {\n        marketing_budget = newMarketingBudget;\n      }\n\n      const totalSum = (marketing_budget + amount) * 1.24; // If new and more expensive campaign price OR more marketing budget, generate invoice\n\n      const details = {\n        company_id: companyId,\n        company_name,\n        business_id,\n        firstname,\n        lastname,\n        email,\n        address,\n        zip_code,\n        city,\n        description,\n        totalSum,\n        amount,\n        post_id: parseInt(post_id),\n        order_id: orderId,\n        marketing_budget,\n        mkt_description,\n        isSameCampaign: amount === 0 ? true : false,\n        // Meaning same campaign but new budget\n        selectedCampaign: advertisement.selectedCampaign,\n        postIdToFetch: id\n      };\n\n      if (payment_method === 'invoice') {\n        yield put(sendInvoiceToTalous(details));\n      } else if (payment_method === 'online') {\n        yield put(registerPayment(details));\n      } else {\n        yield put(showSuccessSnackbar());\n      }\n    }\n  } catch (error) {\n    console.log(error);\n    yield put(showFailedSnackbar());\n  }\n}\n\nfunction* changeJobPostStatusSaga(_ref4) {\n  let {\n    id\n  } = _ref4;\n\n  try {\n    const url = `${API_SERVER}/UpdateJobPostStatus`;\n    const {\n      company_id\n    } = store.getState().companyProfile.profile;\n    const post_id = id;\n    const userRole = store.getState().client.user.data[6].user_type;\n    const body = JSON.stringify({\n      post_id: userRole === 'admin' ? id.split('admin')[0] : post_id,\n      // For admins, we need to get company id from post itself\n      company_id: userRole === 'admin' ? id.split('admin')[1] : company_id,\n      status: 2\n    });\n    const result = yield call(apiManualPost, url, body);\n\n    if (result.data === 'Job Post Status updated successfully!') {\n      yield put(showSuccessSnackbar());\n      yield put(openAdToSeeAdInfo(id));\n    } else {\n      yield put(showFailedSnackbar());\n    }\n  } catch (e) {\n    console.log(e);\n  }\n}\n\nfunction* saveMarketingDetailsSaga() {\n  try {\n    const formValues = getFormValues('marketingDetails')(store.getState());\n    const {\n      marketing_platform,\n      more_budget,\n      marketing_budget\n    } = formValues;\n\n    if (!marketing_platform) {\n      yield put(touch('marketingDetails', 'marketing_platform'));\n      return;\n    }\n\n    if (!more_budget) {\n      yield put(touch('marketingDetails', 'more_budget'));\n      return;\n    }\n\n    if (more_budget === 'yes') {\n      if (!marketing_budget) {\n        yield put(touch('marketingDetails', 'marketing_budget'));\n        return;\n      }\n    }\n\n    if (marketing_budget && (parseInt(marketing_budget) < 1 || !/^[0-9]+$/.test(marketing_budget))) {\n      return;\n    }\n\n    yield put(saveMarketingDetailsSuccess(formValues));\n    yield put(closeDialog());\n  } catch (e) {\n    console.log(e);\n  }\n}\n\nfunction* displayInitialDetails(_ref5) {\n  let {\n    isToEdit\n  } = _ref5;\n\n  try {\n    if (!isToEdit) yield put(initialize('applicantDetails', getFormInitialValues('applicantDetails')(store.getState())));\n  } catch (e) {\n    console.log(e);\n  }\n}\n\nfunction* deleteJobPostSaga(_ref6) {\n  let {\n    id\n  } = _ref6;\n\n  try {\n    const url = `${API_SERVER_EST}/${id}`;\n    const companyId = store.getState().companyProfile.profile.company_id;\n    const userRole = store.getState().client.user.data[6].user_type;\n    const body = JSON.stringify({\n      post_id: userRole === 'admin' ? id.split('admin')[0] : id,\n      company_id: userRole === 'admin' ? id.split('admin')[1] : companyId\n    });\n    yield call(apiOpenRequest, url);\n\n    if (userRole === 'admin') {\n      yield put(filterJobs(true));\n    } else {\n      yield put(getAllAdsByStatus(0));\n      yield put(getAllAdsByStatus(1));\n      yield put(getAllAdsByStatus(2));\n    }\n  } catch (error) {\n    console.log(error);\n  }\n}\n\nfunction* saveAdvertisementAsDraft() {\n  yield put(saveAndPublishAdvertisement());\n}\n\nfunction* getApplicationDetailsByIdSaga(_ref7) {\n  let {\n    application_id,\n    company_id,\n    post_id,\n    email\n  } = _ref7;\n\n  try {\n    const url = `${API_SERVER}/GetApplicationById`;\n    const body = JSON.stringify({\n      application_id,\n      company_id,\n      post_id,\n      email\n    });\n    const result = yield call(apiManualPost, url, body);\n    const resultParsed = JSON.parse(result.data);\n\n    if (resultParsed) {\n      yield put(getApplicationDetailsByIdSuccess(resultParsed[0]));\n      yield put(openAdToSeeAdInfo(post_id));\n    }\n    /* if (!resultParsed[0].interview_title) {\r\n      const form = getFormValues('applicantDetails')(store.getState());\r\n      form.interview_title = 'Haastattelu';\r\n    } */\n\n  } catch (e) {\n    console.log(e);\n  }\n}\n\nfunction* updateApplicantStatusSaga(_ref8) {\n  let {\n    application_id,\n    company_id,\n    post_id,\n    email,\n    status\n  } = _ref8;\n\n  try {\n    const url = `${API_SERVER}/UpdateJobApplicationStatus`;\n    const body = JSON.stringify({\n      application_id,\n      company_id,\n      post_id,\n      email,\n      status\n    });\n    const result = yield call(apiManualPost, url, body);\n\n    if (result.data === \"Job Application's status updated successfully!\") {\n      //yield put(showSuccessSnackbar());\n      yield put(getApplicationDetailsById(application_id, company_id, post_id, email));\n      yield put(openAdToSeeAdInfo(post_id));\n    } else {\n      yield put(showFailedSnackbar());\n    }\n  } catch (e) {\n    console.log(e);\n  }\n}\n\nfunction* updateJobApplicationDetailsSaga(_ref9) {\n  let {\n    application_id,\n    company_id,\n    post_id,\n    email,\n    update\n  } = _ref9;\n\n  try {\n    let body;\n    const url = `${API_SERVER}/UpdateJobApplicationDetails`;\n    const formValues = getFormValues('applicantDetails')(store.getState());\n    const loggedInUser = store.getState().client.user.data[1];\n    const {\n      application_notes,\n      interview_title,\n      interview_msg,\n      interview_date,\n      interview_time,\n      interview_place\n    } = formValues;\n\n    if (update === 'note') {\n      body = JSON.stringify({\n        application_id,\n        company_id,\n        post_id,\n        email,\n        update,\n        application_notes\n      });\n    } else {\n      body = JSON.stringify({\n        application_id,\n        company_id,\n        post_id,\n        email,\n        update,\n        interview_title,\n        interview_msg,\n        interview_date,\n        interview_time,\n        interview_place,\n        loggedInUser\n      });\n    }\n\n    const result = yield call(apiManualPost, url, body);\n\n    if (result.data === \"Job Application's details updated successfully!\" || result.data === 'Interview reminder emails sent successfully!') {\n      yield put(showSuccessSnackbar());\n      yield put(getApplicationDetailsById(application_id, company_id, post_id, email));\n      yield put(openAdToSeeAdInfo(post_id));\n    } else {\n      yield put(showFailedSnackbar());\n    } // console.log('result', result);\n\n  } catch (e) {\n    console.log(e);\n  }\n} // Dashboard chart\n\n\nfunction* getJobPostViewsByDateSaga() {\n  try {\n    const url = `${API_SERVER}/GetJobPostViewsByDate`;\n    const {\n      company_id\n    } = store.getState().advertisement.viewSelectedAd;\n    const {\n      post_id\n    } = store.getState().advertisement.viewSelectedAd;\n    const body = JSON.stringify({\n      company_id,\n      post_id\n    });\n    const result = yield call(apiManualPost, url, body);\n    const resultParsed = JSON.parse(result.data);\n\n    if (resultParsed) {\n      yield put(getJobPostViewsByDateSuccess(resultParsed));\n    }\n  } catch (e) {\n    console.log(e);\n  }\n} //DELETE APPLICATION SAGA\n\n\nfunction* deleteApplicationSaga() {\n  try {\n    const url = `${API_SERVER}/DeleteApplicationById`;\n    const {\n      applicationDetailsToDelete\n    } = store.getState().advertisement;\n    const {\n      selectedAd\n    } = store.getState().advertisement;\n    const body = JSON.stringify({ ...applicationDetailsToDelete\n    });\n    const result = yield call(apiManualPost, url, body);\n\n    if (result.data === 'Job application successfully deleted') {\n      yield put(openAdToSeeAdInfo(selectedAd));\n    }\n  } catch (error) {\n    console.log(error);\n  }\n}\n\nfunction* changeRouteSaga() {\n  try {\n    const userRole = store.getState().client.user.data[6].user_type;\n\n    if (userRole === 'company') {\n      browserHistory.push('/omat-ilmoitukseni');\n    }\n\n    if (userRole === 'admin') {\n      browserHistory.push('/lisapalvelu');\n    }\n\n    yield put(null); //Yield statement for generator function\n  } catch (error) {\n    console.log(error);\n  }\n} // When navigateAdsFromMainMenu is dispatched, we want to ensure the page lands to 0 index.\n\n\nfunction* changePaginationSaga() {\n  yield put(changeAdvertPage({\n    selected: 0\n  }));\n}\n\nfunction* adminGetUserCompanyProfileSaga(_ref10) {\n  let {\n    id\n  } = _ref10;\n  const url = `${API_SERVER}/GetCompanyProfile`;\n\n  try {\n    const uuid = store.getState().client.user.data[2];\n    const body = JSON.stringify({\n      company_id: id,\n      uuid\n    });\n    const result = yield call(apiManualPost, url, body);\n    const resultParsed = JSON.parse(result.data)[0];\n    yield put(getCompanyProfileSuccess(resultParsed));\n  } catch (e) {\n    console.log(e);\n  }\n} // Automatic answers with email messages saga\n\n\nfunction* populateEmailMessageSaga(_ref11) {\n  var _store$getState$users;\n\n  let {\n    languages\n  } = _ref11;\n  const companyName = (_store$getState$users = store.getState().usersCompanyList.selectedCompany) === null || _store$getState$users === void 0 ? void 0 : _store$getState$users.company_name;\n  const storedLanguages = formValueSelector('vacancy')(store.getState(), 'email_language');\n  const isToSendAutoEmail = store.getState().advertisement.automaticEmailToggleBtn;\n\n  try {\n    if (isToSendAutoEmail) {\n      const messages = messageTemplate(companyName, languages ? languages : storedLanguages);\n      yield put(change('vacancy', 'email_message', messages));\n    }\n  } catch (e) {\n    console.log(e);\n  }\n}\n\nexport function* watchsaveAndPublishAdvertisementSaga() {\n  yield takeEvery(SAVE_AND_PUBLISH_ADVERTISEMENT, saveAndPublishAdvertisementSaga);\n}\nexport function* watchupdateAndPublishAdvertisementSaga() {\n  yield takeEvery(UPDATE_AND_PUBLISH_ADVERTISEMENT, updateAndPublishAdvertisementSaga);\n}\nexport function* watchSaveAdvertisementAsDraft() {\n  yield takeEvery(SAVE_ADVERTISEMENT_AS_DRAFT, saveAdvertisementAsDraft);\n}\nexport function* watchgetAllCampaignsSaga() {\n  yield takeEvery(GET_ALL_CAMPAIGNS, getAllCampaignsSaga);\n}\nexport function* watchgetAllJobCategorysSaga() {\n  yield takeEvery(GET_ALL_JOB_CATEGORY, getAllJobCategorySaga);\n} // export function* watchgetAllAdsByStatusSaga() {\n//   yield takeEvery(GET_ALL_ADS_BY_STATUS, getAllAdsByStatusSaga);\n// }\n\nexport function* watchgetJobPostByPostIdSaga() {\n  yield takeEvery(OPEN_AD_TO_SEE_AD_INFO, getJobPostByPostIdSaga);\n}\nexport function* watchdeleteJobPostSaga() {\n  yield takeEvery(DELETE_ADVERTISEMENT, deleteJobPostSaga);\n}\nexport function* watchupdateJobPostSaga() {\n  yield takeEvery(UPDATE_ADVERTISEMENT, updateJobPostSaga);\n}\nexport function* watchpopulateVacancyFormSaga() {\n  yield takeEvery(POPULATE_VACANCY_FORM, populateVacancyFormSaga);\n}\nexport function* watchupdateCampaignSaga() {\n  yield takeEvery(SAVE_NEW_CAMPAIGN, updateCampaignSaga);\n}\nexport function* watchchangeJobPostStatusSaga() {\n  yield takeEvery(CHANGE_ACTIVE_POST_TO_INACTIVE, changeJobPostStatusSaga);\n}\nexport function* watchgetApplicationDetailsByIdSaga() {\n  yield takeEvery(GET_APPLICATION_DETAILS_BY_ID, getApplicationDetailsByIdSaga);\n}\nexport function* watchupdateApplicantStatusSaga() {\n  yield takeEvery(UPDATE_APPLICANT_STATUS, updateApplicantStatusSaga);\n}\nexport function* watchupdateJobApplicationDetailsSaga() {\n  yield takeEvery(UPDATE_JOB_APPLICATION_DETAILS, updateJobApplicationDetailsSaga);\n}\nexport function* watchgetJobPostViewsByDateSaga() {\n  yield takeEvery(GET_JOBPOST_VIEWS_BY_DATE, getJobPostViewsByDateSaga);\n}\nexport function* watchchangePaginationSaga() {\n  yield takeEvery(NAVIGATE_ADS_FROM_MAIN_MENU, changePaginationSaga);\n  yield takeEvery(OPEN_AD_TO_SEE_AD_INFO, changePaginationSaga);\n}\nexport function* watchEditInterviewDetailsSaga() {\n  yield takeEvery(EDIT_INTERVIEW_DETAILS, displayInitialDetails);\n}\nexport function* watchSaveMarketingDetailsSaga() {\n  yield takeEvery(SAVE_MARKETING_DETAILS, saveMarketingDetailsSaga);\n}\nexport function* watchdeleteApplicationSaga() {\n  yield takeEvery(DELETE_APPLICATION, deleteApplicationSaga);\n}\nexport function* watchChangeRouteSaga() {\n  yield takeEvery(CHANGE_ROUTE, changeRouteSaga);\n}\nexport function* watchAdminGetUserCompanyProfileSaga() {\n  yield takeEvery(ADMIN_GET_USER_PROFILE, adminGetUserCompanyProfileSaga);\n}\nexport function* watchPopulateEmailMessageSaga() {\n  yield takeEvery(POPULATE_EMAIL_MESSAGE, populateEmailMessageSaga);\n  yield takeEvery(AUTO_EMAIL_TO_APPLICANT, populateEmailMessageSaga);\n}","map":{"version":3,"names":["useState","takeEvery","put","call","getFormValues","change","formValueSelector","initialize","getFormInitialValues","touch","SAVE_AND_PUBLISH_ADVERTISEMENT","UPDATE_AND_PUBLISH_ADVERTISEMENT","API_SERVER","API_SERVER_EST","API_SERVER_EST_GET_ID","GET_ALL_CAMPAIGNS","OPEN_AD_TO_SEE_AD_INFO","UPDATE_ADVERTISEMENT","POPULATE_VACANCY_FORM","DELETE_ADVERTISEMENT","GET_ALL_JOB_CATEGORY","GET_ALL_ADS_BY_STATUS","SAVE_ADVERTISEMENT_AS_DRAFT","SAVE_NEW_CAMPAIGN","CHANGE_ACTIVE_POST_TO_INACTIVE","GET_APPLICATION_DETAILS_BY_ID","UPDATE_APPLICANT_STATUS","GET_JOBPOST_VIEWS_BY_DATE","NAVIGATE_ADS_FROM_MAIN_MENU","UPDATE_JOB_APPLICATION_DETAILS","EDIT_INTERVIEW_DETAILS","SAVE_MARKETING_DETAILS","DELETE_APPLICATION","CHANGE_ROUTE","ADMIN_GET_USER_PROFILE","HELP_SERVICE_FEE","SOS_SERVICE_FEE","POPULATE_EMAIL_MESSAGE","AUTO_EMAIL_TO_APPLICANT","store","apiManualRequest","apiManualPost","apiOpenRequest","apiGetJobsOffers","filterObj","getAllCampaignsSuccess","saveAndPublishAdvertisementSuccess","getAllJobCategorySuccess","saveAndPublishAdvertisementFailed","getAllAdsByStatusSuccess","saveAndPublishAdvertisement","showSuccessSnackbar","showFailedSnackbar","openAdToSeeAdInfo","populateVacancyFormSuccess","updateAndPublishAdvertisementSuccess","getApplicationDetailsById","getApplicationDetailsByIdSuccess","getJobPostViewsByDateSuccess","changeAdvertPage","getAllAdsByStatus","filterJobs","hideSpinner","saveMarketingDetailsSuccess","closeDialog","registerPayment","sendInvoiceToTalous","getCompanyProfileSuccess","openAdToSeeAdInfoSuccess","getJobsOffers","getAllJobCategoryFromEstoniaSuccess","customTranslateCampaign","browserHistory","messageTemplate","axios","useSelector","getAllCampaignsSaga","url","result","resultParsed","JSON","parse","data","error","console","log","getAllJobCategorySaga","saveAndPublishAdvertisementSaga","body","parsedCompany","advertisement","client","companyProfile","getState","formValues","paymentInfoForm","uuid","user","userRole","user_type","payment_method","companyId","profile","company_id","companyDetails","parseInt","jobPostOwner","stringify","selectedCampaign","isSaveAdvertisementAsDraft","isToEdit","uploadedImage","marketingDetails","extraService","isDraft","refinedUploadedImage","name","replace","refinedFormValues","statusToUpdate","help","sos","type","selectedService","Array","isArray","image_document","campaign_type","status","extra_service","campaignLevel","base64","document_id","id","path","filename","filetype","includes_mktbudget","marketing_platform","more_budget","marketing_budget","post","finally","res","getJobPostByPostIdSaga","companyBusinessId","jobPostNumber","split","populateVacancyFormSaga","campaigns","company_image","image_id","job_title","job_type","job_hours","job_category","job_location","job_description","is_agreement","due_date","is_email_notification","email","notice_frequency","campaign_id","application_link","postCampaign","find","campaign","campaignDetails","e","updateJobPostSaga","viewSelectedAd","keys","Object","refinedKeys","filter","key","updateAndPublishAdvertisementSaga","patch","parsedResult","post_id","updateCampaignSaga","jobs","campaignDate","campaignType","body2","company_name","business_id","firstname","lastname","address","zip_code","city","jobTitle","description","mkt_description","orderId","order_id","previousCampaignPrice","prev_campaign_money","newCampaignPrice","new_campaign_money","amount","newMarketingBudget","totalSum","details","isSameCampaign","postIdToFetch","changeJobPostStatusSaga","saveMarketingDetailsSaga","test","displayInitialDetails","deleteJobPostSaga","saveAdvertisementAsDraft","getApplicationDetailsByIdSaga","application_id","updateApplicantStatusSaga","updateJobApplicationDetailsSaga","update","loggedInUser","application_notes","interview_title","interview_msg","interview_date","interview_time","interview_place","getJobPostViewsByDateSaga","deleteApplicationSaga","applicationDetailsToDelete","selectedAd","changeRouteSaga","push","changePaginationSaga","selected","adminGetUserCompanyProfileSaga","populateEmailMessageSaga","languages","companyName","usersCompanyList","selectedCompany","storedLanguages","isToSendAutoEmail","automaticEmailToggleBtn","messages","watchsaveAndPublishAdvertisementSaga","watchupdateAndPublishAdvertisementSaga","watchSaveAdvertisementAsDraft","watchgetAllCampaignsSaga","watchgetAllJobCategorysSaga","watchgetJobPostByPostIdSaga","watchdeleteJobPostSaga","watchupdateJobPostSaga","watchpopulateVacancyFormSaga","watchupdateCampaignSaga","watchchangeJobPostStatusSaga","watchgetApplicationDetailsByIdSaga","watchupdateApplicantStatusSaga","watchupdateJobApplicationDetailsSaga","watchgetJobPostViewsByDateSaga","watchchangePaginationSaga","watchEditInterviewDetailsSaga","watchSaveMarketingDetailsSaga","watchdeleteApplicationSaga","watchChangeRouteSaga","watchAdminGetUserCompanyProfileSaga","watchPopulateEmailMessageSaga"],"sources":["C:/Users/shuli/OneDrive/Desktop/Work/JobportalN/JobPortalEE/src/sagas/advertisements.saga.js"],"sourcesContent":["import {useState} from 'react'\r\nimport { takeEvery, put, call } from 'redux-saga/effects';\r\nimport { getFormValues, change, formValueSelector, initialize, getFormInitialValues, touch } from 'redux-form';\r\nimport {\r\n  SAVE_AND_PUBLISH_ADVERTISEMENT,\r\n  UPDATE_AND_PUBLISH_ADVERTISEMENT,\r\n  API_SERVER,\r\n  API_SERVER_EST,\r\n  API_SERVER_EST_GET_ID,\r\n  GET_ALL_CAMPAIGNS,\r\n  OPEN_AD_TO_SEE_AD_INFO,\r\n  UPDATE_ADVERTISEMENT,\r\n  POPULATE_VACANCY_FORM,\r\n  DELETE_ADVERTISEMENT,\r\n  GET_ALL_JOB_CATEGORY,\r\n  GET_ALL_ADS_BY_STATUS,\r\n  SAVE_ADVERTISEMENT_AS_DRAFT,\r\n  SAVE_NEW_CAMPAIGN,\r\n  CHANGE_ACTIVE_POST_TO_INACTIVE,\r\n  GET_APPLICATION_DETAILS_BY_ID,\r\n  UPDATE_APPLICANT_STATUS,\r\n  GET_JOBPOST_VIEWS_BY_DATE,\r\n  NAVIGATE_ADS_FROM_MAIN_MENU,\r\n  UPDATE_JOB_APPLICATION_DETAILS,\r\n  EDIT_INTERVIEW_DETAILS,\r\n  SAVE_MARKETING_DETAILS,\r\n  DELETE_APPLICATION,\r\n  CHANGE_ROUTE,\r\n  ADMIN_GET_USER_PROFILE,\r\n  HELP_SERVICE_FEE,\r\n  SOS_SERVICE_FEE,\r\n  POPULATE_EMAIL_MESSAGE,\r\n  AUTO_EMAIL_TO_APPLICANT,\r\n} from '../constants';\r\nimport store from '../store';\r\nimport { apiManualRequest, apiManualPost, apiOpenRequest, apiGetJobsOffers } from '../utils/request';\r\nimport { filterObj } from '../utils/wrappers';\r\nimport {\r\n  getAllCampaignsSuccess,\r\n  saveAndPublishAdvertisementSuccess,\r\n  getAllJobCategorySuccess,\r\n  saveAndPublishAdvertisementFailed,\r\n  getAllAdsByStatusSuccess,\r\n  saveAndPublishAdvertisement,\r\n  showSuccessSnackbar,\r\n  showFailedSnackbar,\r\n  openAdToSeeAdInfo,\r\n  populateVacancyFormSuccess,\r\n  updateAndPublishAdvertisementSuccess,\r\n  getApplicationDetailsById,\r\n  getApplicationDetailsByIdSuccess,\r\n  getJobPostViewsByDateSuccess,\r\n  changeAdvertPage,\r\n  getAllAdsByStatus,\r\n  filterJobs,\r\n  hideSpinner,\r\n  saveMarketingDetailsSuccess,\r\n  closeDialog,\r\n  registerPayment,\r\n  sendInvoiceToTalous,\r\n  getCompanyProfileSuccess,\r\n  openAdToSeeAdInfoSuccess,\r\n  getJobsOffers,\r\n  getAllJobCategoryFromEstoniaSuccess,\r\n} from '../actions';\r\nimport { customTranslateCampaign } from '../utils/customTranslate';\r\nimport browserHistory from '../history';\r\nimport { messageTemplate } from '../components/companies/advertisements/automaticMessageToApplicants/messages';\r\nimport axios from 'axios';\r\nimport { useSelector } from 'react-redux';\r\n\r\nfunction* getAllCampaignsSaga() {\r\n  try {\r\n    const url = `${API_SERVER}/GetCampaigns`;\r\n    const result = yield call(apiManualRequest, url);\r\n    const resultParsed = JSON.parse(result.data);\r\n    yield put(getAllCampaignsSuccess(resultParsed));\r\n  } catch (error) {\r\n    console.log(error);\r\n  }\r\n}\r\nfunction* getAllJobCategorySaga() {\r\n  try {\r\n    const url = `${API_SERVER}/GetJobCategories`;\r\n    const result = yield call(apiOpenRequest, url);\r\n    const resultParsed = JSON.parse(result.data);\r\n    yield put(getAllJobCategorySuccess(resultParsed));\r\n  } catch (error) {\r\n    console.log(error);\r\n  }\r\n}\r\n\r\n// function saveAndPublishAdvertisementEstonia(){\r\n//   try{\r\n//     let url;\r\n//     let body;\r\n//     let parsedCompany ={};\r\n\r\n//   }\r\n// }\r\n\r\nfunction* saveAndPublishAdvertisementSaga() {\r\n  try {\r\n    let url;\r\n    let body;\r\n    let parsedCompany = {};\r\n\r\n    const { advertisement, client, companyProfile } = store.getState();\r\n    const formValues = getFormValues('vacancy')(store.getState());\r\n    const paymentInfoForm = getFormValues('paymentInfo')(store.getState());\r\n    const uuid = client.user.data[2];\r\n    const userRole = client.user.data[6].user_type;\r\n    const payment_method = paymentInfoForm && paymentInfoForm.payment_method;\r\n    const companyId = companyProfile.profile.company_id;\r\n\r\n    if (!formValues.company_id) {\r\n      formValues.company_id = companyId; // Also sending company_id to add company specific post.\r\n    }\r\n\r\n    yield put(closeDialog());\r\n\r\n    if (userRole === 'admin') {\r\n      const companyDetails = {\r\n        company_id: parseInt(formValues.company_id),\r\n        uuid,\r\n      };\r\n      const jobPostOwner = yield call(apiManualPost, `${API_SERVER}/GetCompanyProfile`, JSON.stringify({ ...companyDetails }));\r\n      parsedCompany = JSON.parse(jobPostOwner.data);\r\n    }\r\n\r\n    const { selectedCampaign, isSaveAdvertisementAsDraft, isToEdit, uploadedImage, marketingDetails, extraService } = advertisement;\r\n    const isDraft = isSaveAdvertisementAsDraft;\r\n    const refinedUploadedImage = uploadedImage && uploadedImage.name && uploadedImage.name.replace(/\\s+\\(\\d+\\)/g, 'JP'); // If stored filename has (int), dropzone doesn't understand the path..so changing such names before sending to db.\r\n    const refinedFormValues = filterObj('image_document', formValues);\r\n\r\n    if (isToEdit) {\r\n      url = `${API_SERVER_EST}/updateJobOffer`;\r\n    } else {\r\n      url = `${API_SERVER_EST}/postJob`;\r\n    }\r\n\r\n    const statusToUpdate = isDraft || extraService.help || extraService.sos ? 0 : selectedCampaign.type === 'free' ? 1 : 4;\r\n\r\n    const selectedService = extraService.help ? 'help' : extraService.sos ? 'sos' : null;\r\n\r\n    // image_document array means, it already exists in db, no need to send while updating\r\n    if (Array.isArray(formValues.image_document) === true) {\r\n      body = {\r\n        ...refinedFormValues,\r\n        uuid,\r\n        campaign_type: selectedCampaign.type,\r\n        status: statusToUpdate,\r\n        extra_service: selectedService,\r\n      };\r\n    } else if (!uploadedImage.name) {\r\n      // no uploaded image means, no need to send any base64. Also, if there is an image stored in db..and we want to delete it, I am changing the formvalues of image_document in component\r\n      body = {\r\n        ...formValues,\r\n        uuid,\r\n        campaignLevel: selectedCampaign.type,\r\n        status: statusToUpdate,\r\n        extra_service: selectedService,\r\n      };\r\n    } else if (uploadedImage.name && !Array.isArray(formValues.image_document)) {\r\n      const base64 = formValues.image_document;\r\n      body = {\r\n        ...formValues,\r\n        uuid,\r\n        campaignLevel: selectedCampaign.type,\r\n        status: statusToUpdate,\r\n        image_document: {\r\n          uuid,\r\n          document_id: uploadedImage.id,\r\n          path: '',\r\n          filename: refinedUploadedImage,\r\n          filetype: uploadedImage.type,\r\n          data: base64,\r\n        },\r\n        extra_service: selectedService,\r\n      };\r\n    }\r\n    if (selectedCampaign.includes_mktbudget) {\r\n      const { marketing_platform, more_budget, marketing_budget } = marketingDetails;\r\n      body.marketing_platform = !!marketing_platform ? marketing_platform : null;\r\n      body.more_budget = !!more_budget ? more_budget : null;\r\n      body.marketing_budget = !!marketing_budget ? parseInt(marketing_budget) : 0;\r\n    }\r\n    // SAVING AND PUBLISHING JOBPOST\r\n    // const result = yield call(apiManualPost, url, JSON.stringify({ ...body }));\r\n    // const parsedResult = JSON.parse(result.data);\r\n    const result = axios.post(url,body).finally((res)=> {\r\n       saveAndPublishAdvertisementSuccess();\r\n       \r\n    })\r\n    // If publishing post, Generate invoice under the hood via Talousvirta API or online payment via NETS\r\n\r\n    // if (parsedResult) {\r\n    //   const { company_name, business_id, firstname, lastname, email, address, zip_code, city } =\r\n    //     userRole === 'admin' ? parsedCompany[0] : companyProfile.profile;\r\n    //   const jobTitle = formValues.job_title;\r\n    //   const postId = parsedResult[0].post_id;\r\n    //   const orderId = parsedResult[0].order_id;\r\n    //   const publishedPostStatus = parsedResult[0].job_post_status;\r\n    //   const description = `${jobTitle} | Kampanjapaketti - ${customTranslateCampaign(selectedCampaign.id)}`;\r\n    //   const mkt_description = `${jobTitle} | Lisätty markkinointiraha`;\r\n\r\n    //   const extra_service_description = `Aktivoitu lisäpalvelu | ${extraService.help ? 'HELP' : 'SOS'}`;\r\n\r\n    //   // If mkt budget is added with campaigns with mkt budget, i.e. 5th campaign for now.\r\n    //   let marketing_budget = 0;\r\n    //   if (selectedCampaign.includes_mktbudget && !!parsedResult[0].marketing_budget) {\r\n    //     marketing_budget = parsedResult[0].marketing_budget;\r\n    //   }\r\n\r\n    //   const extra_service_fee = extraService.help ? HELP_SERVICE_FEE : extraService.sos ? SOS_SERVICE_FEE : 0;\r\n\r\n    //   if (\r\n    //     (publishedPostStatus === 0 && extra_service_fee > 0) || // If help and sos are added as extra service\r\n    //     publishedPostStatus === 4 // If paid campaigns are selected, temporary placeholder status\r\n    //   ) {\r\n    //     const isExtraServiceAdded = publishedPostStatus === 0 && extra_service_fee > 0 ? true : false;\r\n    //     const extra_service_fee_with_vat = extra_service_fee * 1.24; // Total price for the extra service including vat\r\n\r\n    //     const amount = parsedResult[0].job_post_campaign_money;\r\n    //     const totalSum = (marketing_budget + amount) * 1.24;\r\n\r\n    //     const details = {\r\n    //       company_id: formValues.company_id,\r\n    //       company_name,\r\n    //       business_id,\r\n    //       firstname,\r\n    //       lastname,\r\n    //       email,\r\n    //       address,\r\n    //       zip_code,\r\n    //       city,\r\n    //       description: isExtraServiceAdded ? extra_service_description : description,\r\n    //       totalSum: isExtraServiceAdded ? extra_service_fee_with_vat : totalSum,\r\n    //       amount: isExtraServiceAdded ? extra_service_fee : amount,\r\n    //       post_id: postId,\r\n    //       order_id: orderId,\r\n    //       marketing_budget,\r\n    //       mkt_description,\r\n    //       selectedCampaign,\r\n    //     };\r\n\r\n    //     if (payment_method === 'invoice') {\r\n    //       yield put(sendInvoiceToTalous(details));\r\n    //     } else if (payment_method === 'online') {\r\n    //       \\ put(registerPayment(details));\r\n    //     }\r\n    //   }\r\n    //   // Post saved as a draft or free campaign or help/sos feature\r\n    //   //if (parsedResult[0].job_post_status !== 4)\r\n    //   else {\r\n    //     yield put(saveAndPublishAdvertisementSuccess());\r\n    //   }\r\n    // } else {\r\n    //   yield put(saveAndPublishAdvertisementFailed());\r\n    // }\r\n  } catch (error) {\r\n    console.log(error);\r\n    yield put(saveAndPublishAdvertisementFailed());\r\n  }\r\n}\r\n\r\nfunction* getJobPostByPostIdSaga({ id }) {\r\n  try {\r\n    const url = `${API_SERVER_EST}/${id}`;\r\n    const companyBusinessId = store.getState().companyProfile.profile.companyBusinessId;\r\n    const userRole = store.getState().client.user.data[6].user_type;\r\n\r\n    const body = JSON.stringify({\r\n      jobPostNumber: userRole === 'admin' ? id.split('admin')[0] : id,\r\n      companyBusinessId: userRole === 'admin' ? id.split('admin')[1] : companyBusinessId,\r\n    });\r\n    const result = yield call(apiOpenRequest, url, body);\r\n    const resultParsed = JSON.parse(result.data);\r\n    yield put(openAdToSeeAdInfoSuccess(resultParsed[0]));\r\n  } catch (error) {\r\n    console.log(error);\r\n    yield put(hideSpinner());\r\n  }\r\n}\r\n\r\n// function* getAllAdsByStatusSaga({ status }) {\r\n//   try {\r\n//     const url = `${API_SERVER}/SearchJobPosts`;\r\n//     const { client, usersCompanyList, companyProfile } = store.getState();\r\n//     const uuid = client.user.data[2];\r\n//     const roleId = client.user.data[5];\r\n//     let selectedCompanyId;\r\n//     selectedCompanyId = usersCompanyList.selectedCompany.company_id;\r\n//     const assignedCompanyId = client.user.data[6].company_id;\r\n\r\n//     if (!selectedCompanyId) {\r\n//       // For first time registered users, client company_id is null since user profile is not updated\r\n//       selectedCompanyId = companyProfile.profile.company_id;\r\n//     }\r\n\r\n//     const company_id = roleId === 0 ? selectedCompanyId : assignedCompanyId; //super user with many companies\r\n//     const body = JSON.stringify({\r\n//       status,\r\n//       uuid,\r\n//       company_id,\r\n//     });\r\n\r\n//     const result = yield call(apiManualPost, url, body);\r\n//     const resultParsed = JSON.parse(result.data);\r\n//     yield put(getAllAdsByStatusSuccess(status, resultParsed));\r\n//   } catch (error) {\r\n//     console.log(error);\r\n//   }\r\n// }\r\n// Populating vacancy form when editing or copying\r\nfunction* populateVacancyFormSaga({ id, isToEdit }) {\r\n  try {\r\n    const url = `${API_SERVER_EST}/${id}`;\r\n    //const companyBusinessId = store.getState().jobs.companyBusinessId;\r\n    const campaigns = store.getState().advertisement.campaigns;\r\n    const userRole = store.getState().client.user.data[6].user_type;\r\n\r\n    const body = JSON.stringify({\r\n      jobPostNumber: userRole === 'admin' ? id.split('admin')[0] : id,\r\n      //companyBusinessId: userRole === 'admin' ? id.split('admin')[1] : companyBusinessId,\r\n    });\r\n    const result = yield call(apiManualRequest, url);\r\n    const resultParsed = JSON.parse(result.data);\r\n    // console.log('resultParsed', resultParsed);\r\n    // If we are populating from Draft Component, we are editing--> call UpdateJobPost API, it needs company_id && post_id which is being sent along with the vacancy form!\r\n\r\n    const {\r\n      jobPostNumber,\r\n      //companyBusinessId,\r\n      company_image,\r\n      image_id,\r\n      job_title,\r\n      job_type,\r\n      job_hours,\r\n      job_category,\r\n      job_location,\r\n      job_description,\r\n      is_agreement,\r\n      due_date,\r\n      is_email_notification,\r\n      email,\r\n      notice_frequency,\r\n      campaign_id,\r\n      marketing_platform,\r\n      more_budget,\r\n      marketing_budget,\r\n      application_link,\r\n    } = resultParsed[0];\r\n\r\n    if (isToEdit) {\r\n      yield put(change('vacancy', 'jobPostNumber', jobPostNumber));\r\n     // yield put(change('vacancy', 'company_id', company_id));\r\n      if (company_image) {\r\n        yield put(change('vacancy', 'image_document', company_image));\r\n        yield put(change('vacancy', 'image_id', image_id));\r\n      }\r\n    }\r\n    yield put(change('vacancy', 'job_title', job_title));\r\n    yield put(change('vacancy', 'job_type', job_type));\r\n    yield put(change('vacancy', 'job_hours', job_hours));\r\n    yield put(change('vacancy', 'job_category', job_category));\r\n    yield put(change('vacancy', 'job_location', job_location));\r\n    yield put(change('vacancy', 'job_description', job_description));\r\n    yield put(change('vacancy', 'is_agreement', is_agreement));\r\n    yield put(change('vacancy', 'application_link', application_link));\r\n\r\n    yield put(change('vacancy', 'due_date', due_date));\r\n    yield put(change('vacancy', 'is_email_notification', is_email_notification));\r\n    yield put(change('vacancy', 'email', email));\r\n    yield put(change('vacancy', 'notice_frequency', notice_frequency));\r\n\r\n    const postCampaign = campaigns.find(campaign => campaign.id === campaign_id);\r\n\r\n    const campaignDetails = {\r\n      postCampaign,\r\n      marketing_platform,\r\n      more_budget,\r\n      marketing_budget,\r\n    };\r\n\r\n    yield put(populateVacancyFormSuccess(campaignDetails, isToEdit));\r\n  } catch (e) {\r\n    console.log(e);\r\n  }\r\n}\r\n\r\n// Update advertisement - editAdvertForm is open/ Campaigns are not shown here.\r\n\r\nfunction* updateJobPostSaga() {\r\n  try {\r\n    const advertisement = store.getState().advertisement.viewSelectedAd;\r\n    const keys = Object.keys(advertisement);\r\n    // console.log('keys', keys);\r\n    const refinedKeys =\r\n      keys &&\r\n      keys.filter(\r\n        key =>\r\n          key !== 'company_image' &&\r\n          key !== 'total_applicants' &&\r\n          key !== 'total_likes' &&\r\n          key !== 'total_viewed' &&\r\n          key !== 'value' &&\r\n          key !== 'company_logo' &&\r\n          key !== 'marketing_budget', // Don't update budget when just editing vacancy.\r\n      ); // Irrelevant keys, not needed here\r\n\r\n    for (const key of refinedKeys) {\r\n      yield put(change('editVacancy', key, advertisement[key]));\r\n    }\r\n    if (advertisement.company_image) {\r\n      yield put(change('editVacancy', 'image_document', advertisement.company_image));\r\n    }\r\n    if (!advertisement.notice_frequency) {\r\n      yield put(change('editVacancy', 'notice_frequency', 7));\r\n    }\r\n    yield put(change('editVacancy', 'is_agreement', true));\r\n  } catch (error) {\r\n    console.log(error);\r\n  }\r\n}\r\n\r\nfunction* updateAndPublishAdvertisementSaga() {\r\n  try {\r\n    let body;\r\n    const url = `${API_SERVER_EST}/updateJobOffer`;\r\n    const formValues = getFormValues('editVacancy')(store.getState());\r\n    const uuid = store.getState().client.user.data[2];\r\n    const { uploadedImage } = store.getState().advertisement;\r\n    const userRole = store.getState().client.user.data[6].user_type;\r\n\r\n    const refinedUploadedImage = uploadedImage && uploadedImage.name && uploadedImage.name.replace(/\\(\\d+\\)/, 'JP'); // If stored filename has (int), dropzone doesn't understand the path..so changing such names before sending to db.\r\n    const refinedFormValues = filterObj('image_document', formValues);\r\n\r\n    // image_document array means, it already exists in db, no need to send while updating\r\n    if (Array.isArray(formValues.image_document) === true) {\r\n      body = JSON.stringify({\r\n        ...refinedFormValues,\r\n        uuid,\r\n      });\r\n    } else if (!uploadedImage.name) {\r\n      // no uploaded image means, no need to send any base64. Also, if there is an image stored in db..and we want to delete it, I am changing the formvalues of image_document in component\r\n      body = JSON.stringify({\r\n        ...formValues,\r\n        uuid,\r\n      });\r\n    } else {\r\n      const base64 = formValues.image_document;\r\n      body = JSON.stringify({\r\n        ...formValues,\r\n        uuid,\r\n        image_document: {\r\n          uuid,\r\n          document_id: uploadedImage.id,\r\n          path: '',\r\n          filename: refinedUploadedImage,\r\n          filetype: uploadedImage.type,\r\n          data: base64,\r\n        },\r\n      });\r\n    }\r\n\r\n    // const result = yield call(apiManualPost, url, body);\r\n    const result = axios.patch(url,body).finally(res=> \r\n    res.data\r\n   )\r\n    const parsedResult = JSON.parse(result.data);\r\n    if (parsedResult) {\r\n      yield put(updateAndPublishAdvertisementSuccess());\r\n      if (userRole === 'admin') {\r\n        yield put(openAdToSeeAdInfo(`${formValues.post_id}admin${formValues.company_id}`));\r\n      } else {\r\n        yield put(openAdToSeeAdInfo(formValues.post_id));\r\n      }\r\n    } else {\r\n      yield put(saveAndPublishAdvertisementFailed());\r\n    }\r\n  } catch (e) {\r\n    console.log(e);\r\n    yield put(saveAndPublishAdvertisementFailed());\r\n  }\r\n}\r\n\r\n// Update campaign\r\nfunction* updateCampaignSaga({ id }) {\r\n  try {\r\n    yield put(closeDialog());\r\n\r\n    const { advertisement, client, companyProfile,jobs } = store.getState();\r\n    const paymentInfoForm = getFormValues('paymentInfo')(store.getState());\r\n    const payment_method = paymentInfoForm && paymentInfoForm.payment_method;\r\n\r\n    // Upgrade campaign\r\n    const url = `${API_SERVER_EST}/updateJobOfferCampaignType`;\r\n    const uuid = store.getState().client.user.data[2];\r\n    const { type, includes_mktbudget } = advertisement.selectedCampaign;\r\n    const campaign_id = advertisement.selectedCampaign.id;\r\n    const userRole = client.user.data[6].user_type;\r\n    const {id} = jobs\r\n    const post_id = userRole === 'admin' ? id.split('admin')[0] : id;\r\n    const companyId = userRole === 'admin' ? id.split('admin')[1] : companyProfile.profile.company_id;\r\n    const campaignDate = formValueSelector('campaign')(store.getState(), 'due_date');\r\n    let parsedCompany = {};\r\n\r\n    const body = {\r\n      campaignType: type,\r\n      //uuid,\r\n      id,\r\n      //company_id: companyId,\r\n      campaignDate,\r\n    };\r\n\r\n    if (includes_mktbudget) {\r\n      const { marketing_platform, more_budget, marketing_budget } = advertisement.marketingDetails;\r\n\r\n      body.marketing_platform = !!marketing_platform ? marketing_platform : null;\r\n      body.more_budget = !!more_budget ? more_budget : null;\r\n      body.marketing_budget = !!marketing_budget ? parseInt(marketing_budget) : 0;\r\n    }\r\n\r\n    // const result = yield call(apiManualPost, url, JSON.stringify({ ...body }));\r\n      const result = axios.patch(url,body).finally((res) =>\r\n        res\r\n     )\r\n    const resultParsed = JSON.parse(result.data);\r\n\r\n    if (resultParsed) {\r\n      //If admin is upgrading post or updating jobpost on behalf of companies:\r\n      if (userRole === 'admin') {\r\n        const body2 = {\r\n          company_id: parseInt(companyId),\r\n          uuid,\r\n        };\r\n        const jobPostOwner = yield call(apiManualPost, `${API_SERVER}/GetCompanyProfile`, JSON.stringify({ ...body2 }));\r\n        parsedCompany = JSON.parse(jobPostOwner.data);\r\n      }\r\n\r\n      const { company_name, business_id, firstname, lastname, email, address, zip_code, city } =\r\n        userRole === 'admin' ? parsedCompany[0] : companyProfile.profile;\r\n      const jobTitle = advertisement.viewSelectedAd.job_title;\r\n      const description = `${jobTitle} | Kampanjapaketti - ${customTranslateCampaign(campaign_id)}`;\r\n      const mkt_description = `${jobTitle} | Lisätty markkinointiraha`;\r\n\r\n      const orderId = resultParsed[0].order_id;\r\n      const previousCampaignPrice = resultParsed[0].prev_campaign_money;\r\n      const newCampaignPrice = resultParsed[0].new_campaign_money;\r\n      const amount = newCampaignPrice - previousCampaignPrice;\r\n\r\n      // If mkt budget is added.\r\n      let marketing_budget = 0;\r\n      const newMarketingBudget = resultParsed[0].marketing_budget;\r\n      if (includes_mktbudget && newMarketingBudget > 0) {\r\n        marketing_budget = newMarketingBudget;\r\n      }\r\n      const totalSum = (marketing_budget + amount) * 1.24;\r\n\r\n      // If new and more expensive campaign price OR more marketing budget, generate invoice\r\n\r\n      const details = {\r\n        company_id: companyId,\r\n        company_name,\r\n        business_id,\r\n        firstname,\r\n        lastname,\r\n        email,\r\n        address,\r\n        zip_code,\r\n        city,\r\n        description,\r\n        totalSum,\r\n        amount,\r\n        post_id: parseInt(post_id),\r\n        order_id: orderId,\r\n        marketing_budget,\r\n        mkt_description,\r\n        isSameCampaign: amount === 0 ? true : false, // Meaning same campaign but new budget\r\n        selectedCampaign: advertisement.selectedCampaign,\r\n        postIdToFetch: id,\r\n      };\r\n      if (payment_method === 'invoice') {\r\n        yield put(sendInvoiceToTalous(details));\r\n      } else if (payment_method === 'online') {\r\n        yield put(registerPayment(details));\r\n      } else {\r\n        yield put(showSuccessSnackbar());\r\n      }\r\n    }\r\n  } catch (error) {\r\n    console.log(error);\r\n    yield put(showFailedSnackbar());\r\n  }\r\n}\r\n\r\nfunction* changeJobPostStatusSaga({ id }) {\r\n  try {\r\n    const url = `${API_SERVER}/UpdateJobPostStatus`;\r\n    const { company_id } = store.getState().companyProfile.profile;\r\n    const post_id = id;\r\n    const userRole = store.getState().client.user.data[6].user_type;\r\n\r\n    const body = JSON.stringify({\r\n      post_id: userRole === 'admin' ? id.split('admin')[0] : post_id, // For admins, we need to get company id from post itself\r\n      company_id: userRole === 'admin' ? id.split('admin')[1] : company_id,\r\n      status: 2,\r\n    });\r\n    const result = yield call(apiManualPost, url, body);\r\n    if (result.data === 'Job Post Status updated successfully!') {\r\n      yield put(showSuccessSnackbar());\r\n      yield put(openAdToSeeAdInfo(id));\r\n    } else {\r\n      yield put(showFailedSnackbar());\r\n    }\r\n  } catch (e) {\r\n    console.log(e);\r\n  }\r\n}\r\nfunction* saveMarketingDetailsSaga() {\r\n  try {\r\n    const formValues = getFormValues('marketingDetails')(store.getState());\r\n    const { marketing_platform, more_budget, marketing_budget } = formValues;\r\n    if (!marketing_platform) {\r\n      yield put(touch('marketingDetails', 'marketing_platform'));\r\n      return;\r\n    }\r\n    if (!more_budget) {\r\n      yield put(touch('marketingDetails', 'more_budget'));\r\n      return;\r\n    }\r\n    if (more_budget === 'yes') {\r\n      if (!marketing_budget) {\r\n        yield put(touch('marketingDetails', 'marketing_budget'));\r\n        return;\r\n      }\r\n    }\r\n    if (marketing_budget && (parseInt(marketing_budget) < 1 || !/^[0-9]+$/.test(marketing_budget))) {\r\n      return;\r\n    }\r\n    yield put(saveMarketingDetailsSuccess(formValues));\r\n    yield put(closeDialog());\r\n  } catch (e) {\r\n    console.log(e);\r\n  }\r\n}\r\n\r\nfunction* displayInitialDetails({ isToEdit }) {\r\n  try {\r\n    if (!isToEdit) yield put(initialize('applicantDetails', getFormInitialValues('applicantDetails')(store.getState())));\r\n  } catch (e) {\r\n    console.log(e);\r\n  }\r\n}\r\nfunction* deleteJobPostSaga({ id }) {\r\n  try {\r\n    const url = `${API_SERVER_EST}/${id}`;\r\n    const companyId = store.getState().companyProfile.profile.company_id;\r\n    const userRole = store.getState().client.user.data[6].user_type;\r\n\r\n    const body = JSON.stringify({\r\n      post_id: userRole === 'admin' ? id.split('admin')[0] : id,\r\n      company_id: userRole === 'admin' ? id.split('admin')[1] : companyId,\r\n    });\r\n    yield call( apiOpenRequest, url);\r\n\r\n    if (userRole === 'admin') {\r\n      yield put(filterJobs(true));\r\n    } else {\r\n      yield put(getAllAdsByStatus(0));\r\n      yield put(getAllAdsByStatus(1));\r\n      yield put(getAllAdsByStatus(2));\r\n    }\r\n  } catch (error) {\r\n    console.log(error);\r\n  }\r\n}\r\nfunction* saveAdvertisementAsDraft() {\r\n  yield put(saveAndPublishAdvertisement());\r\n}\r\n\r\nfunction* getApplicationDetailsByIdSaga({ application_id, company_id, post_id, email }) {\r\n  try {\r\n    const url = `${API_SERVER}/GetApplicationById`;\r\n\r\n    const body = JSON.stringify({\r\n      application_id,\r\n      company_id,\r\n      post_id,\r\n      email,\r\n    });\r\n\r\n    const result = yield call(apiManualPost, url, body);\r\n    const resultParsed = JSON.parse(result.data);\r\n    if (resultParsed) {\r\n      yield put(getApplicationDetailsByIdSuccess(resultParsed[0]));\r\n      yield put(openAdToSeeAdInfo(post_id));\r\n    }\r\n\r\n    /* if (!resultParsed[0].interview_title) {\r\n      const form = getFormValues('applicantDetails')(store.getState());\r\n      form.interview_title = 'Haastattelu';\r\n    } */\r\n  } catch (e) {\r\n    console.log(e);\r\n  }\r\n}\r\n\r\nfunction* updateApplicantStatusSaga({ application_id, company_id, post_id, email, status }) {\r\n  try {\r\n    const url = `${API_SERVER}/UpdateJobApplicationStatus`;\r\n    const body = JSON.stringify({\r\n      application_id,\r\n      company_id,\r\n      post_id,\r\n      email,\r\n      status,\r\n    });\r\n    const result = yield call(apiManualPost, url, body);\r\n    if (result.data === \"Job Application's status updated successfully!\") {\r\n      //yield put(showSuccessSnackbar());\r\n      yield put(getApplicationDetailsById(application_id, company_id, post_id, email));\r\n      yield put(openAdToSeeAdInfo(post_id));\r\n    } else {\r\n      yield put(showFailedSnackbar());\r\n    }\r\n  } catch (e) {\r\n    console.log(e);\r\n  }\r\n}\r\nfunction* updateJobApplicationDetailsSaga({ application_id, company_id, post_id, email, update }) {\r\n  try {\r\n    let body;\r\n    const url = `${API_SERVER}/UpdateJobApplicationDetails`;\r\n    const formValues = getFormValues('applicantDetails')(store.getState());\r\n    const loggedInUser = store.getState().client.user.data[1];\r\n    const { application_notes, interview_title, interview_msg, interview_date, interview_time, interview_place } = formValues;\r\n\r\n    if (update === 'note') {\r\n      body = JSON.stringify({\r\n        application_id,\r\n        company_id,\r\n        post_id,\r\n        email,\r\n        update,\r\n        application_notes,\r\n      });\r\n    } else {\r\n      body = JSON.stringify({\r\n        application_id,\r\n        company_id,\r\n        post_id,\r\n        email,\r\n        update,\r\n        interview_title,\r\n        interview_msg,\r\n        interview_date,\r\n        interview_time,\r\n        interview_place,\r\n        loggedInUser,\r\n      });\r\n    }\r\n    const result = yield call(apiManualPost, url, body);\r\n    if (result.data === \"Job Application's details updated successfully!\" || result.data === 'Interview reminder emails sent successfully!') {\r\n      yield put(showSuccessSnackbar());\r\n      yield put(getApplicationDetailsById(application_id, company_id, post_id, email));\r\n      yield put(openAdToSeeAdInfo(post_id));\r\n    } else {\r\n      yield put(showFailedSnackbar());\r\n    }\r\n    // console.log('result', result);\r\n  } catch (e) {\r\n    console.log(e);\r\n  }\r\n}\r\n\r\n// Dashboard chart\r\nfunction* getJobPostViewsByDateSaga() {\r\n  try {\r\n    const url = `${API_SERVER}/GetJobPostViewsByDate`;\r\n    const { company_id } = store.getState().advertisement.viewSelectedAd;\r\n    const { post_id } = store.getState().advertisement.viewSelectedAd;\r\n    const body = JSON.stringify({\r\n      company_id,\r\n      post_id,\r\n    });\r\n    const result = yield call(apiManualPost, url, body);\r\n    const resultParsed = JSON.parse(result.data);\r\n    if (resultParsed) {\r\n      yield put(getJobPostViewsByDateSuccess(resultParsed));\r\n    }\r\n  } catch (e) {\r\n    console.log(e);\r\n  }\r\n}\r\n\r\n//DELETE APPLICATION SAGA\r\nfunction* deleteApplicationSaga() {\r\n  try {\r\n    const url = `${API_SERVER}/DeleteApplicationById`;\r\n    const { applicationDetailsToDelete } = store.getState().advertisement;\r\n    const { selectedAd } = store.getState().advertisement;\r\n\r\n    const body = JSON.stringify({\r\n      ...applicationDetailsToDelete,\r\n    });\r\n\r\n    const result = yield call(apiManualPost, url, body);\r\n\r\n    if (result.data === 'Job application successfully deleted') {\r\n      yield put(openAdToSeeAdInfo(selectedAd));\r\n    }\r\n  } catch (error) {\r\n    console.log(error);\r\n  }\r\n}\r\n\r\nfunction* changeRouteSaga() {\r\n  try {\r\n    const userRole = store.getState().client.user.data[6].user_type;\r\n\r\n    if (userRole === 'company') {\r\n      browserHistory.push('/omat-ilmoitukseni');\r\n    }\r\n    if (userRole === 'admin') {\r\n      browserHistory.push('/lisapalvelu');\r\n    }\r\n    yield put(null); //Yield statement for generator function\r\n  } catch (error) {\r\n    console.log(error);\r\n  }\r\n}\r\n\r\n// When navigateAdsFromMainMenu is dispatched, we want to ensure the page lands to 0 index.\r\nfunction* changePaginationSaga() {\r\n  yield put(changeAdvertPage({ selected: 0 }));\r\n}\r\n\r\nfunction* adminGetUserCompanyProfileSaga({ id }) {\r\n  const url = `${API_SERVER}/GetCompanyProfile`;\r\n\r\n  try {\r\n    const uuid = store.getState().client.user.data[2];\r\n    const body = JSON.stringify({ company_id: id, uuid });\r\n    const result = yield call(apiManualPost, url, body);\r\n    const resultParsed = JSON.parse(result.data)[0];\r\n    yield put(getCompanyProfileSuccess(resultParsed));\r\n  } catch (e) {\r\n    console.log(e);\r\n  }\r\n}\r\n\r\n// Automatic answers with email messages saga\r\nfunction* populateEmailMessageSaga({ languages }) {\r\n  const companyName = store.getState().usersCompanyList.selectedCompany?.company_name;\r\n  const storedLanguages = formValueSelector('vacancy')(store.getState(), 'email_language');\r\n\r\n  const isToSendAutoEmail = store.getState().advertisement.automaticEmailToggleBtn;\r\n\r\n  try {\r\n    if (isToSendAutoEmail) {\r\n      const messages = messageTemplate(companyName, languages ? languages : storedLanguages);\r\n      yield put(change('vacancy', 'email_message', messages));\r\n    }\r\n  } catch (e) {\r\n    console.log(e);\r\n  }\r\n}\r\n\r\nexport function* watchsaveAndPublishAdvertisementSaga() {\r\n  yield takeEvery(SAVE_AND_PUBLISH_ADVERTISEMENT, saveAndPublishAdvertisementSaga);\r\n}\r\nexport function* watchupdateAndPublishAdvertisementSaga() {\r\n  yield takeEvery(UPDATE_AND_PUBLISH_ADVERTISEMENT, updateAndPublishAdvertisementSaga);\r\n}\r\nexport function* watchSaveAdvertisementAsDraft() {\r\n  yield takeEvery(SAVE_ADVERTISEMENT_AS_DRAFT, saveAdvertisementAsDraft);\r\n}\r\n\r\nexport function* watchgetAllCampaignsSaga() {\r\n  yield takeEvery(GET_ALL_CAMPAIGNS, getAllCampaignsSaga);\r\n}\r\n\r\nexport function* watchgetAllJobCategorysSaga() {\r\n  yield takeEvery(GET_ALL_JOB_CATEGORY, getAllJobCategorySaga);\r\n}\r\n\r\n// export function* watchgetAllAdsByStatusSaga() {\r\n//   yield takeEvery(GET_ALL_ADS_BY_STATUS, getAllAdsByStatusSaga);\r\n// }\r\nexport function* watchgetJobPostByPostIdSaga() {\r\n  yield takeEvery(OPEN_AD_TO_SEE_AD_INFO, getJobPostByPostIdSaga);\r\n}\r\nexport function* watchdeleteJobPostSaga() {\r\n  yield takeEvery(DELETE_ADVERTISEMENT, deleteJobPostSaga);\r\n}\r\nexport function* watchupdateJobPostSaga() {\r\n  yield takeEvery(UPDATE_ADVERTISEMENT, updateJobPostSaga);\r\n}\r\nexport function* watchpopulateVacancyFormSaga() {\r\n  yield takeEvery(POPULATE_VACANCY_FORM, populateVacancyFormSaga);\r\n}\r\nexport function* watchupdateCampaignSaga() {\r\n  yield takeEvery(SAVE_NEW_CAMPAIGN, updateCampaignSaga);\r\n}\r\nexport function* watchchangeJobPostStatusSaga() {\r\n  yield takeEvery(CHANGE_ACTIVE_POST_TO_INACTIVE, changeJobPostStatusSaga);\r\n}\r\nexport function* watchgetApplicationDetailsByIdSaga() {\r\n  yield takeEvery(GET_APPLICATION_DETAILS_BY_ID, getApplicationDetailsByIdSaga);\r\n}\r\nexport function* watchupdateApplicantStatusSaga() {\r\n  yield takeEvery(UPDATE_APPLICANT_STATUS, updateApplicantStatusSaga);\r\n}\r\nexport function* watchupdateJobApplicationDetailsSaga() {\r\n  yield takeEvery(UPDATE_JOB_APPLICATION_DETAILS, updateJobApplicationDetailsSaga);\r\n}\r\nexport function* watchgetJobPostViewsByDateSaga() {\r\n  yield takeEvery(GET_JOBPOST_VIEWS_BY_DATE, getJobPostViewsByDateSaga);\r\n}\r\nexport function* watchchangePaginationSaga() {\r\n  yield takeEvery(NAVIGATE_ADS_FROM_MAIN_MENU, changePaginationSaga);\r\n  yield takeEvery(OPEN_AD_TO_SEE_AD_INFO, changePaginationSaga);\r\n}\r\n\r\nexport function* watchEditInterviewDetailsSaga() {\r\n  yield takeEvery(EDIT_INTERVIEW_DETAILS, displayInitialDetails);\r\n}\r\nexport function* watchSaveMarketingDetailsSaga() {\r\n  yield takeEvery(SAVE_MARKETING_DETAILS, saveMarketingDetailsSaga);\r\n}\r\n\r\nexport function* watchdeleteApplicationSaga() {\r\n  yield takeEvery(DELETE_APPLICATION, deleteApplicationSaga);\r\n}\r\n\r\nexport function* watchChangeRouteSaga() {\r\n  yield takeEvery(CHANGE_ROUTE, changeRouteSaga);\r\n}\r\n\r\nexport function* watchAdminGetUserCompanyProfileSaga() {\r\n  yield takeEvery(ADMIN_GET_USER_PROFILE, adminGetUserCompanyProfileSaga);\r\n}\r\n\r\nexport function* watchPopulateEmailMessageSaga() {\r\n  yield takeEvery(POPULATE_EMAIL_MESSAGE, populateEmailMessageSaga);\r\n  yield takeEvery(AUTO_EMAIL_TO_APPLICANT, populateEmailMessageSaga);\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}