{"ast":null,"code":"import i18n from 'i18next';\nimport { initReactI18next } from 'react-i18next';\nimport en from '../locales/en.json';\nimport ee from '../locales/ee.json';\nimport ru from '../locales/ru.json';\nconst availLang = ['en', 'ee', 'ru'];\nlet lang;\nconst urlParams = new URLSearchParams(window.location.search);\nconst getWordpressLang = urlParams.get('trp-form-language') || urlParams.get('lang'); // Default translatepress param for form and custom param added for links\n\nconst persistedLang = sessionStorage.getItem('persist:root') && JSON.parse(sessionStorage.getItem('persist:root')).language;\n\nif (!!getWordpressLang) {\n  if (availLang.includes(getWordpressLang)) {\n    lang = getWordpressLang;\n  } else {\n    lang = 'ee';\n  }\n} else if (persistedLang) {\n  lang = JSON.parse(persistedLang).lang;\n} else {\n  lang = 'ee';\n}\n\ni18n.use(initReactI18next) // passes i18n down to react-i18next\n.init({\n  resources: {\n    ee,\n    en,\n    ru\n  },\n  lng: 'en',\n  //debug: true,\n  ns: ['common'],\n  // defaultNS: 'modal',\n  fallbackLng: lang,\n  // use fi if detected lng is not available\n  react: {\n    wait: false\n  },\n  interpolation: {\n    escapeValue: false // react already safes from xss\n\n  }\n});\nexport default i18n;","map":{"version":3,"names":["i18n","initReactI18next","en","ee","ru","availLang","lang","urlParams","URLSearchParams","window","location","search","getWordpressLang","get","persistedLang","sessionStorage","getItem","JSON","parse","language","includes","use","init","resources","lng","ns","fallbackLng","react","wait","interpolation","escapeValue"],"sources":["/Users/eduardkazeks/Documents/GitHub/JobPortalEE/src/utils/i18n.js"],"sourcesContent":["import i18n from 'i18next';\nimport { initReactI18next } from 'react-i18next';\nimport en from '../locales/en.json';\nimport ee from '../locales/ee.json';\nimport ru from '../locales/ru.json';\n\nconst availLang = ['en', 'ee', 'ru'];\nlet lang;\n\nconst urlParams = new URLSearchParams(window.location.search);\nconst getWordpressLang = urlParams.get('trp-form-language') || urlParams.get('lang'); // Default translatepress param for form and custom param added for links\n\nconst persistedLang = sessionStorage.getItem('persist:root') && JSON.parse(sessionStorage.getItem('persist:root')).language;\n\nif (!!getWordpressLang) {\n  if (availLang.includes(getWordpressLang)) {\n    lang = getWordpressLang;\n  } else {\n    lang = 'ee';\n  }\n} else if (persistedLang) {\n  lang = JSON.parse(persistedLang).lang;\n} else {\n  lang = 'ee';\n}\n\ni18n\n  .use(initReactI18next) // passes i18n down to react-i18next\n  .init({\n    resources: {\n      ee,\n      en,\n      ru,\n    },\n    lng: 'en',\n    //debug: true,\n    ns: ['common'],\n    // defaultNS: 'modal',\n    fallbackLng: lang, // use fi if detected lng is not available\n    react: {\n      wait: false\n    },\n    interpolation: {\n      escapeValue: false, // react already safes from xss\n    },\n  });\n\nexport default i18n;\n"],"mappings":"AAAA,OAAOA,IAAP,MAAiB,SAAjB;AACA,SAASC,gBAAT,QAAiC,eAAjC;AACA,OAAOC,EAAP,MAAe,oBAAf;AACA,OAAOC,EAAP,MAAe,oBAAf;AACA,OAAOC,EAAP,MAAe,oBAAf;AAEA,MAAMC,SAAS,GAAG,CAAC,IAAD,EAAO,IAAP,EAAa,IAAb,CAAlB;AACA,IAAIC,IAAJ;AAEA,MAAMC,SAAS,GAAG,IAAIC,eAAJ,CAAoBC,MAAM,CAACC,QAAP,CAAgBC,MAApC,CAAlB;AACA,MAAMC,gBAAgB,GAAGL,SAAS,CAACM,GAAV,CAAc,mBAAd,KAAsCN,SAAS,CAACM,GAAV,CAAc,MAAd,CAA/D,C,CAAsF;;AAEtF,MAAMC,aAAa,GAAGC,cAAc,CAACC,OAAf,CAAuB,cAAvB,KAA0CC,IAAI,CAACC,KAAL,CAAWH,cAAc,CAACC,OAAf,CAAuB,cAAvB,CAAX,EAAmDG,QAAnH;;AAEA,IAAI,CAAC,CAACP,gBAAN,EAAwB;EACtB,IAAIP,SAAS,CAACe,QAAV,CAAmBR,gBAAnB,CAAJ,EAA0C;IACxCN,IAAI,GAAGM,gBAAP;EACD,CAFD,MAEO;IACLN,IAAI,GAAG,IAAP;EACD;AACF,CAND,MAMO,IAAIQ,aAAJ,EAAmB;EACxBR,IAAI,GAAGW,IAAI,CAACC,KAAL,CAAWJ,aAAX,EAA0BR,IAAjC;AACD,CAFM,MAEA;EACLA,IAAI,GAAG,IAAP;AACD;;AAEDN,IAAI,CACDqB,GADH,CACOpB,gBADP,EACyB;AADzB,CAEGqB,IAFH,CAEQ;EACJC,SAAS,EAAE;IACTpB,EADS;IAETD,EAFS;IAGTE;EAHS,CADP;EAMJoB,GAAG,EAAE,IAND;EAOJ;EACAC,EAAE,EAAE,CAAC,QAAD,CARA;EASJ;EACAC,WAAW,EAAEpB,IAVT;EAUe;EACnBqB,KAAK,EAAE;IACLC,IAAI,EAAE;EADD,CAXH;EAcJC,aAAa,EAAE;IACbC,WAAW,EAAE,KADA,CACO;;EADP;AAdX,CAFR;AAqBA,eAAe9B,IAAf"},"metadata":{},"sourceType":"module"}