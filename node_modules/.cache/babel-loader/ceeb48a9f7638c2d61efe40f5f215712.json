{"ast":null,"code":"var _jsxFileName = \"/Users/eduardkazeks/Documents/GitHub/JobPortalEE/src/components/companies/ads/activeAds.component.js\";\nimport React, { useEffect, useState } from \"react\";\nimport { Grid, Paper, Button } from \"@material-ui/core\";\nimport { Link } from \"react-router-dom\";\nimport ReactPaginate from \"react-paginate\";\nimport NavigateNextIcon from \"@material-ui/icons/NavigateNext\";\nimport NavigateBeforeIcon from \"@material-ui/icons/NavigateBefore\";\nimport { useTranslation } from \"react-i18next\";\nimport { customURL } from \"../../../utils/helperFunctions\";\nimport CustomizedDialogs from \"../../../utils/customizedDialog\";\nimport i18n from \"../../../utils/i18n\";\nimport axios from \"axios\";\n\nconst ActiveAdsComponent = _ref => {\n  let {\n    warnToDelete,\n    populateVacancyForm,\n    deleteAdvertisement,\n    changeAdvertPage,\n    selectedPage,\n    advertPages,\n    openAdToSeeJobPost,\n    postAdvertisement,\n    showDialog,\n    isToDeleteAdvertisementId,\n    fetchJobById\n  } = _ref;\n  const {\n    t\n  } = useTranslation(\"jobs\");\n  const [isDesktop, setIsDesktop] = useState(window.innerWidth);\n  const [jobsToRender, setJobsToRender] = useState([]);\n  useEffect(() => {\n    axios.get(`https://localhost:7262/jobsEn`).then(res => {\n      setJobsToRender(res.data);\n    });\n  }, []);\n\n  const updateSize = () => {\n    setIsDesktop(window.innerWidth >= 1440);\n  };\n\n  useEffect(() => {\n    window.addEventListener(\"resize\", updateSize);\n    return () => window.removeEventListener(\"resize\", updateSize);\n  });\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 5\n    }\n  }, jobsToRender.slice(selectedPage * 30, selectedPage * 30 + 30).map(job => {\n    //const categorys = []\n    //categorys.push(job.jobCode)\n    const categorys = job.jobCode;\n    let unique = [...new Set(categorys)];\n    return /*#__PURE__*/React.createElement(\"div\", {\n      key: job.jobPostNumber,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(Grid, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"h1\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 15\n      }\n    }, console.log(unique)))));\n  })) // <div className=\"container\">\n  //   <Grid container style={{ margin: \"30px 0px\" }}>\n  //     <Grid item sm={10}>\n  //       <h3>\n  //         {t(\"activeJobsTitle\")} (\n  //         {`${\n  //           jobsToRender && jobsToRender.length === null\n  //             ? jobsToRender.length\n  //             : jobsToRender.length\n  //         }`}\n  //         ):\n  //       </h3>\n  //     </Grid>\n  //     <Grid item sm={2}>\n  //       {jobsToRender.companyBusinessId !== 0 &&\n  //       jobsToRender.companyBusinessId === null ? (\n  //         <Link to=\"/tyopaikkailmoitus\" className=\"btnLink\">\n  //           <Button\n  //             onClick={postAdvertisement}\n  //             variant=\"contained\"\n  //             size={i18n.language === \"ru\" ? \"small\" : \"medium\"}\n  //             color=\"primary\"\n  //           >\n  //             {t(\"addPost\")}\n  //           </Button>\n  //         </Link>\n  //       ) : (\n  //         <Link to=\"/tyopaikkailmoitus\" className=\"btnLink\">\n  //           <Button\n  //             onClick={postAdvertisement}\n  //             variant=\"contained\"\n  //             size={i18n.language === \"ru\" ? \"small\" : \"medium\"}\n  //             color=\"primary\"\n  //           >\n  //             {t(\"addPost\")}\n  //           </Button>\n  //         </Link>\n  //       )}\n  //     </Grid>\n  //   </Grid>\n  //   {jobsToRender\n  //     .slice(selectedPage * 10, selectedPage * 10 + 10)\n  //     .map((item) => {\n  //       return (\n  //         <div\n  //           key={\n  //             item.jobPostNumber === null\n  //               ? item.jobPostNumber\n  //               : item.jobPostNumber\n  //           }\n  //         >\n  //           <Paper style={{ marginTop: 20 }}>\n  //             <Grid\n  //               container\n  //               spacing={3}\n  //               style={{ padding: 20 }}\n  //               alignItems=\"center\"\n  //             >\n  //               <Grid item md={5}>\n  //                 <div>\n  //                   <Link\n  //                     to={customURL(item.url, \"internal\")}\n  //                     className=\"btnLink\"\n  //                   >\n  //                     <h4\n  //                       onClick={() => {\n  //                         // openAdToSeeAdInfo(item.jobPostNumber)\n  //                         fetchJobById(item.jobPostNumber);\n  //                       }}\n  //                     >\n  //                       {item.jobName === null ? item.jobName : item.jobName},\n  //                       {item.jobPostAsukohaAddress.map((address) => {\n  //                         {\n  //                           if (address.address[17] === null) {\n  //                             return address.address\n  //                               .split(\",\")\n  //                               .splice(1)\n  //                               .toString();\n  //                           } else return address.address;\n  //                         }\n  //                       })}\n  //                     </h4>\n  //                   </Link>\n  //                 </div>\n  //                 <div>\n  //                   <span>\n  //                     {t(\"applicationsInTotal\")}:\n  //                     <span style={{ color: \"red\", margin: \"0 5px\" }}>\n  //                       (\n  //                       {`${\n  //                         item.totalApplicants === null\n  //                           ? item.totalApplicants\n  //                           : item.totalApplicants\n  //                       }`}\n  //                       )\n  //                     </span>\n  //                   </span>\n  //                   <span />\n  //                   <span>\n  //                     {t(\"viewed\")}: <span />\n  //                     <span style={{ color: \"red\", margin: \"0 5px\" }}>\n  //                       ({`${item.totalViewed}`})\n  //                     </span>\n  //                     {t(\"times\")}\n  //                   </span>\n  //                 </div>\n  //               </Grid>\n  //               <Grid item md={3} style={{ color: \"#34495E \" }}>\n  //                 <div>\n  //                   <h5>\n  //                     {item.dateOfApplication === null\n  //                       ? item.dateOfApplication\n  //                       : item.dateOfApplication}\n  //                   </h5>\n  //                 </div>\n  //               </Grid>\n  //               <Grid item md={4}>\n  //                 <Grid container spacing={1}>\n  //                   <Grid item md={4}>\n  //                     <Button\n  //                       variant=\"outlined\"\n  //                       color=\"secondary\"\n  //                       onClick={() =>\n  //                         warnToDelete(item.jobPostNumber) === null\n  //                           ? warnToDelete(item.jobPostNumber)\n  //                           : warnToDelete(item.jobPostNumber)\n  //                       }\n  //                     >\n  //                       {t(\"common:deleteBtn\")}\n  //                     </Button>\n  //                   </Grid>\n  //                   <Grid item md={4}>\n  //                     <Link to=\"/tyopaikkailmoitus/\" className=\"btnLink\">\n  //                       <Button\n  //                         //style={ isDesktop && i18n.language === 'ru' ? {left: '15px'} : null }\n  //                         variant=\"contained\"\n  //                         color=\"secondary\"\n  //                         onClick={() => {\n  //                           populateVacancyForm(item.jobPostNumber, false) ===\n  //                           null\n  //                             ? populateVacancyForm(item.jobPostNumber, false)\n  //                             : populateVacancyForm(\n  //                                 item.jobPostNumber,\n  //                                 false\n  //                               );\n  //                         }}\n  //                       >\n  //                         {t(\"common:copyBtn\")}\n  //                       </Button>\n  //                     </Link>\n  //                   </Grid>\n  //                   <Grid item md={4}>\n  //                     <div>\n  //                       <Link\n  //                         className=\"btnLink\"\n  //                         to={\n  //                           customURL(item.url, \"internal\") === null\n  //                             ? customURL(item.url, \"internal\")\n  //                             : customURL(item.url, \"internal\")\n  //                         }\n  //                       >\n  //                         <Button\n  //                           variant=\"contained\"\n  //                           style={\n  //                             isDesktop && i18n.language === \"ru\"\n  //                               ? { left: \"29px\" }\n  //                               : null\n  //                           }\n  //                           color=\"primary\"\n  //                           onClick={() => fetchJobById(item.jobPostNumber)}\n  //                         >\n  //                           {t(\"common:openBtn\")}\n  //                         </Button>\n  //                       </Link>\n  //                     </div>\n  //                   </Grid>\n  //                 </Grid>\n  //               </Grid>\n  //             </Grid>\n  //           </Paper>\n  //         </div>\n  //       );\n  //     })}\n  //   <CustomizedDialogs\n  //     showDialog={showDialog}\n  //     dialogText={t(\"warnToDeletePostText\")}\n  //     warnToDeleteModal\n  //     handleClick={() => deleteAdvertisement(isToDeleteAdvertisementId)}\n  //   />\n  //   <div className=\"pagination-body\">\n  //     <ReactPaginate\n  //       previousLabel={<NavigateBeforeIcon />}\n  //       nextLabel={<NavigateNextIcon />}\n  //       breakLabel=\"...\"\n  //       breakClassName=\"break-me\"\n  //       pageCount={5}\n  //       marginPagesDisplayed={2}\n  //       pageRangeDisplayed={5}\n  //       onPageChange={changeAdvertPage}\n  //       containerClassName=\"pagination\"\n  //       subContainerClassName=\"pages pagination\"\n  //       activeClassName=\"active\"\n  //       forcePage={selectedPage}\n  //     />\n  //   </div>\n  // </div>\n  ;\n};\n\nexport default ActiveAdsComponent;","map":{"version":3,"names":["React","useEffect","useState","Grid","Paper","Button","Link","ReactPaginate","NavigateNextIcon","NavigateBeforeIcon","useTranslation","customURL","CustomizedDialogs","i18n","axios","ActiveAdsComponent","warnToDelete","populateVacancyForm","deleteAdvertisement","changeAdvertPage","selectedPage","advertPages","openAdToSeeJobPost","postAdvertisement","showDialog","isToDeleteAdvertisementId","fetchJobById","t","isDesktop","setIsDesktop","window","innerWidth","jobsToRender","setJobsToRender","get","then","res","data","updateSize","addEventListener","removeEventListener","slice","map","job","categorys","jobCode","unique","Set","jobPostNumber","console","log"],"sources":["/Users/eduardkazeks/Documents/GitHub/JobPortalEE/src/components/companies/ads/activeAds.component.js"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport { Grid, Paper, Button } from \"@material-ui/core\";\nimport { Link } from \"react-router-dom\";\nimport ReactPaginate from \"react-paginate\";\nimport NavigateNextIcon from \"@material-ui/icons/NavigateNext\";\nimport NavigateBeforeIcon from \"@material-ui/icons/NavigateBefore\";\nimport { useTranslation } from \"react-i18next\";\nimport { customURL } from \"../../../utils/helperFunctions\";\nimport CustomizedDialogs from \"../../../utils/customizedDialog\";\nimport i18n from \"../../../utils/i18n\";\nimport axios from \"axios\";\n\nconst ActiveAdsComponent = ({\n  warnToDelete,\n  populateVacancyForm,\n  deleteAdvertisement,\n  changeAdvertPage,\n  selectedPage,\n  advertPages,\n  openAdToSeeJobPost,\n  postAdvertisement,\n  showDialog,\n  isToDeleteAdvertisementId,\n  fetchJobById,\n}) => {\n  const { t } = useTranslation(\"jobs\");\n  const [isDesktop, setIsDesktop] = useState(window.innerWidth);\n  const [jobsToRender, setJobsToRender] = useState([]);\n\n  useEffect(() => {\n    axios.get(`https://localhost:7262/jobsEn`).then((res) => {\n      setJobsToRender(res.data);\n    });\n  }, []);\n\n  const updateSize = () => {\n    setIsDesktop(window.innerWidth >= 1440);\n  };\n  useEffect(() => {\n    window.addEventListener(\"resize\", updateSize);\n    return () => window.removeEventListener(\"resize\", updateSize);\n  });\n  return (\n    <div>\n      {jobsToRender.slice(selectedPage * 30, selectedPage * 30 + 30).map(job => {\n        //const categorys = []\n        //categorys.push(job.jobCode)\n        const categorys = job.jobCode\n        let unique = [...new Set(categorys)];\n        return (\n          <div key={job.jobPostNumber}>\n          <Grid>\n            <div>\n              <h1>\n                {/* {console.log(categorys)} */}\n                {console.log(unique)}\n              </h1>\n            </div>\n          </Grid>\n          </div>\n        )\n      })}\n    </div>\n    // <div className=\"container\">\n    //   <Grid container style={{ margin: \"30px 0px\" }}>\n    //     <Grid item sm={10}>\n    //       <h3>\n    //         {t(\"activeJobsTitle\")} (\n    //         {`${\n    //           jobsToRender && jobsToRender.length === null\n    //             ? jobsToRender.length\n    //             : jobsToRender.length\n    //         }`}\n    //         ):\n    //       </h3>\n    //     </Grid>\n    //     <Grid item sm={2}>\n    //       {jobsToRender.companyBusinessId !== 0 &&\n    //       jobsToRender.companyBusinessId === null ? (\n    //         <Link to=\"/tyopaikkailmoitus\" className=\"btnLink\">\n    //           <Button\n    //             onClick={postAdvertisement}\n    //             variant=\"contained\"\n    //             size={i18n.language === \"ru\" ? \"small\" : \"medium\"}\n    //             color=\"primary\"\n    //           >\n    //             {t(\"addPost\")}\n    //           </Button>\n    //         </Link>\n    //       ) : (\n    //         <Link to=\"/tyopaikkailmoitus\" className=\"btnLink\">\n    //           <Button\n    //             onClick={postAdvertisement}\n    //             variant=\"contained\"\n    //             size={i18n.language === \"ru\" ? \"small\" : \"medium\"}\n    //             color=\"primary\"\n    //           >\n    //             {t(\"addPost\")}\n    //           </Button>\n    //         </Link>\n    //       )}\n    //     </Grid>\n    //   </Grid>\n    //   {jobsToRender\n    //     .slice(selectedPage * 10, selectedPage * 10 + 10)\n    //     .map((item) => {\n    //       return (\n    //         <div\n    //           key={\n    //             item.jobPostNumber === null\n    //               ? item.jobPostNumber\n    //               : item.jobPostNumber\n    //           }\n    //         >\n    //           <Paper style={{ marginTop: 20 }}>\n    //             <Grid\n    //               container\n    //               spacing={3}\n    //               style={{ padding: 20 }}\n    //               alignItems=\"center\"\n    //             >\n    //               <Grid item md={5}>\n    //                 <div>\n    //                   <Link\n    //                     to={customURL(item.url, \"internal\")}\n    //                     className=\"btnLink\"\n    //                   >\n    //                     <h4\n    //                       onClick={() => {\n    //                         // openAdToSeeAdInfo(item.jobPostNumber)\n    //                         fetchJobById(item.jobPostNumber);\n    //                       }}\n    //                     >\n    //                       {item.jobName === null ? item.jobName : item.jobName},\n    //                       {item.jobPostAsukohaAddress.map((address) => {\n    //                         {\n    //                           if (address.address[17] === null) {\n    //                             return address.address\n    //                               .split(\",\")\n    //                               .splice(1)\n    //                               .toString();\n    //                           } else return address.address;\n    //                         }\n    //                       })}\n    //                     </h4>\n    //                   </Link>\n    //                 </div>\n    //                 <div>\n    //                   <span>\n    //                     {t(\"applicationsInTotal\")}:\n    //                     <span style={{ color: \"red\", margin: \"0 5px\" }}>\n    //                       (\n    //                       {`${\n    //                         item.totalApplicants === null\n    //                           ? item.totalApplicants\n    //                           : item.totalApplicants\n    //                       }`}\n    //                       )\n    //                     </span>\n    //                   </span>\n    //                   <span />\n    //                   <span>\n    //                     {t(\"viewed\")}: <span />\n    //                     <span style={{ color: \"red\", margin: \"0 5px\" }}>\n    //                       ({`${item.totalViewed}`})\n    //                     </span>\n    //                     {t(\"times\")}\n    //                   </span>\n    //                 </div>\n    //               </Grid>\n    //               <Grid item md={3} style={{ color: \"#34495E \" }}>\n    //                 <div>\n    //                   <h5>\n    //                     {item.dateOfApplication === null\n    //                       ? item.dateOfApplication\n    //                       : item.dateOfApplication}\n    //                   </h5>\n    //                 </div>\n    //               </Grid>\n    //               <Grid item md={4}>\n    //                 <Grid container spacing={1}>\n    //                   <Grid item md={4}>\n    //                     <Button\n    //                       variant=\"outlined\"\n    //                       color=\"secondary\"\n    //                       onClick={() =>\n    //                         warnToDelete(item.jobPostNumber) === null\n    //                           ? warnToDelete(item.jobPostNumber)\n    //                           : warnToDelete(item.jobPostNumber)\n    //                       }\n    //                     >\n    //                       {t(\"common:deleteBtn\")}\n    //                     </Button>\n    //                   </Grid>\n    //                   <Grid item md={4}>\n    //                     <Link to=\"/tyopaikkailmoitus/\" className=\"btnLink\">\n    //                       <Button\n    //                         //style={ isDesktop && i18n.language === 'ru' ? {left: '15px'} : null }\n    //                         variant=\"contained\"\n    //                         color=\"secondary\"\n    //                         onClick={() => {\n    //                           populateVacancyForm(item.jobPostNumber, false) ===\n    //                           null\n    //                             ? populateVacancyForm(item.jobPostNumber, false)\n    //                             : populateVacancyForm(\n    //                                 item.jobPostNumber,\n    //                                 false\n    //                               );\n    //                         }}\n    //                       >\n    //                         {t(\"common:copyBtn\")}\n    //                       </Button>\n    //                     </Link>\n    //                   </Grid>\n    //                   <Grid item md={4}>\n    //                     <div>\n    //                       <Link\n    //                         className=\"btnLink\"\n    //                         to={\n    //                           customURL(item.url, \"internal\") === null\n    //                             ? customURL(item.url, \"internal\")\n    //                             : customURL(item.url, \"internal\")\n    //                         }\n    //                       >\n    //                         <Button\n    //                           variant=\"contained\"\n    //                           style={\n    //                             isDesktop && i18n.language === \"ru\"\n    //                               ? { left: \"29px\" }\n    //                               : null\n    //                           }\n    //                           color=\"primary\"\n    //                           onClick={() => fetchJobById(item.jobPostNumber)}\n    //                         >\n    //                           {t(\"common:openBtn\")}\n    //                         </Button>\n    //                       </Link>\n    //                     </div>\n    //                   </Grid>\n    //                 </Grid>\n    //               </Grid>\n    //             </Grid>\n    //           </Paper>\n    //         </div>\n    //       );\n    //     })}\n    //   <CustomizedDialogs\n    //     showDialog={showDialog}\n    //     dialogText={t(\"warnToDeletePostText\")}\n    //     warnToDeleteModal\n    //     handleClick={() => deleteAdvertisement(isToDeleteAdvertisementId)}\n    //   />\n    //   <div className=\"pagination-body\">\n    //     <ReactPaginate\n    //       previousLabel={<NavigateBeforeIcon />}\n    //       nextLabel={<NavigateNextIcon />}\n    //       breakLabel=\"...\"\n    //       breakClassName=\"break-me\"\n    //       pageCount={5}\n    //       marginPagesDisplayed={2}\n    //       pageRangeDisplayed={5}\n    //       onPageChange={changeAdvertPage}\n    //       containerClassName=\"pagination\"\n    //       subContainerClassName=\"pages pagination\"\n    //       activeClassName=\"active\"\n    //       forcePage={selectedPage}\n    //     />\n    //   </div>\n    // </div>\n  );\n};\nexport default ActiveAdsComponent;\n"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,SAASC,IAAT,EAAeC,KAAf,EAAsBC,MAAtB,QAAoC,mBAApC;AACA,SAASC,IAAT,QAAqB,kBAArB;AACA,OAAOC,aAAP,MAA0B,gBAA1B;AACA,OAAOC,gBAAP,MAA6B,iCAA7B;AACA,OAAOC,kBAAP,MAA+B,mCAA/B;AACA,SAASC,cAAT,QAA+B,eAA/B;AACA,SAASC,SAAT,QAA0B,gCAA1B;AACA,OAAOC,iBAAP,MAA8B,iCAA9B;AACA,OAAOC,IAAP,MAAiB,qBAAjB;AACA,OAAOC,KAAP,MAAkB,OAAlB;;AAEA,MAAMC,kBAAkB,GAAG,QAYrB;EAAA,IAZsB;IAC1BC,YAD0B;IAE1BC,mBAF0B;IAG1BC,mBAH0B;IAI1BC,gBAJ0B;IAK1BC,YAL0B;IAM1BC,WAN0B;IAO1BC,kBAP0B;IAQ1BC,iBAR0B;IAS1BC,UAT0B;IAU1BC,yBAV0B;IAW1BC;EAX0B,CAYtB;EACJ,MAAM;IAAEC;EAAF,IAAQjB,cAAc,CAAC,MAAD,CAA5B;EACA,MAAM,CAACkB,SAAD,EAAYC,YAAZ,IAA4B3B,QAAQ,CAAC4B,MAAM,CAACC,UAAR,CAA1C;EACA,MAAM,CAACC,YAAD,EAAeC,eAAf,IAAkC/B,QAAQ,CAAC,EAAD,CAAhD;EAEAD,SAAS,CAAC,MAAM;IACda,KAAK,CAACoB,GAAN,CAAW,+BAAX,EAA2CC,IAA3C,CAAiDC,GAAD,IAAS;MACvDH,eAAe,CAACG,GAAG,CAACC,IAAL,CAAf;IACD,CAFD;EAGD,CAJQ,EAIN,EAJM,CAAT;;EAMA,MAAMC,UAAU,GAAG,MAAM;IACvBT,YAAY,CAACC,MAAM,CAACC,UAAP,IAAqB,IAAtB,CAAZ;EACD,CAFD;;EAGA9B,SAAS,CAAC,MAAM;IACd6B,MAAM,CAACS,gBAAP,CAAwB,QAAxB,EAAkCD,UAAlC;IACA,OAAO,MAAMR,MAAM,CAACU,mBAAP,CAA2B,QAA3B,EAAqCF,UAArC,CAAb;EACD,CAHQ,CAAT;EAIA,oBACE;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,GACGN,YAAY,CAACS,KAAb,CAAmBrB,YAAY,GAAG,EAAlC,EAAsCA,YAAY,GAAG,EAAf,GAAoB,EAA1D,EAA8DsB,GAA9D,CAAkEC,GAAG,IAAI;IACxE;IACA;IACA,MAAMC,SAAS,GAAGD,GAAG,CAACE,OAAtB;IACA,IAAIC,MAAM,GAAG,CAAC,GAAG,IAAIC,GAAJ,CAAQH,SAAR,CAAJ,CAAb;IACA,oBACE;MAAK,GAAG,EAAED,GAAG,CAACK,aAAd;MAAA;MAAA;QAAA;QAAA;QAAA;MAAA;IAAA,gBACA,oBAAC,IAAD;MAAA;MAAA;QAAA;QAAA;QAAA;MAAA;IAAA,gBACE;MAAA;MAAA;QAAA;QAAA;QAAA;MAAA;IAAA,gBACE;MAAA;MAAA;QAAA;QAAA;QAAA;MAAA;IAAA,GAEGC,OAAO,CAACC,GAAR,CAAYJ,MAAZ,CAFH,CADF,CADF,CADA,CADF;EAYD,CAjBA,CADH,CADF,CAqlOF;AAoOD,CAlQD;;AAmQA,eAAe/B,kBAAf"},"metadata":{},"sourceType":"module"}