{"ast":null,"code":"import { useState } from \"react\";\nimport { takeEvery, put, call } from \"redux-saga/effects\";\nimport { getFormValues, change, formValueSelector, initialize, getFormInitialValues, touch } from \"redux-form\";\nimport { SAVE_AND_PUBLISH_ADVERTISEMENT, UPDATE_AND_PUBLISH_ADVERTISEMENT, API_SERVER, API_SERVER_EST, API_SERVER_EST_GET_ID, GET_ALL_CAMPAIGNS, OPEN_AD_TO_SEE_AD_INFO, UPDATE_ADVERTISEMENT, POPULATE_VACANCY_FORM, DELETE_ADVERTISEMENT, GET_ALL_JOB_CATEGORY, GET_ALL_ADS_BY_STATUS, SAVE_ADVERTISEMENT_AS_DRAFT, SAVE_NEW_CAMPAIGN, CHANGE_ACTIVE_POST_TO_INACTIVE, GET_APPLICATION_DETAILS_BY_ID, UPDATE_APPLICANT_STATUS, GET_JOBPOST_VIEWS_BY_DATE, NAVIGATE_ADS_FROM_MAIN_MENU, UPDATE_JOB_APPLICATION_DETAILS, EDIT_INTERVIEW_DETAILS, SAVE_MARKETING_DETAILS, DELETE_APPLICATION, CHANGE_ROUTE, ADMIN_GET_USER_PROFILE, HELP_SERVICE_FEE, SOS_SERVICE_FEE, POPULATE_EMAIL_MESSAGE, AUTO_EMAIL_TO_APPLICANT, EDIT_VACANCY_FORM, DELETE_JOB_OFFER } from \"../constants\";\nimport store from \"../store\";\nimport { apiManualRequest, apiManualPost, apiOpenRequest, apiGetJobsOffers, apiManualDelete } from \"../utils/request\";\nimport { filterObj } from \"../utils/wrappers\";\nimport { getAllCampaignsSuccess, saveAndPublishAdvertisementSuccess, getAllJobCategorySuccess, saveAndPublishAdvertisementFailed, getAllAdsByStatusSuccess, saveAndPublishAdvertisement, showSuccessSnackbar, showFailedSnackbar, openAdToSeeAdInfo, populateVacancyFormSuccess, updateAndPublishAdvertisementSuccess, getApplicationDetailsById, getApplicationDetailsByIdSuccess, getJobPostViewsByDateSuccess, changeAdvertPage, getAllAdsByStatus, filterJobs, hideSpinner, saveMarketingDetailsSuccess, closeDialog, registerPayment, sendInvoiceToTalous, getCompanyProfileSuccess, openAdToSeeAdInfoSuccess, getJobsOffers, getAllJobCategoryFromEstoniaSuccess, editVacancyForm } from \"../actions\";\nimport { customTranslateCampaign } from \"../utils/customTranslate\";\nimport browserHistory from \"../history\";\nimport { messageTemplate } from \"../components/companies/advertisements/automaticMessageToApplicants/messages\";\nimport axios from \"axios\";\nimport { useSelector } from \"react-redux\";\n\nfunction* getAllCampaignsSaga() {\n  try {\n    const url = `${API_SERVER}/GetCampaigns`;\n    const result = yield call(apiManualRequest, url);\n    const resultParsed = JSON.parse(result.data);\n    yield put(getAllCampaignsSuccess(resultParsed));\n  } catch (error) {\n    console.log(error);\n  }\n}\n\nfunction* getAllJobCategorySaga() {\n  try {\n    const url = `${API_SERVER}/GetJobCategories`;\n    const result = yield call(apiOpenRequest, url);\n    const resultParsed = JSON.parse(result.data);\n    yield put(getAllJobCategorySuccess(resultParsed));\n  } catch (error) {\n    console.log(error);\n  }\n} // function saveAndPublishAdvertisementEstonia(){\n//   try{\n//     let url;\n//     let body;\n//     let parsedCompany ={};\n//   }\n// }\n\n\nfunction* saveAndPublishAdvertisementSaga() {\n  try {\n    let url;\n    let body;\n    let response;\n    let parsedCompany = {};\n    const {\n      advertisement,\n      client,\n      companyProfile\n    } = store.getState();\n    const formValues = getFormValues(\"vacancy\")(store.getState());\n    const paymentInfoForm = getFormValues(\"paymentInfo\")(store.getState());\n    const uuid = client.user.data[2];\n    const userRole = client.user.data[6].user_type;\n    const payment_method = paymentInfoForm && paymentInfoForm.payment_method;\n    const companyId = companyProfile.profile.company_id;\n\n    if (!formValues.company_id) {\n      formValues.company_id = companyId; // Also sending company_id to add company specific post.\n    }\n\n    yield put(closeDialog());\n\n    if (userRole === \"admin\") {\n      const companyDetails = {\n        company_id: parseInt(formValues.company_id),\n        uuid\n      };\n      const jobPostOwner = yield call(apiManualPost, `${API_SERVER}/GetCompanyProfile`, JSON.stringify({ ...companyDetails\n      }));\n      parsedCompany = JSON.parse(jobPostOwner.data);\n    }\n\n    const {\n      selectedCampaign,\n      isSaveAdvertisementAsDraft,\n      isToEdit,\n      uploadedImage,\n      marketingDetails,\n      extraService\n    } = advertisement;\n    const isDraft = isSaveAdvertisementAsDraft;\n    const refinedUploadedImage = uploadedImage && uploadedImage.name && uploadedImage.name.replace(/\\s+\\(\\d+\\)/g, \"JP\"); // If stored filename has (int), dropzone doesn't understand the path..so changing such names before sending to db.\n\n    const refinedFormValues = filterObj(\"image_document\", formValues);\n\n    if (isToEdit) {\n      url = `${API_SERVER_EST}/updateJobOffer`;\n    } else {\n      url = `${API_SERVER_EST}/postJob`;\n    }\n\n    const statusToUpdate = isDraft || extraService.help || extraService.sos ? 0 : selectedCampaign.type === \"free\" ? 1 : 4;\n    const selectedService = extraService.help ? \"help\" : extraService.sos ? \"sos\" : null; // image_document array means, it already exists in db, no need to send while updating\n\n    if (Array.isArray(formValues.image_document) === true) {\n      body = { ...refinedFormValues,\n        uuid,\n        campaign_type: selectedCampaign.type,\n        status: statusToUpdate,\n        extra_service: selectedService\n      };\n    } else if (!uploadedImage.name) {\n      // no uploaded image means, no need to send any base64. Also, if there is an image stored in db..and we want to delete it, I am changing the formvalues of image_document in component\n      body = { ...formValues,\n        uuid,\n        campaignLevel: selectedCampaign.type,\n        status: statusToUpdate,\n        extra_service: selectedService\n      };\n    } else if (uploadedImage.name && !Array.isArray(formValues.image_document)) {\n      const base64 = formValues.image_document;\n      body = { ...formValues,\n        uuid,\n        campaignLevel: selectedCampaign.type,\n        status: statusToUpdate,\n        image_document: {\n          uuid,\n          document_id: uploadedImage.id,\n          path: \"\",\n          filename: refinedUploadedImage,\n          filetype: uploadedImage.type,\n          data: base64\n        },\n        extra_service: selectedService\n      };\n    }\n\n    if (selectedCampaign.includes_mktbudget) {\n      const {\n        marketing_platform,\n        more_budget,\n        marketing_budget\n      } = marketingDetails;\n      body.marketing_platform = !!marketing_platform ? marketing_platform : null;\n      body.more_budget = !!more_budget ? more_budget : null;\n      body.marketing_budget = !!marketing_budget ? parseInt(marketing_budget) : 0;\n    } // SAVING AND PUBLISHING JOBPOST\n\n\n    axios.post(url, body).catch(res => {\n      response = res;\n    }).then(res => {\n      response = res;\n    });\n    console.log(response); // const result = yield call(apiManualPost, url,body);\n\n    if (response === 400 || response === undefined) {\n      yield put(saveAndPublishAdvertisementFailed());\n    } else {\n      yield put(saveAndPublishAdvertisementSuccess());\n    } // const parsedResult = JSON.parse(result.data);\n    // If publishing post, Generate invoice under the hood via Talousvirta API or online payment via NETS\n    // if (parsedResult) {\n    //   const { company_name, business_id, firstname, lastname, email, address, zip_code, city } =\n    //     userRole === 'admin' ? parsedCompany[0] : companyProfile.profile;\n    //   const jobTitle = formValues.job_title;\n    //   const postId = parsedResult[0].post_id;\n    //   const orderId = parsedResult[0].order_id;\n    //   const publishedPostStatus = parsedResult[0].job_post_status;\n    //   const description = `${jobTitle} | Kampanjapaketti - ${customTranslateCampaign(selectedCampaign.id)}`;\n    //   const mkt_description = `${jobTitle} | Lisätty markkinointiraha`;\n    //   const extra_service_description = `Aktivoitu lisäpalvelu | ${extraService.help ? 'HELP' : 'SOS'}`;\n    //   // If mkt budget is added with campaigns with mkt budget, i.e. 5th campaign for now.\n    //   let marketing_budget = 0;\n    //   if (selectedCampaign.includes_mktbudget && !!parsedResult[0].marketing_budget) {\n    //     marketing_budget = parsedResult[0].marketing_budget;\n    //   }\n    //   const extra_service_fee = extraService.help ? HELP_SERVICE_FEE : extraService.sos ? SOS_SERVICE_FEE : 0;\n    //   if (\n    //     (publishedPostStatus === 0 && extra_service_fee > 0) || // If help and sos are added as extra service\n    //     publishedPostStatus === 4 // If paid campaigns are selected, temporary placeholder status\n    //   ) {\n    //     const isExtraServiceAdded = publishedPostStatus === 0 && extra_service_fee > 0 ? true : false;\n    //     const extra_service_fee_with_vat = extra_service_fee * 1.24; // Total price for the extra service including vat\n    //     const amount = parsedResult[0].job_post_campaign_money;\n    //     const totalSum = (marketing_budget + amount) * 1.24;\n    //     const details = {\n    //       company_id: formValues.company_id,\n    //       company_name,\n    //       business_id,\n    //       firstname,\n    //       lastname,\n    //       email,\n    //       address,\n    //       zip_code,\n    //       city,\n    //       description: isExtraServiceAdded ? extra_service_description : description,\n    //       totalSum: isExtraServiceAdded ? extra_service_fee_with_vat : totalSum,\n    //       amount: isExtraServiceAdded ? extra_service_fee : amount,\n    //       post_id: postId,\n    //       order_id: orderId,\n    //       marketing_budget,\n    //       mkt_description,\n    //       selectedCampaign,\n    //     };\n    //     if (payment_method === 'invoice') {\n    //       yield put(sendInvoiceToTalous(details));\n    //     } else if (payment_method === 'online') {\n    //       \\ put(registerPayment(details));\n    //     }\n    //   }\n    //   // Post saved as a draft or free campaign or help/sos feature\n    //   //if (parsedResult[0].job_post_status !== 4)\n    //   else {\n    //     yield put(saveAndPublishAdvertisementSuccess());\n    //   }\n    // } else {\n    //   yield put(saveAndPublishAdvertisementFailed());\n    // }\n\n  } catch (error) {\n    console.log(error);\n    yield put(saveAndPublishAdvertisementFailed());\n  }\n}\n\nfunction* getJobPostByPostIdSaga(_ref) {\n  let {} = _ref;\n\n  try {\n    const id = store.getState().jobs.id;\n    const url = `${API_SERVER_EST}/${id}`;\n    const companyBusinessId = store.getState().jobs.jobsList.companyBusinessId;\n    const userRole = store.getState().client.user.data[6].user_type;\n    const result = yield call(apiOpenRequest, url);\n    const resultParsed = result.data;\n    yield put(openAdToSeeAdInfoSuccess(resultParsed));\n  } catch (error) {\n    console.log(error);\n    yield put(hideSpinner());\n  }\n} // function* getAllAdsByStatusSaga({ status }) {\n//   try {\n//     const url = `${API_SERVER}/SearchJobPosts`;\n//     const { client, usersCompanyList, companyProfile } = store.getState();\n//     const uuid = client.user.data[2];\n//     const roleId = client.user.data[5];\n//     let selectedCompanyId;\n//     selectedCompanyId = usersCompanyList.selectedCompany.company_id;\n//     const assignedCompanyId = client.user.data[6].company_id;\n//     if (!selectedCompanyId) {\n//       // For first time registered users, client company_id is null since user profile is not updated\n//       selectedCompanyId = companyProfile.profile.company_id;\n//     }\n//     const company_id = roleId === 0 ? selectedCompanyId : assignedCompanyId; //super user with many companies\n//     const body = JSON.stringify({\n//       status,\n//       uuid,\n//       company_id,\n//     });\n//     const result = yield call(apiManualPost, url, body);\n//     const resultParsed = JSON.parse(result.data);\n//     yield put(getAllAdsByStatusSuccess(status, resultParsed));\n//   } catch (error) {\n//     console.log(error);\n//   }\n// }\n// Populating vacancy form when editing or copying\n\n\nfunction* populateVacancyFormSaga(_ref2) {\n  let {\n    id,\n    isToEdit\n  } = _ref2;\n\n  try {\n    const url = `${API_SERVER_EST}/${id}`; //const companyBusinessId = store.getState().jobs.companyBusinessId;\n\n    const campaigns = store.getState().advertisement.campaigns;\n    const userRole = store.getState().client.user.data[6].user_type;\n    const body = JSON.stringify({\n      jobPostNumber: userRole === \"admin\" ? id.split(\"admin\")[0] : id //companyBusinessId: userRole === 'admin' ? id.split('admin')[1] : companyBusinessId,\n\n    });\n    const result = yield call(apiManualRequest, url);\n    const resultParsed = result.data;\n    console.log(resultParsed); // console.log('resultParsed', resultParsed);\n    // If we are populating from Draft Component, we are editing--> call UpdateJobPost API, it needs company_id && post_id which is being sent along with the vacancy form!\n\n    const {\n      jobPostNumber,\n      //companyBusinessId,\n      company_image,\n      image_id,\n      jobName,\n      titleSpecification,\n      workingTime,\n      jobTags,\n      job_location,\n      jobDescription,\n      is_agreement,\n      dateOfApplication,\n      is_email_notification,\n      email,\n      notice_frequency,\n      campaign_id,\n      marketing_platform,\n      more_budget,\n      marketing_budget,\n      urlToApplyJob\n    } = resultParsed;\n\n    if (isToEdit) {\n      yield put(change(\"vacancy\", \"jobPostNumber\", jobPostNumber)); // yield put(change('vacancy', 'company_id', company_id));\n\n      if (company_image) {\n        yield put(change(\"vacancy\", \"image_document\", company_image));\n        yield put(change(\"vacancy\", \"image_id\", image_id));\n      }\n    }\n\n    yield put(change(\"vacancy\", \"jobTitle\", jobName));\n    yield put(change(\"vacancy\", \"jobType\", titleSpecification));\n    yield put(change(\"vacancy\", \"jobDuration\", workingTime));\n    yield put(change(\"vacancy\", \"jobCategory\", jobTags));\n    yield put(change(\"vacancy\", \"jobLocation\", resultParsed.jobPostAddress.address));\n    yield put(change(\"vacancy\", \"jobDescription\", jobDescription));\n    yield put(change(\"vacancy\", \"is_agreement\", true));\n    yield put(change(\"vacancy\", \"applicationUrl\", urlToApplyJob));\n    yield put(change(\"vacancy\", \"lastApplicationDate\", dateOfApplication));\n    yield put(change(\"vacancy\", \"is_email_notification\", is_email_notification));\n    yield put(change(\"vacancy\", \"email\", email));\n    yield put(change(\"vacancy\", \"notice_frequency\", notice_frequency));\n    const postCampaign = campaigns.find(campaign => campaign.id === campaign_id);\n    const campaignDetails = {\n      postCampaign,\n      marketing_platform,\n      more_budget,\n      marketing_budget\n    }; // yield put(populateVacancyFormSuccess(campaignDetails, isToEdit));\n  } catch (e) {\n    console.log(e);\n  }\n}\n\nfunction* editVacancyFormSaga(_ref3) {\n  let {\n    id,\n    isToEdit\n  } = _ref3;\n\n  try {\n    const url = `${API_SERVER_EST}/${id}`;\n    const campaigns = store.getState().advertisement.campaigns;\n    const userRole = store.getState().client.user.data[6].user_type;\n    const body = JSON.stringify({\n      jobPostNumber: userRole === \"admin\" ? id.split(\"admin\")[0] : id\n    });\n    const result = yield call(apiManualRequest, url);\n    const resultParsed = result.data;\n    console.log(\"saga works\"); // If we are populating from Draft Component, we are editing--> call UpdateJobPost API, it needs company_id && post_id which is being sent along with the vacancy form!\n\n    const {\n      jobPostNumber,\n      company_image,\n      image_id,\n      jobName,\n      titleSpecification,\n      workingTime,\n      jobTags,\n      job_location,\n      jobDescription,\n      is_agreement,\n      dateOfApplication,\n      is_email_notification,\n      email,\n      notice_frequency,\n      campaign_id,\n      marketing_platform,\n      more_budget,\n      marketing_budget,\n      urlToApplyJob\n    } = resultParsed;\n\n    if (isToEdit) {\n      yield put(change(\"editVacancy\", \"jobPostNumber\", jobPostNumber)); // yield put(change('vacancy', 'company_id', company_id));\n\n      if (company_image) {\n        yield put(change(\"editVacancy\", \"image_document\", company_image));\n        yield put(change(\"editVacancy\", \"image_id\", image_id));\n      }\n    }\n\n    yield put(change(\"editVacancy\", \"jobTitle\", jobName));\n    yield put(change(\"editVacancy\", \"jobType\", titleSpecification));\n    yield put(change(\"editVacancy\", \"jobDuration\", workingTime));\n    yield put(change(\"editVacancy\", \"jobCategory\", jobTags)); // yield put(change('editVacancy', 'jobLocation', resultParsed.jobPostAddress.address));\n\n    yield put(change(\"editVacancy\", \"jobDescription\", jobDescription));\n    yield put(change(\"editVacancy\", \"is_agreement\", true));\n    yield put(change(\"editVacancy\", \"applicationUrl\", urlToApplyJob));\n    yield put(change(\"editVacancy\", \"lastApplicationDate\", dateOfApplication));\n    yield put(change(\"editVacancy\", \"is_email_notification\", is_email_notification));\n    yield put(change(\"editVacancy\", \"email\", email));\n    yield put(change(\"editVacancy\", \"notice_frequency\", notice_frequency));\n    const postCampaign = campaigns.find(campaign => campaign.id === campaign_id);\n    const campaignDetails = {\n      postCampaign,\n      marketing_platform,\n      more_budget,\n      marketing_budget\n    };\n    yield put(populateVacancyFormSuccess(campaignDetails, isToEdit));\n  } catch (e) {\n    console.log(e);\n  }\n} // Update advertisement - editAdvertForm is open/ Campaigns are not shown here.\n\n\nfunction* updateJobPostSaga(_ref4) {\n  let {\n    isToEdit,\n    id\n  } = _ref4;\n\n  try {\n    const url = `${API_SERVER_EST}/${id}`;\n    const result = yield call(apiManualRequest, url);\n    const resultParsed = result.data;\n    const {\n      jobPostNumber,\n      logo,\n      image_id,\n      jobName,\n      companyBusinessId,\n      titleSpecification,\n      workingTime,\n      jobTags,\n      job_location,\n      jobDescription,\n      is_agreement,\n      dateOfApplication,\n      is_email_notification,\n      email,\n      notice_frequency,\n      campaign_id,\n      marketing_platform,\n      more_budget,\n      marketing_budget,\n      urlToApplyJob\n    } = resultParsed;\n\n    if (isToEdit) {\n      yield put(change(\"editVacancy\", \"jobPostNumber\", jobPostNumber));\n      yield put(change(\"vacancy\", \"companyBusinessId\", companyBusinessId));\n\n      if (logo) {\n        yield put(change(\"editVacancy\", \"image_document\", logo));\n        yield put(change(\"editVacancy\", \"image_id\", image_id));\n      }\n    }\n\n    yield put(change(\"editVacancy\", \"jobName\", jobName));\n    yield put(change(\"editVacancy\", \"titleSpecification\", titleSpecification));\n    yield put(change(\"editVacancy\", \"jobDuration\", workingTime));\n    yield put(change(\"editVacancy\", \"jobCategory\", jobTags));\n    yield put(change(\"editVacancy\", \"jobLocation\", resultParsed.jobPostAddress.address));\n    yield put(change(\"editVacancy\", \"jobDescription\", jobDescription));\n    yield put(change(\"editVacancy\", \"is_agreement\", true));\n    yield put(change(\"editVacancy\", \"applicationUrl\", urlToApplyJob));\n    yield put(change(\"editVacancy\", \"lastApplicationDate\", dateOfApplication));\n    yield put(change(\"editVacancy\", \"is_email_notification\", is_email_notification));\n    yield put(change(\"editVacancy\", \"email\", email));\n    yield put(change(\"editVacancy\", \"notice_frequency\", notice_frequency));\n  } catch (error) {\n    console.log(error);\n  }\n}\n\nfunction* updateAndPublishAdvertisementSaga() {\n  try {\n    const url = `https://localhost:7262/updateJobOffer`;\n    const id = store.getState().jobs.id;\n    const campaignLevel = store.getState().advertisement.campaigns[0].type;\n    const {\n      jobName,\n      jobCategory,\n      titleSpecification,\n      jobDuration,\n      jobLocation,\n      applicationUrl,\n      lastApplicationDate,\n      jobDescription\n    } = getFormValues(\"editVacancy\")(store.getState());\n    let body = {\n      id,\n      jobTitle: jobName,\n      jobCategory,\n      jobType: titleSpecification,\n      jobDuration,\n      jobLocation,\n      applicationUrl,\n      lastApplicationDate,\n      jobDescription,\n      campaignLevel\n    };\n    const result = axios.patch(url, body).then(res => {\n      updateAndPublishAdvertisementSuccess();\n    }).catch(() => {\n      saveAndPublishAdvertisementFailed();\n    });\n  } catch (e) {\n    console.log(e);\n  }\n} // Update campaign\n\n\nfunction* updateCampaignSaga(_ref5) {\n  let {\n    id\n  } = _ref5;\n\n  try {\n    yield put(closeDialog());\n    const {\n      advertisement,\n      client,\n      companyProfile,\n      jobs\n    } = store.getState();\n    const paymentInfoForm = getFormValues(\"paymentInfo\")(store.getState());\n    const payment_method = paymentInfoForm && paymentInfoForm.payment_method; // Upgrade campaign\n\n    const url = `https://localhost:7262/updateJobOfferCampaignType`;\n    const uuid = store.getState().client.user.data[2];\n    const {\n      type,\n      includes_mktbudget\n    } = advertisement.selectedCampaign;\n    const campaign_id = advertisement.selectedCampaign.id;\n    const userRole = client.user.data[6].user_type;\n    const {\n      id\n    } = jobs;\n    const post_id = userRole === \"admin\" ? id.split(\"admin\")[0] : id;\n    const companyId = userRole === \"admin\" ? id.split(\"admin\")[1] : companyProfile.profile.company_id;\n    const campaignDate = formValueSelector(\"campaign\")(store.getState(), \"due_date\");\n    let parsedCompany = {};\n    const body = {\n      campaignType: type,\n      //uuid,\n      id,\n      //company_id: companyId,\n      campaignDate\n    };\n\n    if (includes_mktbudget) {\n      const {\n        marketing_platform,\n        more_budget,\n        marketing_budget\n      } = advertisement.marketingDetails;\n      body.marketing_platform = !!marketing_platform ? marketing_platform : null;\n      body.more_budget = !!more_budget ? more_budget : null;\n      body.marketing_budget = !!marketing_budget ? parseInt(marketing_budget) : 0;\n    } // const result = yield call(apiManualPost, url, JSON.stringify({ ...body }));\n\n\n    const result = axios.patch(url, body).finally(res => {\n      showSuccessSnackbar(res);\n    });\n    const resultParsed = JSON.parse(result.data); // if (resultParsed) {\n    //   //If admin is upgrading post or updating jobpost on behalf of companies:\n    //   if (userRole === 'admin') {\n    //     const body2 = {\n    //       company_id: parseInt(companyId),\n    //       uuid,\n    //     };\n    //     const jobPostOwner = yield call(apiManualPost, `${API_SERVER}/GetCompanyProfile`, JSON.stringify({ ...body2 }));\n    //     parsedCompany = JSON.parse(jobPostOwner.data);\n    //   }\n    //   const { company_name, business_id, firstname, lastname, email, address, zip_code, city } =\n    //     userRole === 'admin' ? parsedCompany[0] : companyProfile.profile;\n    //   const jobTitle = advertisement.viewSelectedAd.job_title;\n    //   const description = `${jobTitle} | Kampanjapaketti - ${customTranslateCampaign(campaign_id)}`;\n    //   const mkt_description = `${jobTitle} | Lisätty markkinointiraha`;\n    //   const orderId = resultParsed[0].order_id;\n    //   const previousCampaignPrice = resultParsed[0].prev_campaign_money;\n    //   const newCampaignPrice = resultParsed[0].new_campaign_money;\n    //   const amount = newCampaignPrice - previousCampaignPrice;\n    //   // If mkt budget is added.\n    //   let marketing_budget = 0;\n    //   const newMarketingBudget = resultParsed[0].marketing_budget;\n    //   if (includes_mktbudget && newMarketingBudget > 0) {\n    //     marketing_budget = newMarketingBudget;\n    //   }\n    //   const totalSum = (marketing_budget + amount) * 1.24;\n    //   // If new and more expensive campaign price OR more marketing budget, generate invoice\n    //   const details = {\n    //     company_id: companyId,\n    //     company_name,\n    //     business_id,\n    //     firstname,\n    //     lastname,\n    //     email,\n    //     address,\n    //     zip_code,\n    //     city,\n    //     description,\n    //     totalSum,\n    //     amount,\n    //     post_id: parseInt(post_id),\n    //     order_id: orderId,\n    //     marketing_budget,\n    //     mkt_description,\n    //     isSameCampaign: amount === 0 ? true : false, // Meaning same campaign but new budget\n    //     selectedCampaign: advertisement.selectedCampaign,\n    //     postIdToFetch: id,\n    //   };\n    //   if (payment_method === 'invoice') {\n    //     yield put(sendInvoiceToTalous(details));\n    //   } else if (payment_method === 'online') {\n    //     yield put(registerPayment(details));\n    //   } else {\n    //     yield put(showSuccessSnackbar());\n    //   }\n    // }\n  } catch (error) {\n    console.log(error);\n    yield put(showFailedSnackbar());\n  }\n}\n\nfunction* changeJobPostStatusSaga(_ref6) {\n  let {\n    id\n  } = _ref6;\n\n  try {\n    const url = `${API_SERVER}/UpdateJobPostStatus`;\n    const {\n      company_id\n    } = store.getState().companyProfile.profile;\n    const post_id = id;\n    const userRole = store.getState().client.user.data[6].user_type;\n    const body = JSON.stringify({\n      post_id: userRole === \"admin\" ? id.split(\"admin\")[0] : post_id,\n      // For admins, we need to get company id from post itself\n      company_id: userRole === \"admin\" ? id.split(\"admin\")[1] : company_id,\n      status: 2\n    });\n    const result = yield call(apiManualPost, url, body);\n\n    if (result.data === \"Job Post Status updated successfully!\") {\n      yield put(showSuccessSnackbar());\n      yield put(openAdToSeeAdInfo(id));\n    } else {\n      yield put(showFailedSnackbar());\n    }\n  } catch (e) {\n    console.log(e);\n  }\n}\n\nfunction* saveMarketingDetailsSaga() {\n  try {\n    const formValues = getFormValues(\"marketingDetails\")(store.getState());\n    const {\n      marketing_platform,\n      more_budget,\n      marketing_budget\n    } = formValues;\n\n    if (!marketing_platform) {\n      yield put(touch(\"marketingDetails\", \"marketing_platform\"));\n      return;\n    }\n\n    if (!more_budget) {\n      yield put(touch(\"marketingDetails\", \"more_budget\"));\n      return;\n    }\n\n    if (more_budget === \"yes\") {\n      if (!marketing_budget) {\n        yield put(touch(\"marketingDetails\", \"marketing_budget\"));\n        return;\n      }\n    }\n\n    if (marketing_budget && (parseInt(marketing_budget) < 1 || !/^[0-9]+$/.test(marketing_budget))) {\n      return;\n    }\n\n    yield put(saveMarketingDetailsSuccess(formValues));\n    yield put(closeDialog());\n  } catch (e) {\n    console.log(e);\n  }\n}\n\nfunction* displayInitialDetails(_ref7) {\n  let {\n    isToEdit\n  } = _ref7;\n\n  try {\n    if (!isToEdit) yield put(initialize(\"applicantDetails\", getFormInitialValues(\"applicantDetails\")(store.getState())));\n  } catch (e) {\n    console.log(e);\n  }\n}\n\nfunction* deleteJobPostSaga(_ref8) {\n  let {\n    id\n  } = _ref8;\n\n  try {\n    const url = `${API_SERVER_EST}/${id}`;\n    const companyId = store.getState().companyProfile.profile.company_id;\n    const userRole = store.getState().client.user.data[6].user_type;\n    const body = JSON.stringify({\n      post_id: userRole === \"admin\" ? id.split(\"admin\")[0] : id,\n      company_id: userRole === \"admin\" ? id.split(\"admin\")[1] : companyId\n    }); //yield call( apiOpenRequest, url);\n\n    const result = axios.delete(url).finally(res => {});\n\n    if (userRole === \"admin\") {\n      yield put(filterJobs(result, true));\n    } else {\n      yield put(getAllAdsByStatus(0));\n      yield put(getAllAdsByStatus(1));\n      yield put(getAllAdsByStatus(2));\n    }\n  } catch (error) {\n    console.log(error);\n  }\n}\n\nfunction* saveAdvertisementAsDraft() {\n  yield put(saveAndPublishAdvertisement());\n}\n\nfunction* getApplicationDetailsByIdSaga(_ref9) {\n  let {\n    jobpostId,\n    id\n  } = _ref9;\n\n  try {\n    const url = `https://localhost:7262/jobsApplication/${id}`;\n    const result = yield call(apiManualRequest, url);\n    const resultParsed = result.data;\n\n    if (resultParsed) {\n      yield put(getApplicationDetailsByIdSuccess(resultParsed));\n      yield put(openAdToSeeAdInfo(jobpostId));\n    }\n  } catch (e) {\n    console.log(e.message);\n  }\n}\n\nfunction* updateApplicantStatusSaga(_ref10) {\n  let {\n    application_id,\n    company_id,\n    post_id,\n    email,\n    status\n  } = _ref10;\n\n  try {\n    const url = `${API_SERVER}/UpdateJobApplicationStatus`;\n    const body = JSON.stringify({\n      application_id,\n      company_id,\n      post_id,\n      email,\n      status\n    });\n    const result = yield call(apiManualPost, url, body);\n\n    if (result.data === \"Job Application's status updated successfully!\") {\n      //yield put(showSuccessSnackbar());\n      yield put(getApplicationDetailsById(application_id, company_id, post_id, email));\n      yield put(openAdToSeeAdInfo(post_id));\n    } else {\n      yield put(showFailedSnackbar());\n    }\n  } catch (e) {\n    console.log(e);\n  }\n}\n\nfunction* updateJobApplicationDetailsSaga(_ref11) {\n  let {\n    application_id,\n    company_id,\n    post_id,\n    email,\n    update\n  } = _ref11;\n\n  try {\n    let body;\n    const url = `${API_SERVER}/UpdateJobApplicationDetails`;\n    const formValues = getFormValues(\"applicantDetails\")(store.getState());\n    const loggedInUser = store.getState().client.user.data[1];\n    const {\n      application_notes,\n      interview_title,\n      interview_msg,\n      interview_date,\n      interview_time,\n      interview_place\n    } = formValues;\n\n    if (update === \"note\") {\n      body = JSON.stringify({\n        application_id,\n        company_id,\n        post_id,\n        email,\n        update,\n        application_notes\n      });\n    } else {\n      body = JSON.stringify({\n        application_id,\n        company_id,\n        post_id,\n        email,\n        update,\n        interview_title,\n        interview_msg,\n        interview_date,\n        interview_time,\n        interview_place,\n        loggedInUser\n      });\n    }\n\n    const result = yield call(apiManualPost, url, body);\n\n    if (result.data === \"Job Application's details updated successfully!\" || result.data === \"Interview reminder emails sent successfully!\") {\n      yield put(showSuccessSnackbar());\n      yield put(getApplicationDetailsById(application_id, company_id, post_id, email));\n      yield put(openAdToSeeAdInfo(post_id));\n    } else {\n      yield put(showFailedSnackbar());\n    } // console.log('result', result);\n\n  } catch (e) {\n    console.log(e);\n  }\n} // Dashboard chart\n\n\nfunction* getJobPostViewsByDateSaga() {\n  try {\n    const url = `${API_SERVER}/GetJobPostViewsByDate`;\n    const {\n      company_id\n    } = store.getState().advertisement.viewSelectedAd;\n    const {\n      post_id\n    } = store.getState().advertisement.viewSelectedAd;\n    const body = JSON.stringify({\n      company_id,\n      post_id\n    });\n    const result = yield call(apiManualPost, url, body);\n    const resultParsed = JSON.parse(result.data);\n\n    if (resultParsed) {\n      yield put(getJobPostViewsByDateSuccess(resultParsed));\n    }\n  } catch (e) {\n    console.log(e);\n  }\n} //DELETE APPLICATION SAGA\n\n\nfunction* deleteApplicationSaga() {\n  try {\n    const id = store.getState().jobs.jobApplicantsId;\n    const url = `https://localhost:7262/jobsApplication/${id}`;\n    const {\n      selectedAd\n    } = store.getState().advertisement;\n    const result = yield call(apiManualDelete, url);\n\n    if (result.data === \"Job application successfully deleted\") {\n      yield put(openAdToSeeAdInfo(selectedAd));\n    }\n  } catch (error) {\n    console.log(error);\n  }\n}\n\nfunction* changeRouteSaga() {\n  try {\n    const userRole = store.getState().client.user.data[6].user_type;\n\n    if (userRole === \"company\") {\n      browserHistory.push(\"/omat-ilmoitukseni\");\n    }\n\n    if (userRole === \"admin\") {\n      browserHistory.push(\"/lisapalvelu\");\n    }\n\n    yield put(null); //Yield statement for generator function\n  } catch (error) {\n    console.log(error);\n  }\n} // When navigateAdsFromMainMenu is dispatched, we want to ensure the page lands to 0 index.\n\n\nfunction* changePaginationSaga() {\n  yield put(changeAdvertPage({\n    selected: 0\n  }));\n}\n\nfunction* adminGetUserCompanyProfileSaga(_ref12) {\n  let {\n    id\n  } = _ref12;\n  const url = `${API_SERVER}/GetCompanyProfile`;\n\n  try {\n    const uuid = store.getState().client.user.data[2];\n    const body = JSON.stringify({\n      company_id: id,\n      uuid\n    });\n    const result = yield call(apiManualPost, url, body);\n    const resultParsed = JSON.parse(result.data)[0];\n    yield put(getCompanyProfileSuccess(resultParsed));\n  } catch (e) {\n    console.log(e);\n  }\n} // Automatic answers with email messages saga\n\n\nfunction* populateEmailMessageSaga(_ref13) {\n  var _store$getState$users;\n\n  let {\n    languages\n  } = _ref13;\n  const companyName = (_store$getState$users = store.getState().usersCompanyList.selectedCompany) === null || _store$getState$users === void 0 ? void 0 : _store$getState$users.company_name;\n  const storedLanguages = formValueSelector(\"vacancy\")(store.getState(), \"email_language\");\n  const isToSendAutoEmail = store.getState().advertisement.automaticEmailToggleBtn;\n\n  try {\n    if (isToSendAutoEmail) {\n      const messages = messageTemplate(companyName, languages ? languages : storedLanguages);\n      yield put(change(\"vacancy\", \"email_message\", messages));\n    }\n  } catch (e) {\n    console.log(e);\n  }\n}\n\nexport function* watchsaveAndPublishAdvertisementSaga() {\n  yield takeEvery(SAVE_AND_PUBLISH_ADVERTISEMENT, saveAndPublishAdvertisementSaga);\n}\nexport function* watchupdateAndPublishAdvertisementSaga() {\n  yield takeEvery(UPDATE_AND_PUBLISH_ADVERTISEMENT, updateAndPublishAdvertisementSaga);\n}\nexport function* watchSaveAdvertisementAsDraft() {\n  yield takeEvery(SAVE_ADVERTISEMENT_AS_DRAFT, saveAdvertisementAsDraft);\n}\nexport function* watchgetAllCampaignsSaga() {\n  yield takeEvery(GET_ALL_CAMPAIGNS, getAllCampaignsSaga);\n}\nexport function* watchgetAllJobCategorysSaga() {\n  yield takeEvery(GET_ALL_JOB_CATEGORY, getAllJobCategorySaga);\n} // export function* watchgetAllAdsByStatusSaga() {\n//   yield takeEvery(GET_ALL_ADS_BY_STATUS, getAllAdsByStatusSaga);\n// }\n\nexport function* watchgetJobPostByPostIdSaga() {\n  yield takeEvery(OPEN_AD_TO_SEE_AD_INFO, getJobPostByPostIdSaga);\n}\nexport function* watchdeleteJobPostSaga() {\n  yield takeEvery(DELETE_JOB_OFFER, deleteJobPostSaga);\n}\nexport function* watchupdateJobPostSaga() {\n  yield takeEvery(UPDATE_ADVERTISEMENT, updateJobPostSaga);\n}\nexport function* watchpopulateVacancyFormSaga() {\n  yield takeEvery(POPULATE_VACANCY_FORM, populateVacancyFormSaga);\n} // for ee\n\nexport function* watcheditVacancyFormSaga() {\n  yield takeEvery(EDIT_VACANCY_FORM, editVacancyFormSaga);\n}\nexport function* watchupdateCampaignSaga() {\n  yield takeEvery(SAVE_NEW_CAMPAIGN, updateCampaignSaga);\n}\nexport function* watchchangeJobPostStatusSaga() {\n  yield takeEvery(CHANGE_ACTIVE_POST_TO_INACTIVE, changeJobPostStatusSaga);\n}\nexport function* watchgetApplicationDetailsByIdSaga() {\n  yield takeEvery(GET_APPLICATION_DETAILS_BY_ID, getApplicationDetailsByIdSaga);\n}\nexport function* watchupdateApplicantStatusSaga() {\n  yield takeEvery(UPDATE_APPLICANT_STATUS, updateApplicantStatusSaga);\n}\nexport function* watchupdateJobApplicationDetailsSaga() {\n  yield takeEvery(UPDATE_JOB_APPLICATION_DETAILS, updateJobApplicationDetailsSaga);\n}\nexport function* watchgetJobPostViewsByDateSaga() {\n  yield takeEvery(GET_JOBPOST_VIEWS_BY_DATE, getJobPostViewsByDateSaga);\n}\nexport function* watchchangePaginationSaga() {\n  yield takeEvery(NAVIGATE_ADS_FROM_MAIN_MENU, changePaginationSaga);\n  yield takeEvery(OPEN_AD_TO_SEE_AD_INFO, changePaginationSaga);\n}\nexport function* watchEditInterviewDetailsSaga() {\n  yield takeEvery(EDIT_INTERVIEW_DETAILS, displayInitialDetails);\n}\nexport function* watchSaveMarketingDetailsSaga() {\n  yield takeEvery(SAVE_MARKETING_DETAILS, saveMarketingDetailsSaga);\n}\nexport function* watchdeleteApplicationSaga() {\n  yield takeEvery(DELETE_APPLICATION, deleteApplicationSaga);\n}\nexport function* watchChangeRouteSaga() {\n  yield takeEvery(CHANGE_ROUTE, changeRouteSaga);\n}\nexport function* watchAdminGetUserCompanyProfileSaga() {\n  yield takeEvery(ADMIN_GET_USER_PROFILE, adminGetUserCompanyProfileSaga);\n}\nexport function* watchPopulateEmailMessageSaga() {\n  yield takeEvery(POPULATE_EMAIL_MESSAGE, populateEmailMessageSaga);\n  yield takeEvery(AUTO_EMAIL_TO_APPLICANT, populateEmailMessageSaga);\n}","map":{"version":3,"names":["useState","takeEvery","put","call","getFormValues","change","formValueSelector","initialize","getFormInitialValues","touch","SAVE_AND_PUBLISH_ADVERTISEMENT","UPDATE_AND_PUBLISH_ADVERTISEMENT","API_SERVER","API_SERVER_EST","API_SERVER_EST_GET_ID","GET_ALL_CAMPAIGNS","OPEN_AD_TO_SEE_AD_INFO","UPDATE_ADVERTISEMENT","POPULATE_VACANCY_FORM","DELETE_ADVERTISEMENT","GET_ALL_JOB_CATEGORY","GET_ALL_ADS_BY_STATUS","SAVE_ADVERTISEMENT_AS_DRAFT","SAVE_NEW_CAMPAIGN","CHANGE_ACTIVE_POST_TO_INACTIVE","GET_APPLICATION_DETAILS_BY_ID","UPDATE_APPLICANT_STATUS","GET_JOBPOST_VIEWS_BY_DATE","NAVIGATE_ADS_FROM_MAIN_MENU","UPDATE_JOB_APPLICATION_DETAILS","EDIT_INTERVIEW_DETAILS","SAVE_MARKETING_DETAILS","DELETE_APPLICATION","CHANGE_ROUTE","ADMIN_GET_USER_PROFILE","HELP_SERVICE_FEE","SOS_SERVICE_FEE","POPULATE_EMAIL_MESSAGE","AUTO_EMAIL_TO_APPLICANT","EDIT_VACANCY_FORM","DELETE_JOB_OFFER","store","apiManualRequest","apiManualPost","apiOpenRequest","apiGetJobsOffers","apiManualDelete","filterObj","getAllCampaignsSuccess","saveAndPublishAdvertisementSuccess","getAllJobCategorySuccess","saveAndPublishAdvertisementFailed","getAllAdsByStatusSuccess","saveAndPublishAdvertisement","showSuccessSnackbar","showFailedSnackbar","openAdToSeeAdInfo","populateVacancyFormSuccess","updateAndPublishAdvertisementSuccess","getApplicationDetailsById","getApplicationDetailsByIdSuccess","getJobPostViewsByDateSuccess","changeAdvertPage","getAllAdsByStatus","filterJobs","hideSpinner","saveMarketingDetailsSuccess","closeDialog","registerPayment","sendInvoiceToTalous","getCompanyProfileSuccess","openAdToSeeAdInfoSuccess","getJobsOffers","getAllJobCategoryFromEstoniaSuccess","editVacancyForm","customTranslateCampaign","browserHistory","messageTemplate","axios","useSelector","getAllCampaignsSaga","url","result","resultParsed","JSON","parse","data","error","console","log","getAllJobCategorySaga","saveAndPublishAdvertisementSaga","body","response","parsedCompany","advertisement","client","companyProfile","getState","formValues","paymentInfoForm","uuid","user","userRole","user_type","payment_method","companyId","profile","company_id","companyDetails","parseInt","jobPostOwner","stringify","selectedCampaign","isSaveAdvertisementAsDraft","isToEdit","uploadedImage","marketingDetails","extraService","isDraft","refinedUploadedImage","name","replace","refinedFormValues","statusToUpdate","help","sos","type","selectedService","Array","isArray","image_document","campaign_type","status","extra_service","campaignLevel","base64","document_id","id","path","filename","filetype","includes_mktbudget","marketing_platform","more_budget","marketing_budget","post","catch","res","then","undefined","getJobPostByPostIdSaga","jobs","companyBusinessId","jobsList","populateVacancyFormSaga","campaigns","jobPostNumber","split","company_image","image_id","jobName","titleSpecification","workingTime","jobTags","job_location","jobDescription","is_agreement","dateOfApplication","is_email_notification","email","notice_frequency","campaign_id","urlToApplyJob","jobPostAddress","address","postCampaign","find","campaign","campaignDetails","e","editVacancyFormSaga","updateJobPostSaga","logo","updateAndPublishAdvertisementSaga","jobCategory","jobDuration","jobLocation","applicationUrl","lastApplicationDate","jobTitle","jobType","patch","updateCampaignSaga","post_id","campaignDate","campaignType","finally","changeJobPostStatusSaga","saveMarketingDetailsSaga","test","displayInitialDetails","deleteJobPostSaga","delete","saveAdvertisementAsDraft","getApplicationDetailsByIdSaga","jobpostId","message","updateApplicantStatusSaga","application_id","updateJobApplicationDetailsSaga","update","loggedInUser","application_notes","interview_title","interview_msg","interview_date","interview_time","interview_place","getJobPostViewsByDateSaga","viewSelectedAd","deleteApplicationSaga","jobApplicantsId","selectedAd","changeRouteSaga","push","changePaginationSaga","selected","adminGetUserCompanyProfileSaga","populateEmailMessageSaga","languages","companyName","usersCompanyList","selectedCompany","company_name","storedLanguages","isToSendAutoEmail","automaticEmailToggleBtn","messages","watchsaveAndPublishAdvertisementSaga","watchupdateAndPublishAdvertisementSaga","watchSaveAdvertisementAsDraft","watchgetAllCampaignsSaga","watchgetAllJobCategorysSaga","watchgetJobPostByPostIdSaga","watchdeleteJobPostSaga","watchupdateJobPostSaga","watchpopulateVacancyFormSaga","watcheditVacancyFormSaga","watchupdateCampaignSaga","watchchangeJobPostStatusSaga","watchgetApplicationDetailsByIdSaga","watchupdateApplicantStatusSaga","watchupdateJobApplicationDetailsSaga","watchgetJobPostViewsByDateSaga","watchchangePaginationSaga","watchEditInterviewDetailsSaga","watchSaveMarketingDetailsSaga","watchdeleteApplicationSaga","watchChangeRouteSaga","watchAdminGetUserCompanyProfileSaga","watchPopulateEmailMessageSaga"],"sources":["C:/Users/shuli/OneDrive/Desktop/Work/JobportalN/JobPortalEE/src/sagas/advertisements.saga.js"],"sourcesContent":["import { useState } from \"react\";\r\nimport { takeEvery, put, call } from \"redux-saga/effects\";\r\nimport {\r\n  getFormValues,\r\n  change,\r\n  formValueSelector,\r\n  initialize,\r\n  getFormInitialValues,\r\n  touch,\r\n} from \"redux-form\";\r\nimport {\r\n  SAVE_AND_PUBLISH_ADVERTISEMENT,\r\n  UPDATE_AND_PUBLISH_ADVERTISEMENT,\r\n  API_SERVER,\r\n  API_SERVER_EST,\r\n  API_SERVER_EST_GET_ID,\r\n  GET_ALL_CAMPAIGNS,\r\n  OPEN_AD_TO_SEE_AD_INFO,\r\n  UPDATE_ADVERTISEMENT,\r\n  POPULATE_VACANCY_FORM,\r\n  DELETE_ADVERTISEMENT,\r\n  GET_ALL_JOB_CATEGORY,\r\n  GET_ALL_ADS_BY_STATUS,\r\n  SAVE_ADVERTISEMENT_AS_DRAFT,\r\n  SAVE_NEW_CAMPAIGN,\r\n  CHANGE_ACTIVE_POST_TO_INACTIVE,\r\n  GET_APPLICATION_DETAILS_BY_ID,\r\n  UPDATE_APPLICANT_STATUS,\r\n  GET_JOBPOST_VIEWS_BY_DATE,\r\n  NAVIGATE_ADS_FROM_MAIN_MENU,\r\n  UPDATE_JOB_APPLICATION_DETAILS,\r\n  EDIT_INTERVIEW_DETAILS,\r\n  SAVE_MARKETING_DETAILS,\r\n  DELETE_APPLICATION,\r\n  CHANGE_ROUTE,\r\n  ADMIN_GET_USER_PROFILE,\r\n  HELP_SERVICE_FEE,\r\n  SOS_SERVICE_FEE,\r\n  POPULATE_EMAIL_MESSAGE,\r\n  AUTO_EMAIL_TO_APPLICANT,\r\n  EDIT_VACANCY_FORM,\r\n  DELETE_JOB_OFFER,\r\n} from \"../constants\";\r\nimport store from \"../store\";\r\nimport {\r\n  apiManualRequest,\r\n  apiManualPost,\r\n  apiOpenRequest,\r\n  apiGetJobsOffers,\r\n  apiManualDelete,\r\n} from \"../utils/request\";\r\nimport { filterObj } from \"../utils/wrappers\";\r\nimport {\r\n  getAllCampaignsSuccess,\r\n  saveAndPublishAdvertisementSuccess,\r\n  getAllJobCategorySuccess,\r\n  saveAndPublishAdvertisementFailed,\r\n  getAllAdsByStatusSuccess,\r\n  saveAndPublishAdvertisement,\r\n  showSuccessSnackbar,\r\n  showFailedSnackbar,\r\n  openAdToSeeAdInfo,\r\n  populateVacancyFormSuccess,\r\n  updateAndPublishAdvertisementSuccess,\r\n  getApplicationDetailsById,\r\n  getApplicationDetailsByIdSuccess,\r\n  getJobPostViewsByDateSuccess,\r\n  changeAdvertPage,\r\n  getAllAdsByStatus,\r\n  filterJobs,\r\n  hideSpinner,\r\n  saveMarketingDetailsSuccess,\r\n  closeDialog,\r\n  registerPayment,\r\n  sendInvoiceToTalous,\r\n  getCompanyProfileSuccess,\r\n  openAdToSeeAdInfoSuccess,\r\n  getJobsOffers,\r\n  getAllJobCategoryFromEstoniaSuccess,\r\n  editVacancyForm,\r\n} from \"../actions\";\r\nimport { customTranslateCampaign } from \"../utils/customTranslate\";\r\nimport browserHistory from \"../history\";\r\nimport { messageTemplate } from \"../components/companies/advertisements/automaticMessageToApplicants/messages\";\r\nimport axios from \"axios\";\r\nimport { useSelector } from \"react-redux\";\r\n\r\nfunction* getAllCampaignsSaga() {\r\n  try {\r\n    const url = `${API_SERVER}/GetCampaigns`;\r\n    const result = yield call(apiManualRequest, url);\r\n    const resultParsed = JSON.parse(result.data);\r\n    yield put(getAllCampaignsSuccess(resultParsed));\r\n  } catch (error) {\r\n    console.log(error);\r\n  }\r\n}\r\nfunction* getAllJobCategorySaga() {\r\n  try {\r\n    const url = `${API_SERVER}/GetJobCategories`;\r\n    const result = yield call(apiOpenRequest, url);\r\n    const resultParsed = JSON.parse(result.data);\r\n    yield put(getAllJobCategorySuccess(resultParsed));\r\n  } catch (error) {\r\n    console.log(error);\r\n  }\r\n}\r\n\r\n// function saveAndPublishAdvertisementEstonia(){\r\n//   try{\r\n//     let url;\r\n//     let body;\r\n//     let parsedCompany ={};\r\n\r\n//   }\r\n// }\r\n\r\nfunction* saveAndPublishAdvertisementSaga() {\r\n  try {\r\n    let url;\r\n    let body;\r\n    let response;\r\n    let parsedCompany = {};\r\n\r\n    const { advertisement, client, companyProfile } = store.getState();\r\n    const formValues = getFormValues(\"vacancy\")(store.getState());\r\n    const paymentInfoForm = getFormValues(\"paymentInfo\")(store.getState());\r\n    const uuid = client.user.data[2];\r\n    const userRole = client.user.data[6].user_type;\r\n    const payment_method = paymentInfoForm && paymentInfoForm.payment_method;\r\n    const companyId = companyProfile.profile.company_id;\r\n\r\n    if (!formValues.company_id) {\r\n      formValues.company_id = companyId; // Also sending company_id to add company specific post.\r\n    }\r\n\r\n    yield put(closeDialog());\r\n\r\n    if (userRole === \"admin\") {\r\n      const companyDetails = {\r\n        company_id: parseInt(formValues.company_id),\r\n        uuid,\r\n      };\r\n      const jobPostOwner = yield call(\r\n        apiManualPost,\r\n        `${API_SERVER}/GetCompanyProfile`,\r\n        JSON.stringify({ ...companyDetails })\r\n      );\r\n      parsedCompany = JSON.parse(jobPostOwner.data);\r\n    }\r\n\r\n    const {\r\n      selectedCampaign,\r\n      isSaveAdvertisementAsDraft,\r\n      isToEdit,\r\n      uploadedImage,\r\n      marketingDetails,\r\n      extraService,\r\n    } = advertisement;\r\n    const isDraft = isSaveAdvertisementAsDraft;\r\n    const refinedUploadedImage =\r\n      uploadedImage &&\r\n      uploadedImage.name &&\r\n      uploadedImage.name.replace(/\\s+\\(\\d+\\)/g, \"JP\"); // If stored filename has (int), dropzone doesn't understand the path..so changing such names before sending to db.\r\n    const refinedFormValues = filterObj(\"image_document\", formValues);\r\n\r\n    if (isToEdit) {\r\n      url = `${API_SERVER_EST}/updateJobOffer`;\r\n    } else {\r\n      url = `${API_SERVER_EST}/postJob`;\r\n    }\r\n\r\n    const statusToUpdate =\r\n      isDraft || extraService.help || extraService.sos\r\n        ? 0\r\n        : selectedCampaign.type === \"free\"\r\n        ? 1\r\n        : 4;\r\n\r\n    const selectedService = extraService.help\r\n      ? \"help\"\r\n      : extraService.sos\r\n      ? \"sos\"\r\n      : null;\r\n\r\n    // image_document array means, it already exists in db, no need to send while updating\r\n    if (Array.isArray(formValues.image_document) === true) {\r\n      body = {\r\n        ...refinedFormValues,\r\n        uuid,\r\n        campaign_type: selectedCampaign.type,\r\n        status: statusToUpdate,\r\n        extra_service: selectedService,\r\n      };\r\n    } else if (!uploadedImage.name) {\r\n      // no uploaded image means, no need to send any base64. Also, if there is an image stored in db..and we want to delete it, I am changing the formvalues of image_document in component\r\n      body = {\r\n        ...formValues,\r\n        uuid,\r\n        campaignLevel: selectedCampaign.type,\r\n        status: statusToUpdate,\r\n        extra_service: selectedService,\r\n      };\r\n    } else if (\r\n      uploadedImage.name &&\r\n      !Array.isArray(formValues.image_document)\r\n    ) {\r\n      const base64 = formValues.image_document;\r\n      body = {\r\n        ...formValues,\r\n        uuid,\r\n        campaignLevel: selectedCampaign.type,\r\n        status: statusToUpdate,\r\n        image_document: {\r\n          uuid,\r\n          document_id: uploadedImage.id,\r\n          path: \"\",\r\n          filename: refinedUploadedImage,\r\n          filetype: uploadedImage.type,\r\n          data: base64,\r\n        },\r\n        extra_service: selectedService,\r\n      };\r\n    }\r\n    if (selectedCampaign.includes_mktbudget) {\r\n      const {\r\n        marketing_platform,\r\n        more_budget,\r\n        marketing_budget,\r\n      } = marketingDetails;\r\n      body.marketing_platform = !!marketing_platform\r\n        ? marketing_platform\r\n        : null;\r\n      body.more_budget = !!more_budget ? more_budget : null;\r\n      body.marketing_budget = !!marketing_budget\r\n        ? parseInt(marketing_budget)\r\n        : 0;\r\n    }\r\n    // SAVING AND PUBLISHING JOBPOST\r\n    axios\r\n      .post(url, body)\r\n      .catch((res) => {\r\n        response = res;\r\n      })\r\n      .then((res) => {\r\n        response = res;\r\n      });\r\n    console.log(response);\r\n    // const result = yield call(apiManualPost, url,body);\r\n    if (response === 400 || response === undefined) {\r\n      yield put(saveAndPublishAdvertisementFailed());\r\n    }else{\r\n      yield put(saveAndPublishAdvertisementSuccess());\r\n    }\r\n    \r\n    // const parsedResult = JSON.parse(result.data);\r\n\r\n    // If publishing post, Generate invoice under the hood via Talousvirta API or online payment via NETS\r\n\r\n    // if (parsedResult) {\r\n    //   const { company_name, business_id, firstname, lastname, email, address, zip_code, city } =\r\n    //     userRole === 'admin' ? parsedCompany[0] : companyProfile.profile;\r\n    //   const jobTitle = formValues.job_title;\r\n    //   const postId = parsedResult[0].post_id;\r\n    //   const orderId = parsedResult[0].order_id;\r\n    //   const publishedPostStatus = parsedResult[0].job_post_status;\r\n    //   const description = `${jobTitle} | Kampanjapaketti - ${customTranslateCampaign(selectedCampaign.id)}`;\r\n    //   const mkt_description = `${jobTitle} | Lisätty markkinointiraha`;\r\n\r\n    //   const extra_service_description = `Aktivoitu lisäpalvelu | ${extraService.help ? 'HELP' : 'SOS'}`;\r\n\r\n    //   // If mkt budget is added with campaigns with mkt budget, i.e. 5th campaign for now.\r\n    //   let marketing_budget = 0;\r\n    //   if (selectedCampaign.includes_mktbudget && !!parsedResult[0].marketing_budget) {\r\n    //     marketing_budget = parsedResult[0].marketing_budget;\r\n    //   }\r\n\r\n    //   const extra_service_fee = extraService.help ? HELP_SERVICE_FEE : extraService.sos ? SOS_SERVICE_FEE : 0;\r\n\r\n    //   if (\r\n    //     (publishedPostStatus === 0 && extra_service_fee > 0) || // If help and sos are added as extra service\r\n    //     publishedPostStatus === 4 // If paid campaigns are selected, temporary placeholder status\r\n    //   ) {\r\n    //     const isExtraServiceAdded = publishedPostStatus === 0 && extra_service_fee > 0 ? true : false;\r\n    //     const extra_service_fee_with_vat = extra_service_fee * 1.24; // Total price for the extra service including vat\r\n\r\n    //     const amount = parsedResult[0].job_post_campaign_money;\r\n    //     const totalSum = (marketing_budget + amount) * 1.24;\r\n\r\n    //     const details = {\r\n    //       company_id: formValues.company_id,\r\n    //       company_name,\r\n    //       business_id,\r\n    //       firstname,\r\n    //       lastname,\r\n    //       email,\r\n    //       address,\r\n    //       zip_code,\r\n    //       city,\r\n    //       description: isExtraServiceAdded ? extra_service_description : description,\r\n    //       totalSum: isExtraServiceAdded ? extra_service_fee_with_vat : totalSum,\r\n    //       amount: isExtraServiceAdded ? extra_service_fee : amount,\r\n    //       post_id: postId,\r\n    //       order_id: orderId,\r\n    //       marketing_budget,\r\n    //       mkt_description,\r\n    //       selectedCampaign,\r\n    //     };\r\n\r\n    //     if (payment_method === 'invoice') {\r\n    //       yield put(sendInvoiceToTalous(details));\r\n    //     } else if (payment_method === 'online') {\r\n    //       \\ put(registerPayment(details));\r\n    //     }\r\n    //   }\r\n    //   // Post saved as a draft or free campaign or help/sos feature\r\n    //   //if (parsedResult[0].job_post_status !== 4)\r\n    //   else {\r\n    //     yield put(saveAndPublishAdvertisementSuccess());\r\n    //   }\r\n    // } else {\r\n    //   yield put(saveAndPublishAdvertisementFailed());\r\n    // }\r\n  } catch (error) {\r\n    console.log(error);\r\n    yield put(saveAndPublishAdvertisementFailed());\r\n  }\r\n}\r\n\r\nfunction* getJobPostByPostIdSaga({}) {\r\n  try {\r\n    const id = store.getState().jobs.id;\r\n    const url = `${API_SERVER_EST}/${id}`;\r\n    const companyBusinessId = store.getState().jobs.jobsList.companyBusinessId;\r\n    const userRole = store.getState().client.user.data[6].user_type;\r\n\r\n    const result = yield call(apiOpenRequest, url);\r\n    const resultParsed = result.data;\r\n    yield put(openAdToSeeAdInfoSuccess(resultParsed));\r\n  } catch (error) {\r\n    console.log(error);\r\n    yield put(hideSpinner());\r\n  }\r\n}\r\n\r\n// function* getAllAdsByStatusSaga({ status }) {\r\n//   try {\r\n//     const url = `${API_SERVER}/SearchJobPosts`;\r\n//     const { client, usersCompanyList, companyProfile } = store.getState();\r\n//     const uuid = client.user.data[2];\r\n//     const roleId = client.user.data[5];\r\n//     let selectedCompanyId;\r\n//     selectedCompanyId = usersCompanyList.selectedCompany.company_id;\r\n//     const assignedCompanyId = client.user.data[6].company_id;\r\n\r\n//     if (!selectedCompanyId) {\r\n//       // For first time registered users, client company_id is null since user profile is not updated\r\n//       selectedCompanyId = companyProfile.profile.company_id;\r\n//     }\r\n\r\n//     const company_id = roleId === 0 ? selectedCompanyId : assignedCompanyId; //super user with many companies\r\n//     const body = JSON.stringify({\r\n//       status,\r\n//       uuid,\r\n//       company_id,\r\n//     });\r\n\r\n//     const result = yield call(apiManualPost, url, body);\r\n//     const resultParsed = JSON.parse(result.data);\r\n//     yield put(getAllAdsByStatusSuccess(status, resultParsed));\r\n//   } catch (error) {\r\n//     console.log(error);\r\n//   }\r\n// }\r\n// Populating vacancy form when editing or copying\r\nfunction* populateVacancyFormSaga({ id, isToEdit }) {\r\n  try {\r\n    const url = `${API_SERVER_EST}/${id}`;\r\n    //const companyBusinessId = store.getState().jobs.companyBusinessId;\r\n    const campaigns = store.getState().advertisement.campaigns;\r\n    const userRole = store.getState().client.user.data[6].user_type;\r\n\r\n    const body = JSON.stringify({\r\n      jobPostNumber: userRole === \"admin\" ? id.split(\"admin\")[0] : id,\r\n      //companyBusinessId: userRole === 'admin' ? id.split('admin')[1] : companyBusinessId,\r\n    });\r\n    const result = yield call(apiManualRequest, url);\r\n    const resultParsed = result.data;\r\n    console.log(resultParsed);\r\n    // console.log('resultParsed', resultParsed);\r\n    // If we are populating from Draft Component, we are editing--> call UpdateJobPost API, it needs company_id && post_id which is being sent along with the vacancy form!\r\n\r\n    const {\r\n      jobPostNumber,\r\n      //companyBusinessId,\r\n      company_image,\r\n      image_id,\r\n      jobName,\r\n      titleSpecification,\r\n      workingTime,\r\n      jobTags,\r\n      job_location,\r\n      jobDescription,\r\n      is_agreement,\r\n      dateOfApplication,\r\n      is_email_notification,\r\n      email,\r\n      notice_frequency,\r\n      campaign_id,\r\n      marketing_platform,\r\n      more_budget,\r\n      marketing_budget,\r\n      urlToApplyJob,\r\n    } = resultParsed;\r\n\r\n    if (isToEdit) {\r\n      yield put(change(\"vacancy\", \"jobPostNumber\", jobPostNumber));\r\n      // yield put(change('vacancy', 'company_id', company_id));\r\n      if (company_image) {\r\n        yield put(change(\"vacancy\", \"image_document\", company_image));\r\n        yield put(change(\"vacancy\", \"image_id\", image_id));\r\n      }\r\n    }\r\n    yield put(change(\"vacancy\", \"jobTitle\", jobName));\r\n    yield put(change(\"vacancy\", \"jobType\", titleSpecification));\r\n    yield put(change(\"vacancy\", \"jobDuration\", workingTime));\r\n    yield put(change(\"vacancy\", \"jobCategory\", jobTags));\r\n    yield put(\r\n      change(\"vacancy\", \"jobLocation\", resultParsed.jobPostAddress.address)\r\n    );\r\n    yield put(change(\"vacancy\", \"jobDescription\", jobDescription));\r\n    yield put(change(\"vacancy\", \"is_agreement\", true));\r\n    yield put(change(\"vacancy\", \"applicationUrl\", urlToApplyJob));\r\n\r\n    yield put(change(\"vacancy\", \"lastApplicationDate\", dateOfApplication));\r\n    yield put(\r\n      change(\"vacancy\", \"is_email_notification\", is_email_notification)\r\n    );\r\n    yield put(change(\"vacancy\", \"email\", email));\r\n    yield put(change(\"vacancy\", \"notice_frequency\", notice_frequency));\r\n\r\n    const postCampaign = campaigns.find(\r\n      (campaign) => campaign.id === campaign_id\r\n    );\r\n\r\n    const campaignDetails = {\r\n      postCampaign,\r\n      marketing_platform,\r\n      more_budget,\r\n      marketing_budget,\r\n    };\r\n\r\n    // yield put(populateVacancyFormSuccess(campaignDetails, isToEdit));\r\n  } catch (e) {\r\n    console.log(e);\r\n  }\r\n}\r\n\r\nfunction* editVacancyFormSaga({ id, isToEdit }) {\r\n  try {\r\n    const url = `${API_SERVER_EST}/${id}`;\r\n    const campaigns = store.getState().advertisement.campaigns;\r\n    const userRole = store.getState().client.user.data[6].user_type;\r\n\r\n    const body = JSON.stringify({\r\n      jobPostNumber: userRole === \"admin\" ? id.split(\"admin\")[0] : id,\r\n    });\r\n    const result = yield call(apiManualRequest, url);\r\n    const resultParsed = result.data;\r\n    console.log(\"saga works\");\r\n    // If we are populating from Draft Component, we are editing--> call UpdateJobPost API, it needs company_id && post_id which is being sent along with the vacancy form!\r\n\r\n    const {\r\n      jobPostNumber,\r\n      company_image,\r\n      image_id,\r\n      jobName,\r\n      titleSpecification,\r\n      workingTime,\r\n      jobTags,\r\n      job_location,\r\n      jobDescription,\r\n      is_agreement,\r\n      dateOfApplication,\r\n      is_email_notification,\r\n      email,\r\n      notice_frequency,\r\n      campaign_id,\r\n      marketing_platform,\r\n      more_budget,\r\n      marketing_budget,\r\n      urlToApplyJob,\r\n    } = resultParsed;\r\n\r\n    if (isToEdit) {\r\n      yield put(change(\"editVacancy\", \"jobPostNumber\", jobPostNumber));\r\n      // yield put(change('vacancy', 'company_id', company_id));\r\n      if (company_image) {\r\n        yield put(change(\"editVacancy\", \"image_document\", company_image));\r\n        yield put(change(\"editVacancy\", \"image_id\", image_id));\r\n      }\r\n    }\r\n    yield put(change(\"editVacancy\", \"jobTitle\", jobName));\r\n    yield put(change(\"editVacancy\", \"jobType\", titleSpecification));\r\n    yield put(change(\"editVacancy\", \"jobDuration\", workingTime));\r\n    yield put(change(\"editVacancy\", \"jobCategory\", jobTags));\r\n    // yield put(change('editVacancy', 'jobLocation', resultParsed.jobPostAddress.address));\r\n    yield put(change(\"editVacancy\", \"jobDescription\", jobDescription));\r\n    yield put(change(\"editVacancy\", \"is_agreement\", true));\r\n    yield put(change(\"editVacancy\", \"applicationUrl\", urlToApplyJob));\r\n\r\n    yield put(change(\"editVacancy\", \"lastApplicationDate\", dateOfApplication));\r\n    yield put(\r\n      change(\"editVacancy\", \"is_email_notification\", is_email_notification)\r\n    );\r\n    yield put(change(\"editVacancy\", \"email\", email));\r\n    yield put(change(\"editVacancy\", \"notice_frequency\", notice_frequency));\r\n\r\n    const postCampaign = campaigns.find(\r\n      (campaign) => campaign.id === campaign_id\r\n    );\r\n\r\n    const campaignDetails = {\r\n      postCampaign,\r\n      marketing_platform,\r\n      more_budget,\r\n      marketing_budget,\r\n    };\r\n\r\n    yield put(populateVacancyFormSuccess(campaignDetails, isToEdit));\r\n  } catch (e) {\r\n    console.log(e);\r\n  }\r\n}\r\n// Update advertisement - editAdvertForm is open/ Campaigns are not shown here.\r\n\r\nfunction* updateJobPostSaga({ isToEdit, id }) {\r\n  try {\r\n    const url = `${API_SERVER_EST}/${id}`;\r\n    const result = yield call(apiManualRequest, url);\r\n    const resultParsed = result.data;\r\n\r\n    const {\r\n      jobPostNumber,\r\n      logo,\r\n      image_id,\r\n      jobName,\r\n      companyBusinessId,\r\n      titleSpecification,\r\n      workingTime,\r\n      jobTags,\r\n      job_location,\r\n      jobDescription,\r\n      is_agreement,\r\n      dateOfApplication,\r\n      is_email_notification,\r\n      email,\r\n      notice_frequency,\r\n      campaign_id,\r\n      marketing_platform,\r\n      more_budget,\r\n      marketing_budget,\r\n      urlToApplyJob,\r\n    } = resultParsed;\r\n\r\n    if (isToEdit) {\r\n      yield put(change(\"editVacancy\", \"jobPostNumber\", jobPostNumber));\r\n      yield put(change(\"vacancy\", \"companyBusinessId\", companyBusinessId));\r\n      if (logo) {\r\n        yield put(change(\"editVacancy\", \"image_document\", logo));\r\n        yield put(change(\"editVacancy\", \"image_id\", image_id));\r\n      }\r\n    }\r\n    yield put(change(\"editVacancy\", \"jobName\", jobName));\r\n    yield put(change(\"editVacancy\", \"titleSpecification\", titleSpecification));\r\n    yield put(change(\"editVacancy\", \"jobDuration\", workingTime));\r\n    yield put(change(\"editVacancy\", \"jobCategory\", jobTags));\r\n    yield put(\r\n      change(\"editVacancy\", \"jobLocation\", resultParsed.jobPostAddress.address)\r\n    );\r\n    yield put(change(\"editVacancy\", \"jobDescription\", jobDescription));\r\n    yield put(change(\"editVacancy\", \"is_agreement\", true));\r\n    yield put(change(\"editVacancy\", \"applicationUrl\", urlToApplyJob));\r\n\r\n    yield put(change(\"editVacancy\", \"lastApplicationDate\", dateOfApplication));\r\n    yield put(\r\n      change(\"editVacancy\", \"is_email_notification\", is_email_notification)\r\n    );\r\n    yield put(change(\"editVacancy\", \"email\", email));\r\n    yield put(change(\"editVacancy\", \"notice_frequency\", notice_frequency));\r\n  } catch (error) {\r\n    console.log(error);\r\n  }\r\n}\r\n\r\nfunction* updateAndPublishAdvertisementSaga() {\r\n  try {\r\n    const url = `https://localhost:7262/updateJobOffer`;\r\n    const id = store.getState().jobs.id;\r\n    const campaignLevel = store.getState().advertisement.campaigns[0].type;\r\n    const {\r\n      jobName,\r\n      jobCategory,\r\n      titleSpecification,\r\n      jobDuration,\r\n      jobLocation,\r\n      applicationUrl,\r\n      lastApplicationDate,\r\n      jobDescription,\r\n    } = getFormValues(\"editVacancy\")(store.getState());\r\n    let body = {\r\n      id,\r\n      jobTitle: jobName,\r\n      jobCategory,\r\n      jobType: titleSpecification,\r\n      jobDuration,\r\n      jobLocation,\r\n      applicationUrl,\r\n      lastApplicationDate,\r\n      jobDescription,\r\n      campaignLevel,\r\n    };\r\n\r\n    const result = axios\r\n      .patch(url, body)\r\n      .then((res) => {\r\n        updateAndPublishAdvertisementSuccess();\r\n      })\r\n      .catch(() => {\r\n        saveAndPublishAdvertisementFailed();\r\n      });\r\n  } catch (e) {\r\n    console.log(e);\r\n  }\r\n}\r\n\r\n// Update campaign\r\nfunction* updateCampaignSaga({ id }) {\r\n  try {\r\n    yield put(closeDialog());\r\n\r\n    const { advertisement, client, companyProfile, jobs } = store.getState();\r\n    const paymentInfoForm = getFormValues(\"paymentInfo\")(store.getState());\r\n    const payment_method = paymentInfoForm && paymentInfoForm.payment_method;\r\n\r\n    // Upgrade campaign\r\n    const url = `https://localhost:7262/updateJobOfferCampaignType`;\r\n    const uuid = store.getState().client.user.data[2];\r\n    const { type, includes_mktbudget } = advertisement.selectedCampaign;\r\n    const campaign_id = advertisement.selectedCampaign.id;\r\n    const userRole = client.user.data[6].user_type;\r\n    const { id } = jobs;\r\n    const post_id = userRole === \"admin\" ? id.split(\"admin\")[0] : id;\r\n    const companyId =\r\n      userRole === \"admin\"\r\n        ? id.split(\"admin\")[1]\r\n        : companyProfile.profile.company_id;\r\n    const campaignDate = formValueSelector(\"campaign\")(\r\n      store.getState(),\r\n      \"due_date\"\r\n    );\r\n    let parsedCompany = {};\r\n\r\n    const body = {\r\n      campaignType: type,\r\n      //uuid,\r\n      id,\r\n      //company_id: companyId,\r\n      campaignDate,\r\n    };\r\n\r\n    if (includes_mktbudget) {\r\n      const {\r\n        marketing_platform,\r\n        more_budget,\r\n        marketing_budget,\r\n      } = advertisement.marketingDetails;\r\n\r\n      body.marketing_platform = !!marketing_platform\r\n        ? marketing_platform\r\n        : null;\r\n      body.more_budget = !!more_budget ? more_budget : null;\r\n      body.marketing_budget = !!marketing_budget\r\n        ? parseInt(marketing_budget)\r\n        : 0;\r\n    }\r\n\r\n    // const result = yield call(apiManualPost, url, JSON.stringify({ ...body }));\r\n    const result = axios.patch(url, body).finally((res) => {\r\n      showSuccessSnackbar(res);\r\n    });\r\n    const resultParsed = JSON.parse(result.data);\r\n\r\n    // if (resultParsed) {\r\n    //   //If admin is upgrading post or updating jobpost on behalf of companies:\r\n    //   if (userRole === 'admin') {\r\n    //     const body2 = {\r\n    //       company_id: parseInt(companyId),\r\n    //       uuid,\r\n    //     };\r\n    //     const jobPostOwner = yield call(apiManualPost, `${API_SERVER}/GetCompanyProfile`, JSON.stringify({ ...body2 }));\r\n    //     parsedCompany = JSON.parse(jobPostOwner.data);\r\n    //   }\r\n\r\n    //   const { company_name, business_id, firstname, lastname, email, address, zip_code, city } =\r\n    //     userRole === 'admin' ? parsedCompany[0] : companyProfile.profile;\r\n    //   const jobTitle = advertisement.viewSelectedAd.job_title;\r\n    //   const description = `${jobTitle} | Kampanjapaketti - ${customTranslateCampaign(campaign_id)}`;\r\n    //   const mkt_description = `${jobTitle} | Lisätty markkinointiraha`;\r\n\r\n    //   const orderId = resultParsed[0].order_id;\r\n    //   const previousCampaignPrice = resultParsed[0].prev_campaign_money;\r\n    //   const newCampaignPrice = resultParsed[0].new_campaign_money;\r\n    //   const amount = newCampaignPrice - previousCampaignPrice;\r\n\r\n    //   // If mkt budget is added.\r\n    //   let marketing_budget = 0;\r\n    //   const newMarketingBudget = resultParsed[0].marketing_budget;\r\n    //   if (includes_mktbudget && newMarketingBudget > 0) {\r\n    //     marketing_budget = newMarketingBudget;\r\n    //   }\r\n    //   const totalSum = (marketing_budget + amount) * 1.24;\r\n\r\n    //   // If new and more expensive campaign price OR more marketing budget, generate invoice\r\n\r\n    //   const details = {\r\n    //     company_id: companyId,\r\n    //     company_name,\r\n    //     business_id,\r\n    //     firstname,\r\n    //     lastname,\r\n    //     email,\r\n    //     address,\r\n    //     zip_code,\r\n    //     city,\r\n    //     description,\r\n    //     totalSum,\r\n    //     amount,\r\n    //     post_id: parseInt(post_id),\r\n    //     order_id: orderId,\r\n    //     marketing_budget,\r\n    //     mkt_description,\r\n    //     isSameCampaign: amount === 0 ? true : false, // Meaning same campaign but new budget\r\n    //     selectedCampaign: advertisement.selectedCampaign,\r\n    //     postIdToFetch: id,\r\n    //   };\r\n    //   if (payment_method === 'invoice') {\r\n    //     yield put(sendInvoiceToTalous(details));\r\n    //   } else if (payment_method === 'online') {\r\n    //     yield put(registerPayment(details));\r\n    //   } else {\r\n    //     yield put(showSuccessSnackbar());\r\n    //   }\r\n    // }\r\n  } catch (error) {\r\n    console.log(error);\r\n    yield put(showFailedSnackbar());\r\n  }\r\n}\r\n\r\nfunction* changeJobPostStatusSaga({ id }) {\r\n  try {\r\n    const url = `${API_SERVER}/UpdateJobPostStatus`;\r\n    const { company_id } = store.getState().companyProfile.profile;\r\n    const post_id = id;\r\n    const userRole = store.getState().client.user.data[6].user_type;\r\n\r\n    const body = JSON.stringify({\r\n      post_id: userRole === \"admin\" ? id.split(\"admin\")[0] : post_id, // For admins, we need to get company id from post itself\r\n      company_id: userRole === \"admin\" ? id.split(\"admin\")[1] : company_id,\r\n      status: 2,\r\n    });\r\n    const result = yield call(apiManualPost, url, body);\r\n    if (result.data === \"Job Post Status updated successfully!\") {\r\n      yield put(showSuccessSnackbar());\r\n      yield put(openAdToSeeAdInfo(id));\r\n    } else {\r\n      yield put(showFailedSnackbar());\r\n    }\r\n  } catch (e) {\r\n    console.log(e);\r\n  }\r\n}\r\nfunction* saveMarketingDetailsSaga() {\r\n  try {\r\n    const formValues = getFormValues(\"marketingDetails\")(store.getState());\r\n    const { marketing_platform, more_budget, marketing_budget } = formValues;\r\n    if (!marketing_platform) {\r\n      yield put(touch(\"marketingDetails\", \"marketing_platform\"));\r\n      return;\r\n    }\r\n    if (!more_budget) {\r\n      yield put(touch(\"marketingDetails\", \"more_budget\"));\r\n      return;\r\n    }\r\n    if (more_budget === \"yes\") {\r\n      if (!marketing_budget) {\r\n        yield put(touch(\"marketingDetails\", \"marketing_budget\"));\r\n        return;\r\n      }\r\n    }\r\n    if (\r\n      marketing_budget &&\r\n      (parseInt(marketing_budget) < 1 || !/^[0-9]+$/.test(marketing_budget))\r\n    ) {\r\n      return;\r\n    }\r\n    yield put(saveMarketingDetailsSuccess(formValues));\r\n    yield put(closeDialog());\r\n  } catch (e) {\r\n    console.log(e);\r\n  }\r\n}\r\n\r\nfunction* displayInitialDetails({ isToEdit }) {\r\n  try {\r\n    if (!isToEdit)\r\n      yield put(\r\n        initialize(\r\n          \"applicantDetails\",\r\n          getFormInitialValues(\"applicantDetails\")(store.getState())\r\n        )\r\n      );\r\n  } catch (e) {\r\n    console.log(e);\r\n  }\r\n}\r\nfunction* deleteJobPostSaga({ id }) {\r\n  try {\r\n    const url = `${API_SERVER_EST}/${id}`;\r\n    const companyId = store.getState().companyProfile.profile.company_id;\r\n    const userRole = store.getState().client.user.data[6].user_type;\r\n\r\n    const body = JSON.stringify({\r\n      post_id: userRole === \"admin\" ? id.split(\"admin\")[0] : id,\r\n      company_id: userRole === \"admin\" ? id.split(\"admin\")[1] : companyId,\r\n    });\r\n    //yield call( apiOpenRequest, url);\r\n    const result = axios.delete(url).finally((res) => {});\r\n    if (userRole === \"admin\") {\r\n      yield put(filterJobs(result, true));\r\n    } else {\r\n      yield put(getAllAdsByStatus(0));\r\n      yield put(getAllAdsByStatus(1));\r\n      yield put(getAllAdsByStatus(2));\r\n    }\r\n  } catch (error) {\r\n    console.log(error);\r\n  }\r\n}\r\n\r\nfunction* saveAdvertisementAsDraft() {\r\n  yield put(saveAndPublishAdvertisement());\r\n}\r\n\r\nfunction* getApplicationDetailsByIdSaga({ jobpostId, id }) {\r\n  try {\r\n    const url = `https://localhost:7262/jobsApplication/${id}`;\r\n\r\n    const result = yield call(apiManualRequest, url);\r\n    const resultParsed = result.data;\r\n\r\n    if (resultParsed) {\r\n      yield put(getApplicationDetailsByIdSuccess(resultParsed));\r\n      yield put(openAdToSeeAdInfo(jobpostId));\r\n    }\r\n  } catch (e) {\r\n    console.log(e.message);\r\n  }\r\n}\r\n\r\nfunction* updateApplicantStatusSaga({\r\n  application_id,\r\n  company_id,\r\n  post_id,\r\n  email,\r\n  status,\r\n}) {\r\n  try {\r\n    const url = `${API_SERVER}/UpdateJobApplicationStatus`;\r\n    const body = JSON.stringify({\r\n      application_id,\r\n      company_id,\r\n      post_id,\r\n      email,\r\n      status,\r\n    });\r\n    const result = yield call(apiManualPost, url, body);\r\n    if (result.data === \"Job Application's status updated successfully!\") {\r\n      //yield put(showSuccessSnackbar());\r\n      yield put(\r\n        getApplicationDetailsById(application_id, company_id, post_id, email)\r\n      );\r\n      yield put(openAdToSeeAdInfo(post_id));\r\n    } else {\r\n      yield put(showFailedSnackbar());\r\n    }\r\n  } catch (e) {\r\n    console.log(e);\r\n  }\r\n}\r\nfunction* updateJobApplicationDetailsSaga({\r\n  application_id,\r\n  company_id,\r\n  post_id,\r\n  email,\r\n  update,\r\n}) {\r\n  try {\r\n    let body;\r\n    const url = `${API_SERVER}/UpdateJobApplicationDetails`;\r\n    const formValues = getFormValues(\"applicantDetails\")(store.getState());\r\n    const loggedInUser = store.getState().client.user.data[1];\r\n    const {\r\n      application_notes,\r\n      interview_title,\r\n      interview_msg,\r\n      interview_date,\r\n      interview_time,\r\n      interview_place,\r\n    } = formValues;\r\n\r\n    if (update === \"note\") {\r\n      body = JSON.stringify({\r\n        application_id,\r\n        company_id,\r\n        post_id,\r\n        email,\r\n        update,\r\n        application_notes,\r\n      });\r\n    } else {\r\n      body = JSON.stringify({\r\n        application_id,\r\n        company_id,\r\n        post_id,\r\n        email,\r\n        update,\r\n        interview_title,\r\n        interview_msg,\r\n        interview_date,\r\n        interview_time,\r\n        interview_place,\r\n        loggedInUser,\r\n      });\r\n    }\r\n    const result = yield call(apiManualPost, url, body);\r\n    if (\r\n      result.data === \"Job Application's details updated successfully!\" ||\r\n      result.data === \"Interview reminder emails sent successfully!\"\r\n    ) {\r\n      yield put(showSuccessSnackbar());\r\n      yield put(\r\n        getApplicationDetailsById(application_id, company_id, post_id, email)\r\n      );\r\n      yield put(openAdToSeeAdInfo(post_id));\r\n    } else {\r\n      yield put(showFailedSnackbar());\r\n    }\r\n    // console.log('result', result);\r\n  } catch (e) {\r\n    console.log(e);\r\n  }\r\n}\r\n\r\n// Dashboard chart\r\nfunction* getJobPostViewsByDateSaga() {\r\n  try {\r\n    const url = `${API_SERVER}/GetJobPostViewsByDate`;\r\n    const { company_id } = store.getState().advertisement.viewSelectedAd;\r\n    const { post_id } = store.getState().advertisement.viewSelectedAd;\r\n    const body = JSON.stringify({\r\n      company_id,\r\n      post_id,\r\n    });\r\n    const result = yield call(apiManualPost, url, body);\r\n    const resultParsed = JSON.parse(result.data);\r\n    if (resultParsed) {\r\n      yield put(getJobPostViewsByDateSuccess(resultParsed));\r\n    }\r\n  } catch (e) {\r\n    console.log(e);\r\n  }\r\n}\r\n\r\n//DELETE APPLICATION SAGA\r\nfunction* deleteApplicationSaga() {\r\n  try {\r\n    const id = store.getState().jobs.jobApplicantsId;\r\n    const url = `https://localhost:7262/jobsApplication/${id}`;\r\n    const { selectedAd } = store.getState().advertisement;\r\n\r\n    const result = yield call(apiManualDelete, url);\r\n\r\n    if (result.data === \"Job application successfully deleted\") {\r\n      yield put(openAdToSeeAdInfo(selectedAd));\r\n    }\r\n  } catch (error) {\r\n    console.log(error);\r\n  }\r\n}\r\n\r\nfunction* changeRouteSaga() {\r\n  try {\r\n    const userRole = store.getState().client.user.data[6].user_type;\r\n\r\n    if (userRole === \"company\") {\r\n      browserHistory.push(\"/omat-ilmoitukseni\");\r\n    }\r\n    if (userRole === \"admin\") {\r\n      browserHistory.push(\"/lisapalvelu\");\r\n    }\r\n    yield put(null); //Yield statement for generator function\r\n  } catch (error) {\r\n    console.log(error);\r\n  }\r\n}\r\n\r\n// When navigateAdsFromMainMenu is dispatched, we want to ensure the page lands to 0 index.\r\nfunction* changePaginationSaga() {\r\n  yield put(changeAdvertPage({ selected: 0 }));\r\n}\r\n\r\nfunction* adminGetUserCompanyProfileSaga({ id }) {\r\n  const url = `${API_SERVER}/GetCompanyProfile`;\r\n\r\n  try {\r\n    const uuid = store.getState().client.user.data[2];\r\n    const body = JSON.stringify({ company_id: id, uuid });\r\n    const result = yield call(apiManualPost, url, body);\r\n    const resultParsed = JSON.parse(result.data)[0];\r\n    yield put(getCompanyProfileSuccess(resultParsed));\r\n  } catch (e) {\r\n    console.log(e);\r\n  }\r\n}\r\n\r\n// Automatic answers with email messages saga\r\nfunction* populateEmailMessageSaga({ languages }) {\r\n  const companyName = store.getState().usersCompanyList.selectedCompany\r\n    ?.company_name;\r\n  const storedLanguages = formValueSelector(\"vacancy\")(\r\n    store.getState(),\r\n    \"email_language\"\r\n  );\r\n\r\n  const isToSendAutoEmail = store.getState().advertisement\r\n    .automaticEmailToggleBtn;\r\n\r\n  try {\r\n    if (isToSendAutoEmail) {\r\n      const messages = messageTemplate(\r\n        companyName,\r\n        languages ? languages : storedLanguages\r\n      );\r\n      yield put(change(\"vacancy\", \"email_message\", messages));\r\n    }\r\n  } catch (e) {\r\n    console.log(e);\r\n  }\r\n}\r\n\r\nexport function* watchsaveAndPublishAdvertisementSaga() {\r\n  yield takeEvery(\r\n    SAVE_AND_PUBLISH_ADVERTISEMENT,\r\n    saveAndPublishAdvertisementSaga\r\n  );\r\n}\r\nexport function* watchupdateAndPublishAdvertisementSaga() {\r\n  yield takeEvery(\r\n    UPDATE_AND_PUBLISH_ADVERTISEMENT,\r\n    updateAndPublishAdvertisementSaga\r\n  );\r\n}\r\nexport function* watchSaveAdvertisementAsDraft() {\r\n  yield takeEvery(SAVE_ADVERTISEMENT_AS_DRAFT, saveAdvertisementAsDraft);\r\n}\r\n\r\nexport function* watchgetAllCampaignsSaga() {\r\n  yield takeEvery(GET_ALL_CAMPAIGNS, getAllCampaignsSaga);\r\n}\r\n\r\nexport function* watchgetAllJobCategorysSaga() {\r\n  yield takeEvery(GET_ALL_JOB_CATEGORY, getAllJobCategorySaga);\r\n}\r\n\r\n// export function* watchgetAllAdsByStatusSaga() {\r\n//   yield takeEvery(GET_ALL_ADS_BY_STATUS, getAllAdsByStatusSaga);\r\n// }\r\nexport function* watchgetJobPostByPostIdSaga() {\r\n  yield takeEvery(OPEN_AD_TO_SEE_AD_INFO, getJobPostByPostIdSaga);\r\n}\r\nexport function* watchdeleteJobPostSaga() {\r\n  yield takeEvery(DELETE_JOB_OFFER, deleteJobPostSaga);\r\n}\r\nexport function* watchupdateJobPostSaga() {\r\n  yield takeEvery(UPDATE_ADVERTISEMENT, updateJobPostSaga);\r\n}\r\nexport function* watchpopulateVacancyFormSaga() {\r\n  yield takeEvery(POPULATE_VACANCY_FORM, populateVacancyFormSaga);\r\n}\r\n// for ee\r\nexport function* watcheditVacancyFormSaga() {\r\n  yield takeEvery(EDIT_VACANCY_FORM, editVacancyFormSaga);\r\n}\r\nexport function* watchupdateCampaignSaga() {\r\n  yield takeEvery(SAVE_NEW_CAMPAIGN, updateCampaignSaga);\r\n}\r\nexport function* watchchangeJobPostStatusSaga() {\r\n  yield takeEvery(CHANGE_ACTIVE_POST_TO_INACTIVE, changeJobPostStatusSaga);\r\n}\r\nexport function* watchgetApplicationDetailsByIdSaga() {\r\n  yield takeEvery(GET_APPLICATION_DETAILS_BY_ID, getApplicationDetailsByIdSaga);\r\n}\r\nexport function* watchupdateApplicantStatusSaga() {\r\n  yield takeEvery(UPDATE_APPLICANT_STATUS, updateApplicantStatusSaga);\r\n}\r\nexport function* watchupdateJobApplicationDetailsSaga() {\r\n  yield takeEvery(\r\n    UPDATE_JOB_APPLICATION_DETAILS,\r\n    updateJobApplicationDetailsSaga\r\n  );\r\n}\r\nexport function* watchgetJobPostViewsByDateSaga() {\r\n  yield takeEvery(GET_JOBPOST_VIEWS_BY_DATE, getJobPostViewsByDateSaga);\r\n}\r\nexport function* watchchangePaginationSaga() {\r\n  yield takeEvery(NAVIGATE_ADS_FROM_MAIN_MENU, changePaginationSaga);\r\n  yield takeEvery(OPEN_AD_TO_SEE_AD_INFO, changePaginationSaga);\r\n}\r\n\r\nexport function* watchEditInterviewDetailsSaga() {\r\n  yield takeEvery(EDIT_INTERVIEW_DETAILS, displayInitialDetails);\r\n}\r\nexport function* watchSaveMarketingDetailsSaga() {\r\n  yield takeEvery(SAVE_MARKETING_DETAILS, saveMarketingDetailsSaga);\r\n}\r\n\r\nexport function* watchdeleteApplicationSaga() {\r\n  yield takeEvery(DELETE_APPLICATION, deleteApplicationSaga);\r\n}\r\n\r\nexport function* watchChangeRouteSaga() {\r\n  yield takeEvery(CHANGE_ROUTE, changeRouteSaga);\r\n}\r\n\r\nexport function* watchAdminGetUserCompanyProfileSaga() {\r\n  yield takeEvery(ADMIN_GET_USER_PROFILE, adminGetUserCompanyProfileSaga);\r\n}\r\n\r\nexport function* watchPopulateEmailMessageSaga() {\r\n  yield takeEvery(POPULATE_EMAIL_MESSAGE, populateEmailMessageSaga);\r\n  yield takeEvery(AUTO_EMAIL_TO_APPLICANT, populateEmailMessageSaga);\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}