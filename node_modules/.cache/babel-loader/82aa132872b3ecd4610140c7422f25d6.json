{"ast":null,"code":"import { takeEvery, call, put, cancelled } from 'redux-saga/effects';\nimport { getFormValues } from 'redux-form';\nimport CryptoJS from 'crypto-js';\nimport { SIGNIN_FORM_SUBMIT, VPT_IDENTITY_SERVER, LOGOUT } from '../constants';\nimport store from '../store';\nimport { loginPost } from '../utils/request';\nimport { signInFormSubmitFailed, signInFormSubmitSuccess, setClient, unsetClient, getAllJobCategory, getAllCampaigns, getApplicantProfile, closeDialog, getUserCompanyList, getCompanyProfile, navigateAdsFromMainMenu } from '../actions';\nimport browserHistory from '../history';\n\nfunction* signInSaga() {\n  let result;\n\n  try {\n    const url = `${VPT_IDENTITY_SERVER}/CheckUser`;\n    const formValues = getFormValues('signin')(store.getState());\n    const hashedPassword = CryptoJS.SHA256(formValues.password).toString(); // Checking the following flag to decide where to route users after logging in.\n\n    const body = JSON.stringify({\n      email: formValues.email,\n      password: hashedPassword,\n      SubjectId: formValues.email\n    });\n    result = yield call(loginPost, url, body);\n    yield put(setClient(result));\n    localStorage.setItem('user', JSON.stringify(result));\n\n    if (result.data[0].access_token) {\n      yield put(signInFormSubmitSuccess());\n      yield put(closeDialog()); // If users login to add job posts as favorites!\n\n      const companyId = store.getState().client.user.data[6].company_id;\n      const userType = store.getState().client.user.data[6].user_type;\n      const userRole = store.getState().client.user.data[5] === 0 ? 'superUser' : 'normalUser'; // Do the following For companies\n\n      if (userType === 'company') {\n        yield put(getAllCampaigns());\n        yield put(getAllJobCategory());\n        /*  if (companyId !== null) {\r\n          // To take companies to active jobs page after signin if they have updated their profile\r\n          yield put(navigateAdsFromMainMenu(1));\r\n        } */\n        // Initially, if companies haven't added their full profile checkUser API gives companyId as null.\n\n        if (companyId === null) {\n          browserHistory.push('/omat-tiedot');\n        } else {\n          if (userRole === 'superUser') {\n            yield put(getUserCompanyList());\n          }\n\n          yield put(getCompanyProfile());\n          yield put(navigateAdsFromMainMenu(1));\n          browserHistory.push('/omat-ilmoitukseni');\n        }\n      } // Do the following For applicants\n\n\n      if (userType === 'applicant') {\n        yield put(getApplicantProfile());\n        yield put(getAllJobCategory());\n        browserHistory.push('/etusivu');\n      } // Do the following For admin\n\n\n      if (userType === 'admin') {\n        yield put(getAllCampaigns());\n        browserHistory.push('/yritysasiakkaat');\n      }\n    } else {\n      yield put(signInFormSubmitFailed(result.data[0].error_description));\n      yield put(unsetClient());\n      localStorage.removeItem('user');\n      browserHistory.push('/login');\n    }\n  } catch (error) {\n    console.log(error);\n    yield put(signInFormSubmitFailed(error));\n    yield put(unsetClient());\n    localStorage.removeItem('user');\n    browserHistory.push('/login');\n  } finally {\n    if (yield cancelled()) {\n      browserHistory.push('/login');\n    }\n\n    return result;\n  }\n}\n\nfunction* logout() {\n  yield put(unsetClient());\n  localStorage.removeItem('user');\n  browserHistory.push('/login');\n}\n\nexport function* watchSignInSaga() {\n  yield takeEvery(SIGNIN_FORM_SUBMIT, signInSaga);\n}\nexport function* watchLogoutSaga() {\n  yield takeEvery(LOGOUT, logout);\n}","map":{"version":3,"names":["takeEvery","call","put","cancelled","getFormValues","CryptoJS","SIGNIN_FORM_SUBMIT","VPT_IDENTITY_SERVER","LOGOUT","store","loginPost","signInFormSubmitFailed","signInFormSubmitSuccess","setClient","unsetClient","getAllJobCategory","getAllCampaigns","getApplicantProfile","closeDialog","getUserCompanyList","getCompanyProfile","navigateAdsFromMainMenu","browserHistory","signInSaga","result","url","formValues","getState","hashedPassword","SHA256","password","toString","body","JSON","stringify","email","SubjectId","localStorage","setItem","data","access_token","companyId","client","user","company_id","userType","user_type","userRole","push","error_description","removeItem","error","console","log","logout","watchSignInSaga","watchLogoutSaga"],"sources":["C:/Users/shuli/OneDrive/Desktop/Work/JobportalN/JobPortalEE/src/sagas/signIn.saga.js"],"sourcesContent":["import { takeEvery, call, put, cancelled } from 'redux-saga/effects';\r\nimport { getFormValues } from 'redux-form';\r\nimport CryptoJS from 'crypto-js';\r\nimport { SIGNIN_FORM_SUBMIT, VPT_IDENTITY_SERVER, LOGOUT } from '../constants';\r\nimport store from '../store';\r\nimport { loginPost } from '../utils/request';\r\nimport {\r\n  signInFormSubmitFailed,\r\n  signInFormSubmitSuccess,\r\n  setClient,\r\n  unsetClient,\r\n  getAllJobCategory,\r\n  getAllCampaigns,\r\n  getApplicantProfile,\r\n  closeDialog,\r\n  getUserCompanyList,\r\n  getCompanyProfile,\r\n  navigateAdsFromMainMenu,\r\n} from '../actions';\r\nimport browserHistory from '../history';\r\n\r\nfunction* signInSaga() {\r\n  let result;\r\n  try {\r\n    const url = `${VPT_IDENTITY_SERVER}/CheckUser`;\r\n    const formValues = getFormValues('signin')(store.getState());\r\n    const hashedPassword = CryptoJS.SHA256(formValues.password).toString();\r\n    // Checking the following flag to decide where to route users after logging in.\r\n\r\n    const body = JSON.stringify({\r\n      email: formValues.email,\r\n      password: hashedPassword,\r\n      SubjectId: formValues.email,\r\n    });\r\n    result = yield call(loginPost, url, body);\r\n    yield put(setClient(result));\r\n    localStorage.setItem('user', JSON.stringify(result));\r\n\r\n    if (result.data[0].access_token) {\r\n      yield put(signInFormSubmitSuccess());\r\n      yield put(closeDialog()); // If users login to add job posts as favorites!\r\n      const companyId = store.getState().client.user.data[6].company_id;\r\n      const userType = store.getState().client.user.data[6].user_type;\r\n      const userRole = store.getState().client.user.data[5] === 0 ? 'superUser' : 'normalUser';\r\n      // Do the following For companies\r\n\r\n      if (userType === 'company') {\r\n        yield put(getAllCampaigns());\r\n        yield put(getAllJobCategory());\r\n        /*  if (companyId !== null) {\r\n          // To take companies to active jobs page after signin if they have updated their profile\r\n          yield put(navigateAdsFromMainMenu(1));\r\n        } */\r\n\r\n        // Initially, if companies haven't added their full profile checkUser API gives companyId as null.\r\n        if (companyId === null) {\r\n          browserHistory.push('/omat-tiedot');\r\n        } else {\r\n          if (userRole === 'superUser') {\r\n            yield put(getUserCompanyList());\r\n          }\r\n          yield put(getCompanyProfile());\r\n          yield put(navigateAdsFromMainMenu(1));\r\n          browserHistory.push('/omat-ilmoitukseni');\r\n        }\r\n      }\r\n      // Do the following For applicants\r\n\r\n      if (userType === 'applicant') {\r\n        yield put(getApplicantProfile());\r\n        yield put(getAllJobCategory());\r\n\r\n        browserHistory.push('/etusivu');\r\n      }\r\n\r\n      // Do the following For admin\r\n\r\n      if (userType === 'admin') {\r\n        yield put(getAllCampaigns());\r\n        browserHistory.push('/yritysasiakkaat');\r\n      }\r\n    } else {\r\n      yield put(signInFormSubmitFailed(result.data[0].error_description));\r\n      yield put(unsetClient());\r\n      localStorage.removeItem('user');\r\n      browserHistory.push('/login');\r\n    }\r\n  } catch (error) {\r\n    console.log(error);\r\n    yield put(signInFormSubmitFailed(error));\r\n    yield put(unsetClient());\r\n    localStorage.removeItem('user');\r\n    browserHistory.push('/login');\r\n  } finally {\r\n    if (yield cancelled()) {\r\n      browserHistory.push('/login');\r\n    }\r\n    return result;\r\n  }\r\n}\r\n\r\nfunction* logout() {\r\n  yield put(unsetClient());\r\n  localStorage.removeItem('user');\r\n  browserHistory.push('/login');\r\n}\r\nexport function* watchSignInSaga() {\r\n  yield takeEvery(SIGNIN_FORM_SUBMIT, signInSaga);\r\n}\r\n\r\nexport function* watchLogoutSaga() {\r\n  yield takeEvery(LOGOUT, logout);\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}