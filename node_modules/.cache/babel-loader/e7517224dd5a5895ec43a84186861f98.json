{"ast":null,"code":"import { reduxForm, formValueSelector } from 'redux-form';\nimport { connect } from 'react-redux';\nimport AdvertFormComponent from '../../../components/companies/advertisements/advertForm.component';\nimport { saveAndPublishAdvertisement, saveAdvertisementAsDraft, closeSnackbar, clearImagesFromState, choosePaymentMethod, addExtraService, changeRoute } from '../../../actions';\nimport store from '../../../store';\nimport { jobPostFormValidate as validate } from '../../validate';\nimport { SettingsEthernet } from '@material-ui/icons';\nconst AdvertFormContainer = reduxForm({\n  form: 'vacancy',\n  validate\n})(AdvertFormComponent);\n\nconst mapStateToProps = state => {\n  var _store$getState$users;\n\n  let companyName = (_store$getState$users = store.getState().usersCompanyList.selectedCompany) === null || _store$getState$users === void 0 ? void 0 : _store$getState$users.company_name; //let language = formValueSelector('vacancy')(store.getState(), 'email_language');\n\n  return {\n    image: formValueSelector('vacancy')(state, 'image_document'),\n    jobCategories: state.jobCategories.jobCategories.filter(jobs => jobs.type !== 'all'),\n    selectedCampaign: store.getState().advertisement.selectedCampaign && store.getState().advertisement.selectedCampaign,\n    apiSuccess: store.getState().advertisement.apiSuccess,\n    apiFailed: store.getState().advertisement.apiFailed,\n    showSpinner: store.getState().advertisement.showSpinner,\n    isToEdit: state.jobs.isToEdit,\n    synchronousError: state.form && state.form.vacancy && state.form.vacancy.syncErrors,\n    showPaymentDialog: state.asyncActions.showPaymentDialog,\n    extraService: state.advertisement.extraService,\n    postRequestSucces: store.getState().advertisement.postRequesSucces,\n    postRequestFailure: store.getState().advertisement.postRequesFailure,\n    idToCopy: store.getState().jobs.idToCopy,\n    isOfferCopied: store.getState().jobs.isOfferCopied // initialValues: {\n    //   notice_frequency: '7',\n    //   email_language: [\n    //     {\n    //       type: 'finnish',\n    //       label: 'Finnish',\n    //     },\n    //   ],\n    //   //email_message: emailMessage,\n    //   email_subject: `Kiitos hakemuksesta ${companyName}`,\n    // },\n\n  };\n};\n\nconst mapDispatchToProps = {\n  saveAndPublishAdvertisement,\n  saveAdvertisementAsDraft,\n  closeSnackbar,\n  clearImagesFromState,\n  choosePaymentMethod,\n  addExtraService,\n  changeRoute\n};\nexport default connect(mapStateToProps, mapDispatchToProps)(AdvertFormContainer);","map":{"version":3,"names":["reduxForm","formValueSelector","connect","AdvertFormComponent","saveAndPublishAdvertisement","saveAdvertisementAsDraft","closeSnackbar","clearImagesFromState","choosePaymentMethod","addExtraService","changeRoute","store","jobPostFormValidate","validate","SettingsEthernet","AdvertFormContainer","form","mapStateToProps","state","companyName","getState","usersCompanyList","selectedCompany","company_name","image","jobCategories","filter","jobs","type","selectedCampaign","advertisement","apiSuccess","apiFailed","showSpinner","isToEdit","synchronousError","vacancy","syncErrors","showPaymentDialog","asyncActions","extraService","postRequestSucces","postRequesSucces","postRequestFailure","postRequesFailure","idToCopy","isOfferCopied","mapDispatchToProps"],"sources":["/Users/eduardkazeks/Documents/GitHub/JobPortalEE/src/containers/companies/advertisements/advertForm.container.js"],"sourcesContent":["import { reduxForm, formValueSelector } from 'redux-form';\nimport { connect } from 'react-redux';\nimport AdvertFormComponent from '../../../components/companies/advertisements/advertForm.component';\nimport {\n  saveAndPublishAdvertisement,\n  saveAdvertisementAsDraft,\n  closeSnackbar,\n  clearImagesFromState,\n  choosePaymentMethod,\n  addExtraService,\n  changeRoute,\n} from '../../../actions';\nimport store from '../../../store';\nimport { jobPostFormValidate as validate } from '../../validate';\nimport { SettingsEthernet } from '@material-ui/icons';\n\nconst AdvertFormContainer = reduxForm({\n  form: 'vacancy',\n\n  validate,\n})(AdvertFormComponent);\n\nconst mapStateToProps = state => {\n  let companyName = store.getState().usersCompanyList.selectedCompany?.company_name;\n  //let language = formValueSelector('vacancy')(store.getState(), 'email_language');\n\n  return {\n    image: formValueSelector('vacancy')(state, 'image_document'),\n    jobCategories: state.jobCategories.jobCategories.filter(jobs => jobs.type !== 'all'),\n    selectedCampaign: store.getState().advertisement.selectedCampaign && store.getState().advertisement.selectedCampaign,\n    apiSuccess: store.getState().advertisement.apiSuccess,\n    apiFailed: store.getState().advertisement.apiFailed,\n    showSpinner: store.getState().advertisement.showSpinner,\n    isToEdit: state.jobs.isToEdit,\n    synchronousError: state.form && state.form.vacancy && state.form.vacancy.syncErrors,\n    showPaymentDialog: state.asyncActions.showPaymentDialog,\n    extraService: state.advertisement.extraService,\n    postRequestSucces:store.getState().advertisement.postRequesSucces,\n    postRequestFailure:store.getState().advertisement.postRequesFailure,\n    idToCopy:store.getState().jobs.idToCopy,\n    isOfferCopied:store.getState().jobs.isOfferCopied\n    // initialValues: {\n    //   notice_frequency: '7',\n    //   email_language: [\n    //     {\n    //       type: 'finnish',\n    //       label: 'Finnish',\n    //     },\n    //   ],\n    //   //email_message: emailMessage,\n    //   email_subject: `Kiitos hakemuksesta ${companyName}`,\n    // },\n  };\n};\n\nconst mapDispatchToProps = {\n  saveAndPublishAdvertisement,\n  saveAdvertisementAsDraft,\n  closeSnackbar,\n  clearImagesFromState,\n  choosePaymentMethod,\n  addExtraService,\n  changeRoute,\n};\nexport default connect(mapStateToProps, mapDispatchToProps)(AdvertFormContainer);\n"],"mappings":"AAAA,SAASA,SAAT,EAAoBC,iBAApB,QAA6C,YAA7C;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,OAAOC,mBAAP,MAAgC,mEAAhC;AACA,SACEC,2BADF,EAEEC,wBAFF,EAGEC,aAHF,EAIEC,oBAJF,EAKEC,mBALF,EAMEC,eANF,EAOEC,WAPF,QAQO,kBARP;AASA,OAAOC,KAAP,MAAkB,gBAAlB;AACA,SAASC,mBAAmB,IAAIC,QAAhC,QAAgD,gBAAhD;AACA,SAASC,gBAAT,QAAiC,oBAAjC;AAEA,MAAMC,mBAAmB,GAAGf,SAAS,CAAC;EACpCgB,IAAI,EAAE,SAD8B;EAGpCH;AAHoC,CAAD,CAAT,CAIzBV,mBAJyB,CAA5B;;AAMA,MAAMc,eAAe,GAAGC,KAAK,IAAI;EAAA;;EAC/B,IAAIC,WAAW,4BAAGR,KAAK,CAACS,QAAN,GAAiBC,gBAAjB,CAAkCC,eAArC,0DAAG,sBAAmDC,YAArE,CAD+B,CAE/B;;EAEA,OAAO;IACLC,KAAK,EAAEvB,iBAAiB,CAAC,SAAD,CAAjB,CAA6BiB,KAA7B,EAAoC,gBAApC,CADF;IAELO,aAAa,EAAEP,KAAK,CAACO,aAAN,CAAoBA,aAApB,CAAkCC,MAAlC,CAAyCC,IAAI,IAAIA,IAAI,CAACC,IAAL,KAAc,KAA/D,CAFV;IAGLC,gBAAgB,EAAElB,KAAK,CAACS,QAAN,GAAiBU,aAAjB,CAA+BD,gBAA/B,IAAmDlB,KAAK,CAACS,QAAN,GAAiBU,aAAjB,CAA+BD,gBAH/F;IAILE,UAAU,EAAEpB,KAAK,CAACS,QAAN,GAAiBU,aAAjB,CAA+BC,UAJtC;IAKLC,SAAS,EAAErB,KAAK,CAACS,QAAN,GAAiBU,aAAjB,CAA+BE,SALrC;IAMLC,WAAW,EAAEtB,KAAK,CAACS,QAAN,GAAiBU,aAAjB,CAA+BG,WANvC;IAOLC,QAAQ,EAAEhB,KAAK,CAACS,IAAN,CAAWO,QAPhB;IAQLC,gBAAgB,EAAEjB,KAAK,CAACF,IAAN,IAAcE,KAAK,CAACF,IAAN,CAAWoB,OAAzB,IAAoClB,KAAK,CAACF,IAAN,CAAWoB,OAAX,CAAmBC,UARpE;IASLC,iBAAiB,EAAEpB,KAAK,CAACqB,YAAN,CAAmBD,iBATjC;IAULE,YAAY,EAAEtB,KAAK,CAACY,aAAN,CAAoBU,YAV7B;IAWLC,iBAAiB,EAAC9B,KAAK,CAACS,QAAN,GAAiBU,aAAjB,CAA+BY,gBAX5C;IAYLC,kBAAkB,EAAChC,KAAK,CAACS,QAAN,GAAiBU,aAAjB,CAA+Bc,iBAZ7C;IAaLC,QAAQ,EAAClC,KAAK,CAACS,QAAN,GAAiBO,IAAjB,CAAsBkB,QAb1B;IAcLC,aAAa,EAACnC,KAAK,CAACS,QAAN,GAAiBO,IAAjB,CAAsBmB,aAd/B,CAeL;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;;EAzBK,CAAP;AA2BD,CA/BD;;AAiCA,MAAMC,kBAAkB,GAAG;EACzB3C,2BADyB;EAEzBC,wBAFyB;EAGzBC,aAHyB;EAIzBC,oBAJyB;EAKzBC,mBALyB;EAMzBC,eANyB;EAOzBC;AAPyB,CAA3B;AASA,eAAeR,OAAO,CAACe,eAAD,EAAkB8B,kBAAlB,CAAP,CAA6ChC,mBAA7C,CAAf"},"metadata":{},"sourceType":"module"}