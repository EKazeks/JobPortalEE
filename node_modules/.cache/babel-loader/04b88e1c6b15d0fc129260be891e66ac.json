{"ast":null,"code":"var _jsxFileName = \"/Users/eduardkazeks/Documents/GitHub/JobPortalEE/src/components/companies/ads/adDetails.component.js\";\nimport React, { useEffect, useState } from \"react\";\nimport { withStyles } from \"@material-ui/core/styles\";\nimport { Divider, Grid, Button, Snackbar } from \"@material-ui/core\";\nimport ArrowBackIosIcon from \"@material-ui/icons/ArrowBackIos\";\nimport { Link } from \"react-router-dom\";\nimport { useTranslation } from \"react-i18next\";\nimport store from \"../../../store\";\nimport { customURL } from \"../../../utils/helperFunctions\";\nimport { updateAdvertisement, changeCampaign, populateVacancyForm, changeActivePostToInactive, closeSnackbar } from \"../../../actions\";\nimport { MySnackbarContentWrapper } from \"../../../utils/snackbar.utils\";\nimport { customTranslateCampaign, customTranslateStatus } from \"../../../utils/customTranslate\";\nimport Loader from \"../../../utils/loader\";\nimport axios from \"axios\";\nimport { useDispatch, useSelector } from \"react-redux\";\n\nconst styles = theme => ({\n  titleMargin: {\n    margin: \"20px auto 24px auto\",\n    [theme.breakpoints.down(\"sm\")]: {\n      marginTop: 4\n    }\n  },\n  companyLogo: {\n    minHeight: 80,\n    minWidth: 150,\n    backgroundSize: \"contain\",\n    backgroundRepeat: \"no-repeat\",\n    marginBottom: 6\n  },\n  companyImgFrame: {\n    display: \"flex\",\n    alignItems: \"center\",\n    justifyContent: \"center\"\n  },\n  companyImage: {\n    minHeight: 420,\n    maxHeight: 600,\n    maxWidth: \"100%\",\n    [theme.breakpoints.down(\"xs\")]: {\n      minHeight: 190,\n      maxHeight: 190,\n      width: \"100%\"\n    },\n    [theme.breakpoints.only(\"sm\")]: {\n      minHeight: 360,\n      maxHeight: 420,\n      width: \"100%\"\n    }\n  },\n  adDetail: {\n    margin: \"0px 0 50px 0\",\n    padding: \"0 0 50px\",\n    border: \"1px solid lightgray\"\n  },\n  jobDesc: {\n    padding: 40\n  },\n  ctaBtn: {\n    marginBottom: 50,\n    [theme.breakpoints.up(\"md\")]: {\n      justifyContent: \"flex-end\"\n    }\n  },\n  backBtnText: {\n    color: theme.palette.secondary.main,\n    \"&:hover\": {\n      textDecoration: \"none\",\n      color: theme.palette.primary.main\n    }\n  },\n  backBtnContainer: {\n    marginTop: 2\n  },\n  campaignType: {\n    marginRight: 16\n  }\n});\n\nconst AdDetails = _ref => {\n  let {\n    classes,\n    viewSelectedAd,\n    userRole,\n    showSuccessSnackbar,\n    showFailedSnackbar,\n    showSpinner,\n    selectedPage,\n    campaignsList,\n    props\n  } = _ref;\n  const {\n    t\n  } = useTranslation(\"adDetails\");\n  const dispatch = useDispatch();\n  const {\n    id\n  } = useSelector(state => state.jobs);\n  const [jobsToRender, setJobsToRender] = useState([]);\n  selectedPage = 1;\n  useEffect(() => {\n    axios.get(`https://localhost:7262/jobsEn/${id}`).then(res => {\n      setJobsToRender(res.data);\n    });\n  }, []); //const showAddress = Object.keys(jobsToRender.jobPostAddress)\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Grid, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 13\n    }\n  }, jobsToRender.jobPostNumber, jobsToRender.jobName, console.log(jobsToRender.jobPostAddress.address))))), /*#__PURE__*/React.createElement(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 7\n    }\n  }, \"Test\")) // <div>\n  //   <div className=\"container\" key={jobsToRender.id}>\n  //     <div className={classes.backBtnContainer}>\n  //       <Link\n  //         to={userRole === \"company\" ? \"/omat-ilmoitukseni\" : \"/tyopaikat\"}\n  //         className={classes.backBtnText}\n  //       >\n  //         <ArrowBackIosIcon /> {t(\"jobs:backButton\")}\n  //       </Link>\n  //     </div>\n  //     <div className={classes.titleMargin}>\n  //       <Grid container>\n  //         <Grid item sm={12} md={7}>\n  //           <h2 className=\"ad_title_1\">\n  //           {jobsToRender.jobName}, {jobsToRender.map((job) => {\n  //             return (\n  //               <div>\n  //                   {jobsToRender.jobPostAddress.address}\n  //               </div>\n  //             )\n  //           })}\n  //           </h2>\n  //           <h6 className=\"ad_title_2\">\n  //             <strong style={{ marginRight: 10 }}>\n  //               {`${\n  //                 jobsToRender.status === 0\n  //                   ? t(\"draft\")\n  //                   : jobsToRender.status === 1\n  //                   ? t(\"active\")\n  //                   : t(\"inactive\")\n  //               }`}\n  //               :\n  //             </strong>\n  //             <strong>{jobsToRender.dateOfApplication}</strong>\n  //           </h6>\n  //         </Grid>\n  //         <Grid item sm={12} md={5}>\n  //           <Grid container spacing={2} className={classes.ctaBtn}>\n  //             <Grid item>\n  //               {/* If post is active post, show Inactive btn. If it is inactive post, show copy btn in Addetails */}\n  //               {jobsToRender.campaignType === \"Free\" ? (\n  //                 <Link to=\"/tyopaikkailmoitus/\" className=\"btnLink\">\n  //                   <Button\n  //                     variant=\"outlined\"\n  //                     color=\"primary\"\n  //                     onClick={() => {\n  //                       store.dispatch(\n  //                         populateVacancyForm(jobsToRender.id, false)\n  //                       );\n  //                     }}\n  //                   >\n  //                     {t(\"common:copyBtn\")}\n  //                   </Button>\n  //                 </Link>\n  //               ) : jobsToRender.campaignType === \"Free\" ? (\n  //                 <Button\n  //                   variant=\"outlined\"\n  //                   color=\"primary\"\n  //                   onClick={() => {\n  //                     // alert('updateJOBPOSTSTATUS');\n  //                     store.dispatch(\n  //                       changeActivePostToInactive(\n  //                         userRole === \"admin\"\n  //                           ? `${jobsToRender.id}admin${jobsToRender.companyBusinessId}`\n  //                           : jobsToRender.id\n  //                       )\n  //                     );\n  //                   }}\n  //                 >\n  //                   {t(\"common:inactiveBtn\")}\n  //                 </Button>\n  //               ) : (\n  //                 \"\"\n  //               )}\n  //             </Grid>\n  //             {jobsToRender.campaignType === \"Free\" && (\n  //               <Grid item>\n  //                 <Link\n  //                   to={`/tyopaikkailmoitus/${jobsToRender.id}`}\n  //                   className=\"btnLink\"\n  //                 >\n  //                   <Button\n  //                     variant=\"outlined\"\n  //                     color=\"primary\"\n  //                     onClick={() => store.dispatch(updateAdvertisement())}\n  //                   >\n  //                     {t(\"editBtn\")}\n  //                   </Button>\n  //                 </Link>\n  //               </Grid>\n  //             )}\n  //             <Grid item>\n  //               {/* To avoid errors when viewSelectedAd is empty array */}\n  //               {jobsToRender.jobName && (\n  //                 <Link\n  //                   to={customURL(jobsToRender.url, \"campaign\")}\n  //                   className=\"btnLink\"\n  //                 >\n  //                   <Button\n  //                     variant=\"contained\"\n  //                     color=\"primary\"\n  //                     onClick={() =>\n  //                       store.dispatch(\n  //                         changeCampaign(\n  //                           campaignsList.find(\n  //                             (campaign) =>\n  //                               campaign.id === jobsToRender.campaignType\n  //                           )\n  //                         )\n  //                       )\n  //                     }\n  //                   >\n  //                     {t(\"boostBtn\")}\n  //                   </Button>\n  //                 </Link>\n  //               )}\n  //             </Grid>\n  //           </Grid>\n  //         </Grid>\n  //       </Grid>\n  //       <Divider />\n  //     </div>\n  //     <div className={classes.addMargin}>\n  //       <Grid container>\n  //         <Grid item sm={8}>\n  //           <div className={classes.campaignType}>\n  //             <h6>\n  //               <strong>{t(\"postType\")}: </strong>\n  //               {/* <span>{customTranslateCampaign(item.campaignType)}</span> */}\n  //               <span>{jobsToRender.campaignType}</span>\n  //             </h6>\n  //             <h6>\n  //               <strong>{t(\"postStatus\")}: </strong>\n  //               {/* {customTranslateStatus(item.campaignType)} */}\n  //               {`Active`}\n  //             </h6>\n  //           </div>\n  //         </Grid>\n  //         <Grid\n  //           item\n  //           sm={4}\n  //           style={{ display: \"flex\", justifyContent: \"flex-end\" }}\n  //         >\n  //           <div\n  //             className={classes.companyLogo}\n  //             style={{\n  //               backgroundImage: `url(${\n  //                 jobsToRender.logo ? jobsToRender.logo[0].path : \"\"\n  //               })`,\n  //             }}\n  //           />\n  //         </Grid>\n  //       </Grid>\n  //     </div>\n  //     <div className={classes.adDetail}>\n  //       <div className={classes.companyImgFrame}>\n  //         <img\n  //           src={jobsToRender.logo && jobsToRender.logo[0].path}\n  //           alt={\n  //             jobsToRender.logo ? `${jobsToRender.jobName} Company-Image` : \"\"\n  //           }\n  //           className={jobsToRender.company_image ? classes.companyImage : \"\"}\n  //         />\n  //       </div>\n  //       <div\n  //         className={classes.jobDesc}\n  //         dangerouslySetInnerHTML={{\n  //           __html: jobsToRender.jobDescription,\n  //         }} // To convert rte string into html\n  //       />\n  //     </div>\n  //     <Grid container>\n  //       <Grid item sm={12} md={6} />\n  //       <Grid item sm={12} md={6}>\n  //         <Grid container spacing={2} className={classes.ctaBtn}>\n  //           <Grid item>\n  //             {/* If post is active post, show Inactive btn. If it is inactive post, show copy btn in Addetails */}\n  //             {jobsToRender.campaignType === \"Free\" ? (\n  //               <Link to=\"/tyopaikkailmoitus/\" className=\"btnLink\">\n  //                 <Button\n  //                   variant=\"outlined\"\n  //                   color=\"primary\"\n  //                   onClick={() => {\n  //                     store.dispatch(\n  //                       populateVacancyForm(jobsToRender.id, false)\n  //                     );\n  //                   }}\n  //                 >\n  //                   {t(\"common:copyBtn\")}\n  //                 </Button>\n  //               </Link>\n  //             ) : jobsToRender.campaignType === \"Free\" ? (\n  //               <Button\n  //                 variant=\"outlined\"\n  //                 color=\"primary\"\n  //                 onClick={() => {\n  //                   store.dispatch(\n  //                     changeActivePostToInactive(\n  //                       userRole === \"admin\"\n  //                         ? `${jobsToRender.id}admin${jobsToRender.companyBusinessId}`\n  //                         : jobsToRender.id\n  //                     )\n  //                   );\n  //                 }}\n  //               >\n  //                 {t(\"common:inactiveBtn\")}\n  //               </Button>\n  //             ) : (\n  //               \"\"\n  //             )}\n  //           </Grid>\n  //           {jobsToRender.campaignType === \"Free\" && (\n  //             <Grid item>\n  //               <Link\n  //                 to={`/tyopaikkailmoitus/${jobsToRender.id}`}\n  //                 className=\"btnLink\"\n  //               >\n  //                 <Button\n  //                   variant=\"outlined\"\n  //                   color=\"primary\"\n  //                   onClick={() => store.dispatch(updateAdvertisement())}\n  //                 >\n  //                   {t(\"editBtn\")}\n  //                 </Button>\n  //               </Link>\n  //             </Grid>\n  //           )}\n  //           <Grid item>\n  //             {/* To avoid errors when viewSelectedAd is empty array */}\n  //             {jobsToRender.jobName && (\n  //               <Link\n  //                 to={customURL(jobsToRender.url, \"campaign\")}\n  //                 className=\"btnLink\"\n  //               >\n  //                 <Button\n  //                   variant=\"contained\"\n  //                   color=\"primary\"\n  //                   onClick={() =>\n  //                     store.dispatch(\n  //                       changeCampaign(\n  //                         campaignsList.find(\n  //                           (campaign) =>\n  //                             campaign.id === jobsToRender.campaign_id\n  //                         )\n  //                       )\n  //                     )\n  //                   }\n  //                 >\n  //                   {t(\"boostBtn\")}\n  //                 </Button>\n  //               </Link>\n  //             )}\n  //           </Grid>\n  //         </Grid>\n  //       </Grid>\n  //     </Grid>\n  //   </div>\n  //   <Loader showSpinner={showSpinner} />\n  //   <Snackbar\n  //     anchorOrigin={{\n  //       vertical: \"bottom\",\n  //       horizontal: \"center\",\n  //     }}\n  //     open={showSuccessSnackbar}\n  //     autoHideDuration={2000}\n  //     onClose={() => store.dispatch(closeSnackbar())}\n  //   >\n  //     <MySnackbarContentWrapper\n  //       onClose={() => store.dispatch(closeSnackbar())}\n  //       variant=\"success\"\n  //       message={t(\"successMsg\")}\n  //     />\n  //   </Snackbar>\n  //   <Snackbar\n  //     anchorOrigin={{\n  //       vertical: \"bottom\",\n  //       horizontal: \"center\",\n  //     }}\n  //     open={showFailedSnackbar}\n  //     autoHideDuration={2000}\n  //     onClose={() => store.dispatch(closeSnackbar())}\n  //   >\n  //     <MySnackbarContentWrapper\n  //       onClose={() => store.dispatch(closeSnackbar())}\n  //       variant=\"error\"\n  //       message={t(\"failedMsg\")}\n  //     />\n  //   </Snackbar>\n  // </div>\n  ;\n};\n\nexport default withStyles(styles)(AdDetails);","map":{"version":3,"names":["React","useEffect","useState","withStyles","Divider","Grid","Button","Snackbar","ArrowBackIosIcon","Link","useTranslation","store","customURL","updateAdvertisement","changeCampaign","populateVacancyForm","changeActivePostToInactive","closeSnackbar","MySnackbarContentWrapper","customTranslateCampaign","customTranslateStatus","Loader","axios","useDispatch","useSelector","styles","theme","titleMargin","margin","breakpoints","down","marginTop","companyLogo","minHeight","minWidth","backgroundSize","backgroundRepeat","marginBottom","companyImgFrame","display","alignItems","justifyContent","companyImage","maxHeight","maxWidth","width","only","adDetail","padding","border","jobDesc","ctaBtn","up","backBtnText","color","palette","secondary","main","textDecoration","primary","backBtnContainer","campaignType","marginRight","AdDetails","classes","viewSelectedAd","userRole","showSuccessSnackbar","showFailedSnackbar","showSpinner","selectedPage","campaignsList","props","t","dispatch","id","state","jobs","jobsToRender","setJobsToRender","get","then","res","data","jobPostNumber","jobName","console","log","jobPostAddress","address"],"sources":["/Users/eduardkazeks/Documents/GitHub/JobPortalEE/src/components/companies/ads/adDetails.component.js"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport { withStyles } from \"@material-ui/core/styles\";\nimport { Divider, Grid, Button, Snackbar } from \"@material-ui/core\";\nimport ArrowBackIosIcon from \"@material-ui/icons/ArrowBackIos\";\nimport { Link } from \"react-router-dom\";\nimport { useTranslation } from \"react-i18next\";\nimport store from \"../../../store\";\nimport { customURL } from \"../../../utils/helperFunctions\";\nimport {\n  updateAdvertisement,\n  changeCampaign,\n  populateVacancyForm,\n  changeActivePostToInactive,\n  closeSnackbar,\n} from \"../../../actions\";\nimport { MySnackbarContentWrapper } from \"../../../utils/snackbar.utils\";\nimport {\n  customTranslateCampaign,\n  customTranslateStatus,\n} from \"../../../utils/customTranslate\";\nimport Loader from \"../../../utils/loader\";\nimport axios from \"axios\";\nimport { useDispatch, useSelector } from \"react-redux\";\n\nconst styles = (theme) => ({\n  titleMargin: {\n    margin: \"20px auto 24px auto\",\n    [theme.breakpoints.down(\"sm\")]: {\n      marginTop: 4,\n    },\n  },\n  companyLogo: {\n    minHeight: 80,\n    minWidth: 150,\n    backgroundSize: \"contain\",\n    backgroundRepeat: \"no-repeat\",\n    marginBottom: 6,\n  },\n  companyImgFrame: {\n    display: \"flex\",\n    alignItems: \"center\",\n    justifyContent: \"center\",\n  },\n\n  companyImage: {\n    minHeight: 420,\n    maxHeight: 600,\n    maxWidth: \"100%\",\n    [theme.breakpoints.down(\"xs\")]: {\n      minHeight: 190,\n      maxHeight: 190,\n      width: \"100%\",\n    },\n    [theme.breakpoints.only(\"sm\")]: {\n      minHeight: 360,\n      maxHeight: 420,\n      width: \"100%\",\n    },\n  },\n  adDetail: {\n    margin: \"0px 0 50px 0\",\n    padding: \"0 0 50px\",\n    border: \"1px solid lightgray\",\n  },\n  jobDesc: {\n    padding: 40,\n  },\n  ctaBtn: {\n    marginBottom: 50,\n    [theme.breakpoints.up(\"md\")]: {\n      justifyContent: \"flex-end\",\n    },\n  },\n  backBtnText: {\n    color: theme.palette.secondary.main,\n    \"&:hover\": {\n      textDecoration: \"none\",\n      color: theme.palette.primary.main,\n    },\n  },\n  backBtnContainer: {\n    marginTop: 2,\n  },\n  campaignType: {\n    marginRight: 16,\n  },\n});\n\nconst AdDetails = ({\n  classes,\n  viewSelectedAd,\n  userRole,\n  showSuccessSnackbar,\n  showFailedSnackbar,\n  showSpinner,\n  selectedPage,\n  campaignsList,\n  props,\n}) => {\n  const { t } = useTranslation(\"adDetails\");\n  const dispatch = useDispatch();\n  const { id } = useSelector((state) => state.jobs);\n  const [jobsToRender, setJobsToRender] = useState([]);\n  selectedPage = 1;\n\n  useEffect(() => {\n    axios.get(`https://localhost:7262/jobsEn/${id}`).then((res) => {\n      setJobsToRender(res.data);\n    });\n  }, []);\n\n//const showAddress = Object.keys(jobsToRender.jobPostAddress)\n\n  return (\n    <div>\n      <div>\n        <Grid>\n          <div>\n            <h1>\n              {jobsToRender.jobPostNumber}\n              {jobsToRender.jobName}\n              {console.log(jobsToRender.jobPostAddress.address)}\n            </h1>\n          </div>\n        </Grid>\n      </div>\n\n      <h1>Test</h1>\n    </div>\n    \n    // <div>\n    //   <div className=\"container\" key={jobsToRender.id}>\n    //     <div className={classes.backBtnContainer}>\n    //       <Link\n    //         to={userRole === \"company\" ? \"/omat-ilmoitukseni\" : \"/tyopaikat\"}\n    //         className={classes.backBtnText}\n    //       >\n    //         <ArrowBackIosIcon /> {t(\"jobs:backButton\")}\n    //       </Link>\n    //     </div>\n    //     <div className={classes.titleMargin}>\n    //       <Grid container>\n    //         <Grid item sm={12} md={7}>\n    //           <h2 className=\"ad_title_1\">\n    //           {jobsToRender.jobName}, {jobsToRender.map((job) => {\n    //             return (\n    //               <div>\n    //                   {jobsToRender.jobPostAddress.address}\n    //               </div>\n    //             )\n    //           })}\n    //           </h2>\n    //           <h6 className=\"ad_title_2\">\n    //             <strong style={{ marginRight: 10 }}>\n    //               {`${\n    //                 jobsToRender.status === 0\n    //                   ? t(\"draft\")\n    //                   : jobsToRender.status === 1\n    //                   ? t(\"active\")\n    //                   : t(\"inactive\")\n    //               }`}\n    //               :\n    //             </strong>\n    //             <strong>{jobsToRender.dateOfApplication}</strong>\n    //           </h6>\n    //         </Grid>\n    //         <Grid item sm={12} md={5}>\n    //           <Grid container spacing={2} className={classes.ctaBtn}>\n    //             <Grid item>\n    //               {/* If post is active post, show Inactive btn. If it is inactive post, show copy btn in Addetails */}\n    //               {jobsToRender.campaignType === \"Free\" ? (\n    //                 <Link to=\"/tyopaikkailmoitus/\" className=\"btnLink\">\n    //                   <Button\n    //                     variant=\"outlined\"\n    //                     color=\"primary\"\n    //                     onClick={() => {\n    //                       store.dispatch(\n    //                         populateVacancyForm(jobsToRender.id, false)\n    //                       );\n    //                     }}\n    //                   >\n    //                     {t(\"common:copyBtn\")}\n    //                   </Button>\n    //                 </Link>\n    //               ) : jobsToRender.campaignType === \"Free\" ? (\n    //                 <Button\n    //                   variant=\"outlined\"\n    //                   color=\"primary\"\n    //                   onClick={() => {\n    //                     // alert('updateJOBPOSTSTATUS');\n    //                     store.dispatch(\n    //                       changeActivePostToInactive(\n    //                         userRole === \"admin\"\n    //                           ? `${jobsToRender.id}admin${jobsToRender.companyBusinessId}`\n    //                           : jobsToRender.id\n    //                       )\n    //                     );\n    //                   }}\n    //                 >\n    //                   {t(\"common:inactiveBtn\")}\n    //                 </Button>\n    //               ) : (\n    //                 \"\"\n    //               )}\n    //             </Grid>\n    //             {jobsToRender.campaignType === \"Free\" && (\n    //               <Grid item>\n    //                 <Link\n    //                   to={`/tyopaikkailmoitus/${jobsToRender.id}`}\n    //                   className=\"btnLink\"\n    //                 >\n    //                   <Button\n    //                     variant=\"outlined\"\n    //                     color=\"primary\"\n    //                     onClick={() => store.dispatch(updateAdvertisement())}\n    //                   >\n    //                     {t(\"editBtn\")}\n    //                   </Button>\n    //                 </Link>\n    //               </Grid>\n    //             )}\n    //             <Grid item>\n    //               {/* To avoid errors when viewSelectedAd is empty array */}\n    //               {jobsToRender.jobName && (\n    //                 <Link\n    //                   to={customURL(jobsToRender.url, \"campaign\")}\n    //                   className=\"btnLink\"\n    //                 >\n    //                   <Button\n    //                     variant=\"contained\"\n    //                     color=\"primary\"\n    //                     onClick={() =>\n    //                       store.dispatch(\n    //                         changeCampaign(\n    //                           campaignsList.find(\n    //                             (campaign) =>\n    //                               campaign.id === jobsToRender.campaignType\n    //                           )\n    //                         )\n    //                       )\n    //                     }\n    //                   >\n    //                     {t(\"boostBtn\")}\n    //                   </Button>\n    //                 </Link>\n    //               )}\n    //             </Grid>\n    //           </Grid>\n    //         </Grid>\n    //       </Grid>\n    //       <Divider />\n    //     </div>\n    //     <div className={classes.addMargin}>\n    //       <Grid container>\n    //         <Grid item sm={8}>\n    //           <div className={classes.campaignType}>\n    //             <h6>\n    //               <strong>{t(\"postType\")}: </strong>\n    //               {/* <span>{customTranslateCampaign(item.campaignType)}</span> */}\n    //               <span>{jobsToRender.campaignType}</span>\n    //             </h6>\n    //             <h6>\n    //               <strong>{t(\"postStatus\")}: </strong>\n    //               {/* {customTranslateStatus(item.campaignType)} */}\n    //               {`Active`}\n    //             </h6>\n    //           </div>\n    //         </Grid>\n    //         <Grid\n    //           item\n    //           sm={4}\n    //           style={{ display: \"flex\", justifyContent: \"flex-end\" }}\n    //         >\n    //           <div\n    //             className={classes.companyLogo}\n    //             style={{\n    //               backgroundImage: `url(${\n    //                 jobsToRender.logo ? jobsToRender.logo[0].path : \"\"\n    //               })`,\n    //             }}\n    //           />\n    //         </Grid>\n    //       </Grid>\n    //     </div>\n    //     <div className={classes.adDetail}>\n    //       <div className={classes.companyImgFrame}>\n    //         <img\n    //           src={jobsToRender.logo && jobsToRender.logo[0].path}\n    //           alt={\n    //             jobsToRender.logo ? `${jobsToRender.jobName} Company-Image` : \"\"\n    //           }\n    //           className={jobsToRender.company_image ? classes.companyImage : \"\"}\n    //         />\n    //       </div>\n    //       <div\n    //         className={classes.jobDesc}\n    //         dangerouslySetInnerHTML={{\n    //           __html: jobsToRender.jobDescription,\n    //         }} // To convert rte string into html\n    //       />\n    //     </div>\n    //     <Grid container>\n    //       <Grid item sm={12} md={6} />\n    //       <Grid item sm={12} md={6}>\n    //         <Grid container spacing={2} className={classes.ctaBtn}>\n    //           <Grid item>\n    //             {/* If post is active post, show Inactive btn. If it is inactive post, show copy btn in Addetails */}\n    //             {jobsToRender.campaignType === \"Free\" ? (\n    //               <Link to=\"/tyopaikkailmoitus/\" className=\"btnLink\">\n    //                 <Button\n    //                   variant=\"outlined\"\n    //                   color=\"primary\"\n    //                   onClick={() => {\n    //                     store.dispatch(\n    //                       populateVacancyForm(jobsToRender.id, false)\n    //                     );\n    //                   }}\n    //                 >\n    //                   {t(\"common:copyBtn\")}\n    //                 </Button>\n    //               </Link>\n    //             ) : jobsToRender.campaignType === \"Free\" ? (\n    //               <Button\n    //                 variant=\"outlined\"\n    //                 color=\"primary\"\n    //                 onClick={() => {\n    //                   store.dispatch(\n    //                     changeActivePostToInactive(\n    //                       userRole === \"admin\"\n    //                         ? `${jobsToRender.id}admin${jobsToRender.companyBusinessId}`\n    //                         : jobsToRender.id\n    //                     )\n    //                   );\n    //                 }}\n    //               >\n    //                 {t(\"common:inactiveBtn\")}\n    //               </Button>\n    //             ) : (\n    //               \"\"\n    //             )}\n    //           </Grid>\n    //           {jobsToRender.campaignType === \"Free\" && (\n    //             <Grid item>\n    //               <Link\n    //                 to={`/tyopaikkailmoitus/${jobsToRender.id}`}\n    //                 className=\"btnLink\"\n    //               >\n    //                 <Button\n    //                   variant=\"outlined\"\n    //                   color=\"primary\"\n    //                   onClick={() => store.dispatch(updateAdvertisement())}\n    //                 >\n    //                   {t(\"editBtn\")}\n    //                 </Button>\n    //               </Link>\n    //             </Grid>\n    //           )}\n    //           <Grid item>\n    //             {/* To avoid errors when viewSelectedAd is empty array */}\n    //             {jobsToRender.jobName && (\n    //               <Link\n    //                 to={customURL(jobsToRender.url, \"campaign\")}\n    //                 className=\"btnLink\"\n    //               >\n    //                 <Button\n    //                   variant=\"contained\"\n    //                   color=\"primary\"\n    //                   onClick={() =>\n    //                     store.dispatch(\n    //                       changeCampaign(\n    //                         campaignsList.find(\n    //                           (campaign) =>\n    //                             campaign.id === jobsToRender.campaign_id\n    //                         )\n    //                       )\n    //                     )\n    //                   }\n    //                 >\n    //                   {t(\"boostBtn\")}\n    //                 </Button>\n    //               </Link>\n    //             )}\n    //           </Grid>\n    //         </Grid>\n    //       </Grid>\n    //     </Grid>\n    //   </div>\n    //   <Loader showSpinner={showSpinner} />\n    //   <Snackbar\n    //     anchorOrigin={{\n    //       vertical: \"bottom\",\n    //       horizontal: \"center\",\n    //     }}\n    //     open={showSuccessSnackbar}\n    //     autoHideDuration={2000}\n    //     onClose={() => store.dispatch(closeSnackbar())}\n    //   >\n    //     <MySnackbarContentWrapper\n    //       onClose={() => store.dispatch(closeSnackbar())}\n    //       variant=\"success\"\n    //       message={t(\"successMsg\")}\n    //     />\n    //   </Snackbar>\n    //   <Snackbar\n    //     anchorOrigin={{\n    //       vertical: \"bottom\",\n    //       horizontal: \"center\",\n    //     }}\n    //     open={showFailedSnackbar}\n    //     autoHideDuration={2000}\n    //     onClose={() => store.dispatch(closeSnackbar())}\n    //   >\n    //     <MySnackbarContentWrapper\n    //       onClose={() => store.dispatch(closeSnackbar())}\n    //       variant=\"error\"\n    //       message={t(\"failedMsg\")}\n    //     />\n    //   </Snackbar>\n    // </div>\n  );\n};\n\nexport default withStyles(styles)(AdDetails);\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}