{"ast":null,"code":"import { takeEvery, call, put } from 'redux-saga/effects';\nimport { getUserCompanyListSuccess, getCompanyProfile, navigateAdsFromMainMenu, getAllAdsByStatus, addNewCompanyEnd, selectCompany } from '../actions';\nimport { API_SERVER, GET_USER_COMPANIES_LIST, SELECT_COMPANY } from '../constants';\nimport store from '../store';\nimport { apiManualPost } from '../utils/request';\n\nfunction* getCompaniesList(_ref) {\n  let {\n    isProfileUpdated\n  } = _ref;\n\n  try {\n    const email = store.getState().client.user.data[1];\n\n    if (email) {\n      const url = `${API_SERVER}/GetUserCompaniesList`;\n      const data = {\n        email\n      };\n      const body = JSON.stringify(data);\n      const result = yield call(apiManualPost, url, body);\n      const parsedResult = JSON.parse(result.data);\n\n      if (result.data) {\n        yield put(getUserCompanyListSuccess(parsedResult));\n\n        if (!isProfileUpdated) {\n          // New company is added from add new company btn.\n          yield put(addNewCompanyEnd());\n          const newCompany = parsedResult[parsedResult.length - 1];\n          yield put(selectCompany(newCompany));\n        } else {//console.log('Existing profile updated');\n        }\n      } else {//console.log('no companies loaded');\n      }\n    }\n  } catch (e) {\n    console.log(e);\n  }\n}\n\nfunction* selectCompanySaga() {\n  try {\n    yield put(getCompanyProfile());\n    yield put(navigateAdsFromMainMenu(1));\n    yield put(getAllAdsByStatus(0));\n    yield put(getAllAdsByStatus(1));\n    yield put(getAllAdsByStatus(2)); //browserHistory.push('/omat-ilmoitukseni');\n  } catch (error) {\n    console.log(error);\n  }\n}\n\nexport function* watchGetCompaniesList() {\n  yield takeEvery(GET_USER_COMPANIES_LIST, getCompaniesList);\n}\nexport function* watchSelectCompanySaga() {\n  yield takeEvery(SELECT_COMPANY, selectCompanySaga);\n}","map":{"version":3,"names":["takeEvery","call","put","getUserCompanyListSuccess","getCompanyProfile","navigateAdsFromMainMenu","getAllAdsByStatus","addNewCompanyEnd","selectCompany","API_SERVER","GET_USER_COMPANIES_LIST","SELECT_COMPANY","store","apiManualPost","getCompaniesList","isProfileUpdated","email","getState","client","user","data","url","body","JSON","stringify","result","parsedResult","parse","newCompany","length","e","console","log","selectCompanySaga","error","watchGetCompaniesList","watchSelectCompanySaga"],"sources":["/Users/eduardkazeks/Documents/GitHub/EeJobPortal/src/sagas/companyUser.saga.js"],"sourcesContent":["import { takeEvery, call, put } from 'redux-saga/effects';\nimport { getUserCompanyListSuccess, getCompanyProfile, navigateAdsFromMainMenu, getAllAdsByStatus, addNewCompanyEnd, selectCompany } from '../actions';\nimport { API_SERVER, GET_USER_COMPANIES_LIST, SELECT_COMPANY } from '../constants';\n\nimport store from '../store';\nimport { apiManualPost } from '../utils/request';\n\nfunction* getCompaniesList({ isProfileUpdated }) {\n  try {\n    const email = store.getState().client.user.data[1];\n\n    if (email) {\n      const url = `${API_SERVER}/GetUserCompaniesList`;\n\n      const data = {\n        email,\n      };\n\n      const body = JSON.stringify(data);\n      const result = yield call(apiManualPost, url, body);\n      const parsedResult = JSON.parse(result.data);\n\n      if (result.data) {\n        yield put(getUserCompanyListSuccess(parsedResult));\n        if (!isProfileUpdated) {\n          // New company is added from add new company btn.\n          yield put(addNewCompanyEnd());\n          const newCompany = parsedResult[parsedResult.length - 1];\n          yield put(selectCompany(newCompany));\n        } else {\n          //console.log('Existing profile updated');\n        }\n      } else {\n        //console.log('no companies loaded');\n      }\n    }\n  } catch (e) {\n    console.log(e);\n  }\n}\n\nfunction* selectCompanySaga() {\n  try {\n    yield put(getCompanyProfile());\n    yield put(navigateAdsFromMainMenu(1));\n    yield put(getAllAdsByStatus(0));\n    yield put(getAllAdsByStatus(1));\n    yield put(getAllAdsByStatus(2));\n    //browserHistory.push('/omat-ilmoitukseni');\n  } catch (error) {\n    console.log(error);\n  }\n}\n\nexport function* watchGetCompaniesList() {\n  yield takeEvery(GET_USER_COMPANIES_LIST, getCompaniesList);\n}\n\nexport function* watchSelectCompanySaga() {\n  yield takeEvery(SELECT_COMPANY, selectCompanySaga);\n}\n"],"mappings":"AAAA,SAASA,SAAT,EAAoBC,IAApB,EAA0BC,GAA1B,QAAqC,oBAArC;AACA,SAASC,yBAAT,EAAoCC,iBAApC,EAAuDC,uBAAvD,EAAgFC,iBAAhF,EAAmGC,gBAAnG,EAAqHC,aAArH,QAA0I,YAA1I;AACA,SAASC,UAAT,EAAqBC,uBAArB,EAA8CC,cAA9C,QAAoE,cAApE;AAEA,OAAOC,KAAP,MAAkB,UAAlB;AACA,SAASC,aAAT,QAA8B,kBAA9B;;AAEA,UAAUC,gBAAV,OAAiD;EAAA,IAAtB;IAAEC;EAAF,CAAsB;;EAC/C,IAAI;IACF,MAAMC,KAAK,GAAGJ,KAAK,CAACK,QAAN,GAAiBC,MAAjB,CAAwBC,IAAxB,CAA6BC,IAA7B,CAAkC,CAAlC,CAAd;;IAEA,IAAIJ,KAAJ,EAAW;MACT,MAAMK,GAAG,GAAI,GAAEZ,UAAW,uBAA1B;MAEA,MAAMW,IAAI,GAAG;QACXJ;MADW,CAAb;MAIA,MAAMM,IAAI,GAAGC,IAAI,CAACC,SAAL,CAAeJ,IAAf,CAAb;MACA,MAAMK,MAAM,GAAG,MAAMxB,IAAI,CAACY,aAAD,EAAgBQ,GAAhB,EAAqBC,IAArB,CAAzB;MACA,MAAMI,YAAY,GAAGH,IAAI,CAACI,KAAL,CAAWF,MAAM,CAACL,IAAlB,CAArB;;MAEA,IAAIK,MAAM,CAACL,IAAX,EAAiB;QACf,MAAMlB,GAAG,CAACC,yBAAyB,CAACuB,YAAD,CAA1B,CAAT;;QACA,IAAI,CAACX,gBAAL,EAAuB;UACrB;UACA,MAAMb,GAAG,CAACK,gBAAgB,EAAjB,CAAT;UACA,MAAMqB,UAAU,GAAGF,YAAY,CAACA,YAAY,CAACG,MAAb,GAAsB,CAAvB,CAA/B;UACA,MAAM3B,GAAG,CAACM,aAAa,CAACoB,UAAD,CAAd,CAAT;QACD,CALD,MAKO,CACL;QACD;MACF,CAVD,MAUO,CACL;MACD;IACF;EACF,CA5BD,CA4BE,OAAOE,CAAP,EAAU;IACVC,OAAO,CAACC,GAAR,CAAYF,CAAZ;EACD;AACF;;AAED,UAAUG,iBAAV,GAA8B;EAC5B,IAAI;IACF,MAAM/B,GAAG,CAACE,iBAAiB,EAAlB,CAAT;IACA,MAAMF,GAAG,CAACG,uBAAuB,CAAC,CAAD,CAAxB,CAAT;IACA,MAAMH,GAAG,CAACI,iBAAiB,CAAC,CAAD,CAAlB,CAAT;IACA,MAAMJ,GAAG,CAACI,iBAAiB,CAAC,CAAD,CAAlB,CAAT;IACA,MAAMJ,GAAG,CAACI,iBAAiB,CAAC,CAAD,CAAlB,CAAT,CALE,CAMF;EACD,CAPD,CAOE,OAAO4B,KAAP,EAAc;IACdH,OAAO,CAACC,GAAR,CAAYE,KAAZ;EACD;AACF;;AAED,OAAO,UAAUC,qBAAV,GAAkC;EACvC,MAAMnC,SAAS,CAACU,uBAAD,EAA0BI,gBAA1B,CAAf;AACD;AAED,OAAO,UAAUsB,sBAAV,GAAmC;EACxC,MAAMpC,SAAS,CAACW,cAAD,EAAiBsB,iBAAjB,CAAf;AACD"},"metadata":{},"sourceType":"module"}