{"ast":null,"code":"import { call, put, takeEvery } from 'redux-saga/effects';\nimport { getFormValues } from 'redux-form';\nimport { API_SERVER, CLOSE_DIALOG, SEND_APPLICATION } from '../constants';\nimport { apiOpenPost } from '../utils/request';\nimport store from '../store';\nimport { sendApplicationSuccess, showFailedSnackbar, populateSignupForm // closeDialog\n} from '../actions';\nimport browserHistory from '../history';\n\nfunction* sendApplicationSaga(_ref) {\n  let {\n    id\n  } = _ref;\n\n  try {\n    const company_id = id.split('JP')[0];\n    const post_id = id.split('JP')[1];\n    const uploadedCV = store.getState().jobs.uploadedDocument && store.getState().jobs.uploadedDocument[0];\n    const cv_id_value = store.getState().jobseekerProfile.profile.cv_id;\n    const cv_id = cv_id_value === null || cv_id_value === void 0 ? void 0 : cv_id_value.toString(); // optional chaining ?.\n\n    const formValues = getFormValues('applicationForm')(store.getState());\n    const cv_base64 = formValues && formValues.cv_document;\n\n    if (!!uploadedCV && formValues.cv_document) {\n      formValues.cv_document = {\n        document_id: uploadedCV.id,\n        path: '',\n        filename: uploadedCV.name,\n        filetype: uploadedCV.type,\n        data: cv_base64\n      };\n    } else {\n      delete formValues.cv_document;\n    } // Back end needs in the following format\n\n\n    const url = `${API_SERVER}/ApplyJobPost`;\n    const body = JSON.stringify({ ...formValues,\n      company_id,\n      post_id,\n      cv_id\n    });\n    const result = yield call(apiOpenPost, url, body);\n    const data = {\n      firstName: formValues.firstname,\n      lastName: formValues.lastname,\n      email: formValues.email\n    };\n\n    if (result.data === 'Application to Job Post saved successfully!') {\n      yield put(sendApplicationSuccess());\n      yield put(populateSignupForm(data));\n    } else {\n      yield put(showFailedSnackbar());\n    }\n  } catch (e) {\n    console.warn(e);\n  }\n}\n\nfunction* closeDialogSaga() {\n  try {\n    const applicantSent = store.getState().asyncActions.applicantSent;\n\n    if (applicantSent === true) {\n      //browserHistory.push('/tyopaikat');\n      yield put(browserHistory.push('/tyopaikat')); //Yield statement for generator function\n    } //yield put(null); //Yield statement for generator function\n\n  } catch (e) {\n    console.warn(e);\n  }\n}\n\nexport function* watchSendApplication() {\n  yield takeEvery(SEND_APPLICATION, sendApplicationSaga);\n}\nexport function* watchCloseDialogSaga() {\n  yield takeEvery(CLOSE_DIALOG, closeDialogSaga);\n}","map":{"version":3,"names":["call","put","takeEvery","getFormValues","API_SERVER","CLOSE_DIALOG","SEND_APPLICATION","apiOpenPost","store","sendApplicationSuccess","showFailedSnackbar","populateSignupForm","browserHistory","sendApplicationSaga","id","company_id","split","post_id","uploadedCV","getState","jobs","uploadedDocument","cv_id_value","jobseekerProfile","profile","cv_id","toString","formValues","cv_base64","cv_document","document_id","path","filename","name","filetype","type","data","url","body","JSON","stringify","result","firstName","firstname","lastName","lastname","email","e","console","warn","closeDialogSaga","applicantSent","asyncActions","push","watchSendApplication","watchCloseDialogSaga"],"sources":["/Users/eduardkazeks/Documents/GitHub/EeJobPortal/src/sagas/application.saga.js"],"sourcesContent":["import { call, put, takeEvery } from 'redux-saga/effects';\nimport { getFormValues } from 'redux-form';\nimport { API_SERVER, CLOSE_DIALOG, SEND_APPLICATION } from '../constants';\nimport { apiOpenPost } from '../utils/request';\nimport store from '../store';\nimport {\n  sendApplicationSuccess,\n  showFailedSnackbar,\n  populateSignupForm,\n  // closeDialog\n} from '../actions';\nimport browserHistory from '../history';\n\nfunction* sendApplicationSaga({ id }) {\n  try {\n    const company_id = id.split('JP')[0];\n    const post_id = id.split('JP')[1];\n    const uploadedCV = store.getState().jobs.uploadedDocument && store.getState().jobs.uploadedDocument[0];\n    const cv_id_value = store.getState().jobseekerProfile.profile.cv_id;\n    const cv_id = cv_id_value?.toString(); // optional chaining ?.\n    const formValues = getFormValues('applicationForm')(store.getState());\n    const cv_base64 = formValues && formValues.cv_document;\n\n    if (!!uploadedCV && formValues.cv_document) {\n      formValues.cv_document = {\n        document_id: uploadedCV.id,\n        path: '',\n        filename: uploadedCV.name,\n        filetype: uploadedCV.type,\n        data: cv_base64,\n      };\n    } else {\n      delete formValues.cv_document;\n    }\n\n    // Back end needs in the following format\n    const url = `${API_SERVER}/ApplyJobPost`;\n    const body = JSON.stringify({\n      ...formValues,\n      company_id,\n      post_id,\n      cv_id,\n    });\n    const result = yield call(apiOpenPost, url, body);\n\n    const data = {\n      firstName: formValues.firstname,\n      lastName: formValues.lastname,\n      email: formValues.email,\n    };\n\n    if (result.data === 'Application to Job Post saved successfully!') {\n      yield put(sendApplicationSuccess());\n      yield put(populateSignupForm(data));\n    } else {\n      yield put(showFailedSnackbar());\n    }\n  } catch (e) {\n    console.warn(e);\n  }\n}\n\nfunction* closeDialogSaga() {\n  try {\n    const applicantSent = store.getState().asyncActions.applicantSent;\n    if (applicantSent === true) {\n      //browserHistory.push('/tyopaikat');\n      yield put(browserHistory.push('/tyopaikat')); //Yield statement for generator function\n    }\n    //yield put(null); //Yield statement for generator function\n  } catch (e) {\n    console.warn(e);\n  }\n}\n\nexport function* watchSendApplication() {\n  yield takeEvery(SEND_APPLICATION, sendApplicationSaga);\n}\n\nexport function* watchCloseDialogSaga() {\n  yield takeEvery(CLOSE_DIALOG, closeDialogSaga);\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}