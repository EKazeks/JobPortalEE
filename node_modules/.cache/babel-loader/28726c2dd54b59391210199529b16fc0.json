{"ast":null,"code":"var _jsxFileName = \"/Users/eduardkazeks/Documents/GitHub/JobPortalEE/src/components/jobs/jobs.component.js\";\nimport React, { useEffect, useState } from \"react\";\nimport classNames from \"classnames\";\nimport { Link } from \"react-router-dom\";\nimport { Grid, Paper, Button, Snackbar, Hidden } from \"@material-ui/core\";\nimport { withStyles } from \"@material-ui/core/styles\";\nimport ReactPaginate from \"react-paginate\";\nimport NavigateNextIcon from \"@material-ui/icons/NavigateNext\";\nimport NavigateBeforeIcon from \"@material-ui/icons/NavigateBefore\";\nimport { useTranslation } from \"react-i18next\";\nimport { customURL, dateFormat } from \"../../utils/helperFunctions\";\nimport { FavBtn } from \"../../utils/favBtn.js\";\nimport SearchFormContainer from \"../../containers/jobs/searchForm.container.js\";\nimport { MySnackbarContentWrapper } from \"../../utils/snackbar.utils\";\nimport CustomizedDialog from \"../../utils/customizedDialog\";\nimport Loader from \"../../utils/loader\";\nimport jobHeroImg from \"../../images/jobportal_hero.jpg\";\nimport { SEO } from \"../seo/metaInfo.component\";\nimport axios from \"axios\";\n\nconst styles = theme => ({\n  heroImage: {\n    height: 420,\n    background: `url(${jobHeroImg}) no-repeat`,\n    backgroundSize: \"contain\",\n    backgroundPosition: \"center center\",\n    backgroundColor: \"#F1B1B1\"\n  },\n  heroImageTitle: {\n    color: \"white\",\n    textAlign: \"center\",\n    paddingTop: 20,\n    fontWeight: 800,\n    fontSize: \"4.5rem\",\n    [theme.breakpoints.down(\"sm\")]: {\n      fontSize: \"2.5rem !important\"\n    }\n  },\n  searchForm: {\n    marginTop: -150,\n    backgroundColor: theme.palette.primary.main,\n    padding: \"50px 10px 70px 10px\"\n  },\n  jobInfo: {\n    color: theme.palette.custom.darkText,\n    [theme.breakpoints.down(\"xs\")]: {\n      fontSize: \"1rem\"\n    }\n  },\n  titleSpacer: {\n    [theme.breakpoints.up(\"sm\")]: {\n      height: 170\n    }\n  },\n  jobTitle: {\n    color: theme.palette.primary.main,\n    fontWeight: 600,\n    [theme.breakpoints.down(\"xs\")]: {\n      fontSize: 18\n    },\n    [theme.breakpoints.up(\"sm\")]: {\n      fontSize: 20\n    },\n    [theme.breakpoints.up(\"lg\")]: {\n      fontSize: 22\n    }\n  },\n  companyInfo: {\n    fontWeight: 400,\n    [theme.breakpoints.down(\"xs\")]: {\n      fontSize: 14\n    },\n    [theme.breakpoints.up(\"sm\")]: {\n      fontSize: 16\n    },\n    [theme.breakpoints.up(\"lg\")]: {\n      fontSize: 18\n    }\n  },\n  jobInfobody: {\n    [theme.breakpoints.up(\"md\")]: {\n      paddingLeft: \"12px !important\"\n    },\n    [theme.breakpoints.up(\"lg\")]: {\n      paddingLeft: \"40px !important\"\n    }\n  },\n  emptyResult: {\n    padding: \"50px 20px 70px 20px\"\n  },\n  listContainer: {\n    backgroundColor: theme.palette.custom.background,\n    paddingBottom: 30\n  },\n  logoContainer: {\n    height: \"6rem\",\n    width: \"6rem\",\n    position: \"relative\",\n    display: \"flex\",\n    [theme.breakpoints.down(\"xs\")]: {\n      height: \"6rem\",\n      width: \"5rem\",\n      fontSize: 12\n    },\n    [theme.breakpoints.up(\"lg\")]: {\n      marginLeft: 20\n    }\n  },\n  logoDiv: {\n    height: \"5.5rem\",\n    width: \"5.5rem\",\n    backgroundSize: \"contain\",\n    backgroundRepeat: \"no-repeat\",\n    backgroundPosition: \"50% 50%\",\n    [theme.breakpoints.down(\"xs\")]: {\n      height: \"4rem\",\n      width: \"4rem\"\n    }\n  },\n  companyName: {\n    borderRadius: 50,\n    overflow: \"hidden\",\n    width: \"100%\",\n    fontSize: 13,\n    alignSelf: \"center\"\n  },\n  jobContainerHover: {\n    position: \"absolute\",\n    width: \"100%\",\n    height: \"100%\",\n    left: 0,\n    top: 0\n  },\n  paper: {\n    marginTop: 12,\n    position: \"relative\",\n    \"&:hover\": {\n      backgroundColor: theme.palette.custom.jobListHoverColor\n    }\n  },\n  dateInfo: {\n    \"& span\": {\n      marginRight: 20,\n      fontSize: 16,\n      [theme.breakpoints.down(\"xs\")]: {\n        fontSize: \"0.8rem\"\n      },\n      [theme.breakpoints.down(\"sm\")]: {\n        fontSize: \"0.9rem\"\n      }\n    }\n  },\n  paginationBody: {\n    backgroundColor: theme.palette.custom.background\n  }\n});\n\nconst JobsComponent = _ref => {\n  let {\n    jobs,\n    changeAdvertPage,\n    filterJobs,\n    advertPages,\n    selectedPage,\n    favoriteJobs,\n    toggleFavoriteJobs,\n    showSpinner,\n    showSuccessSnackbar,\n    showDialog,\n    userRole,\n    isToDeleteAdvertisementId,\n    closeSnackbar,\n    openAdToSeeAdInfo,\n    warnToDelete,\n    isWarnToDelete,\n    deleteAdvertisement,\n    classes,\n    fetchJobById\n  } = _ref;\n  const {\n    t\n  } = useTranslation(\"jobsList\", \"jobs\");\n  const [jobsToRender, setJobsToRender] = useState([]);\n  const [dateOfApplication, setDateOfApplication] = useState();\n  const [address, setAddress] = useState();\n  useEffect(() => {\n    axios.get(`https://localhost:7262/jobsEn`).then(res => {\n      setJobsToRender(res.data); // let date = res.data.dateOfApplication.split('.')\n\n      if (date.length === 3) {\n        setDateOfApplication(res.data.dateOfApplication);\n      } else {\n        setDateOfApplication(dateFormat(res.data.dateOfApplication));\n      }\n\n      setAddress(res.data.jobPostAddress);\n      setDateOfApplication(res.data.dateOfApplication); // setDateOfApplication(res.data.dateOfApplication)\n      // setAddress(res.data.jobPostAddress)\n    });\n  }, []);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 206,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 207,\n      columnNumber: 7\n    }\n  }, address)) // <div>\n  //   <SEO title=\"Töökohad | Jobportal\" />\n  //   <div className={classes.heroImage}>\n  //     <div className={classes.titleSpacer} />\n  //     <h1 className={classes.heroImageTitle}>{t(\"heroTitle\")}</h1>\n  //   </div>\n  //   <div>\n  //     <Grid\n  //       container\n  //       justifyContent=\"space-around\"\n  //       className={jobsToRender.length !== 0 ? classes.listContainer : null}\n  //     >\n  //       <Grid item md={3} xs={10} xl={2}>\n  //         <div className={classes.searchForm}>\n  //           <SearchFormContainer />\n  //         </div>\n  //       </Grid>\n  //       <Grid item md={8} xs={12} sm={10} xl={8}>\n  //         {jobsToRender &&\n  //           jobsToRender.length === 0 &&\n  //           showSpinner === false && (\n  //             <p className={classes.emptyResult}>\n  //               <strong>{t(\"noJobsFound\")}</strong>\n  //             </p>\n  //           )}\n  //         <Loader showSpinner={showSpinner} />\n  //         {jobsToRender &&\n  //           jobsToRender\n  //             .slice(selectedPage * 10, selectedPage * 10 + 10)\n  //             .map((item) => {\n  //               return (\n  //                 <div key={`${item.companyBusinessId}${item.id}`}>\n  //                   <Paper className={classes.paper}>\n  //                     <Grid\n  //                       container\n  //                       style={{ padding: 8 }}\n  //                       spacing={1}\n  //                       alignItems=\"center\"\n  //                       justifyContent=\"space-around\"\n  //                     >\n  //                       {userRole === \"admin\" ? ( // To give the admins same view as Companies so they can edit ads!\n  //                         <Link\n  //                           className={classes.jobContainerHover}\n  //                           to={customURL(item.url, \"open_position\")}\n  //                           onClick={() => fetchJobById(item.id)}\n  //                         />\n  //                       ) : (\n  //                         <Link\n  //                           onClick={() => fetchJobById(item.id)}\n  //                           className={classes.jobContainerHover}\n  //                           to={customURL(item.url, \"open_position\")}\n  //                         />\n  //                       )}\n  //                       <Grid\n  //                         item\n  //                         sm={2}\n  //                         xs={4}\n  //                         lg={2}\n  //                         xl={1}\n  //                         style={{ display: \"contents\" }}\n  //                       >\n  //                         <div className={classes.logoContainer}>\n  //                           {item.logo ? (\n  //                             // <div\n  //                             //   className={classes.logoDiv}\n  //                             //   style={{\n  //                             //     backgroundImage: `url(${item.logo[0].path})`,\n  //                             //   }}\n  //                             // />\n  //                             <span className={classes.companyName}>\n  //                               {item.companyName.length > 9\n  //                                 ? `${item.companyName.slice(0, 9)}...`\n  //                                 : item.companyName}\n  //                             </span>\n  //                           ) : (\n  //                             <span className={classes.companyName}>\n  //                               {item.companyName.length > 9\n  //                                 ? `${item.companyName.slice(0, 9)}...`\n  //                                 : item.companyName}\n  //                             </span>\n  //                           )}\n  //                         </div>\n  //                       </Grid>\n  //                       <Grid\n  //                         item\n  //                         sm={6}\n  //                         xs={8}\n  //                         lg={7}\n  //                         xl={5}\n  //                         className={classes.jobInfobody}\n  //                       >\n  //                         <div>\n  //                           <h3\n  //                             className={classNames(\n  //                               classes.jobTitle,\n  //                               classes.jobInfo\n  //                             )}\n  //                           >\n  //                             {item.jobName}\n  //                           </h3>\n  //                         </div>\n  //                         <div>\n  //                           <h5 className={classes.companyInfo}>\n  //                             {item.companyName},\n  //                             {address}\n  //                           </h5>\n  //                         </div>\n  //                         <Hidden only={\"xl\"}>\n  //                           <Grid container className={classes.dateInfo}>\n  //                             <Grid item>\n  //                               <span>\n  //                                 {t(\"publishedDate\")}:\n  //                                 {/* {item.dateOfApplication} */}\n  //                                 'At the moment'\n  //                               </span>\n  //                             </Grid>\n  //                             <Grid item>\n  //                               <span>\n  //                                 {t(\"applicationDueDate\")}:\n  //                                 {dateOfApplication}\n  //                               </span>\n  //                             </Grid>\n  //                           </Grid>\n  //                         </Hidden>\n  //                       </Grid>\n  //                       <Grid item xl={2}>\n  //                         <Hidden only={[\"xs\", \"sm\", \"md\", \"lg\"]}>\n  //                           <Grid item>\n  //                             <span>\n  //                               {t(\"publishedDate\")}:\n  //                               {/* {item.dateOfApplication} */}\n  //                               'At the moment'\n  //                             </span>\n  //                           </Grid>\n  //                           <Grid item>\n  //                             <span>\n  //                               {t(\"applicationDueDate\")}:\n  //                               {dateOfApplication}\n  //                             </span>\n  //                           </Grid>\n  //                         </Hidden>\n  //                       </Grid>\n  //                       <Grid item xl={2} lg={3} md={4} sm={4} xs={12}>\n  //                         <Grid\n  //                           container\n  //                           justifyContent=\"space-between\"\n  //                           spacing={2}\n  //                         >\n  //                           <Grid item sm={5} xs={6}>\n  //                             {userRole === \"admin\" ? ( // For admins show deleteBtn instead of FavBtn\n  //                               <Button\n  //                                 variant=\"outlined\"\n  //                                 color=\"secondary\"\n  //                                 onClick={() =>\n  //                                   warnToDelete(\n  //                                     `${item.id}admin${item.companyBusinessId}`\n  //                                   )\n  //                                 }\n  //                               >\n  //                                 {t(\"common:deleteBtn\")}\n  //                               </Button>\n  //                             ) : (\n  //                               <FavBtn\n  //                                 className={classes.favBtn}\n  //                                 handleFav={() => {\n  //                                   toggleFavoriteJobs(\n  //                                     item.companyBusinessId,\n  //                                     item.id,\n  //                                     !favoriteJobs.some(\n  //                                       (favList) =>\n  //                                         favList.companyBusinessId ===\n  //                                           item.companyBusinessId &&\n  //                                         favList.id ===\n  //                                           item.id\n  //                                     )\n  //                                   );\n  //                                 }}\n  //                                 isFav={favoriteJobs.some(\n  //                                   (favList) =>\n  //                                     favList.companyBusinessId ===\n  //                                       item.companyBusinessId &&\n  //                                     favList.id ===\n  //                                       item.id\n  //                                 )} // checking from the favoriteJobs list\n  //                                 btnText={\n  //                                   !favoriteJobs.some(\n  //                                     (favList) =>\n  //                                       favList.companyBusinessId ===\n  //                                         item.companyBusinessId &&\n  //                                       favList.id ===\n  //                                         item.id\n  //                                   )\n  //                                     ? t(\"addFav\")\n  //                                     : t(\"delFav\")\n  //                                 }\n  //                               />\n  //                             )}\n  //                           </Grid>\n  //                           <Grid item sm={5} xs={6}>\n  //                             <div>\n  //                               {userRole === \"admin\" ? ( // To show the company view so admins can edit the ads.\n  //                                 <Link\n  //                                   className=\"btnLink\"\n  //                                   to={customURL(item.url, \"internal\")}\n  //                                 >\n  //                                   <Button\n  //                                     variant=\"contained\"\n  //                                     color=\"primary\"\n  //                                     onClick={() =>\n  //                                       fetchJobById(item.id)\n  //                                     }\n  //                                   >\n  //                                     {t(\"common:openBtn\")}\n  //                                   </Button>\n  //                                 </Link>\n  //                               ) : (\n  //                                 <Link\n  //                                   className=\"btnLink\"\n  //                                   to={customURL(item.url, \"open_position\")}\n  //                                 >\n  //                                   <Button\n  //                                     variant=\"contained\"\n  //                                     color=\"primary\"\n  //                                     className=\"fullWidthBtn\"\n  //                                     onClick={() =>\n  //                                       fetchJobById(item.id)\n  //                                     }\n  //                                   >\n  //                                     {t(\"watchBtn\")}\n  //                                   </Button>\n  //                                 </Link>\n  //                               )}\n  //                             </div>\n  //                           </Grid>\n  //                         </Grid>\n  //                       </Grid>\n  //                     </Grid>\n  //                   </Paper>\n  //                 </div>\n  //               );\n  //             })}\n  //       </Grid>\n  //     </Grid>\n  //     <Snackbar\n  //       anchorOrigin={{\n  //         vertical: \"bottom\",\n  //         horizontal: \"center\",\n  //       }}\n  //       open={showSuccessSnackbar}\n  //       autoHideDuration={2000}\n  //       onClose={() => {\n  //         closeSnackbar();\n  //       }}\n  //     >\n  //       <MySnackbarContentWrapper\n  //         variant=\"success\"\n  //         message={t(\"successMsg\")}\n  //         onClose={() => {\n  //           closeSnackbar();\n  //         }}\n  //       />\n  //     </Snackbar>\n  //     <CustomizedDialog\n  //       showDialog={showDialog}\n  //       dialogText={t(\"loginText\")}\n  //       loginModal\n  //     />\n  //     <CustomizedDialog\n  //       showDialog={showDialog && isWarnToDelete}\n  //       dialogText={t(\"jobs:warnToDeletePostText\")}\n  //       warnToDeleteModal\n  //       handleClick={() => deleteAdvertisement(isToDeleteAdvertisementId)}\n  //     />\n  //   </div>\n  //   <div className={classes.paginationBody}>\n  //     <ReactPaginate\n  //       previousLabel={<NavigateBeforeIcon />}\n  //       nextLabel={<NavigateNextIcon />}\n  //       breakLabel=\"...\"\n  //       breakClassName=\"break-me\"\n  //       pageCount={3000}\n  //       marginPagesDisplayed={2}\n  //       pageRangeDisplayed={5}\n  //       onPageChange={(data) => {\n  //         changeAdvertPage({\n  //           selected: data.selected,\n  //         });\n  //         filterJobs(true);\n  //       }}\n  //       containerClassName=\"pagination\"\n  //       subContainerClassName=\"pages pagination\"\n  //       activeClassName=\"active\"\n  //       forcePage={selectedPage}\n  //       // style={{backgroundColor: '#F9FAFB'}}\n  //     />\n  //   </div>\n  // </div>\n  ;\n};\n\nexport default withStyles(styles)(JobsComponent);","map":{"version":3,"names":["React","useEffect","useState","classNames","Link","Grid","Paper","Button","Snackbar","Hidden","withStyles","ReactPaginate","NavigateNextIcon","NavigateBeforeIcon","useTranslation","customURL","dateFormat","FavBtn","SearchFormContainer","MySnackbarContentWrapper","CustomizedDialog","Loader","jobHeroImg","SEO","axios","styles","theme","heroImage","height","background","backgroundSize","backgroundPosition","backgroundColor","heroImageTitle","color","textAlign","paddingTop","fontWeight","fontSize","breakpoints","down","searchForm","marginTop","palette","primary","main","padding","jobInfo","custom","darkText","titleSpacer","up","jobTitle","companyInfo","jobInfobody","paddingLeft","emptyResult","listContainer","paddingBottom","logoContainer","width","position","display","marginLeft","logoDiv","backgroundRepeat","companyName","borderRadius","overflow","alignSelf","jobContainerHover","left","top","paper","jobListHoverColor","dateInfo","marginRight","paginationBody","JobsComponent","jobs","changeAdvertPage","filterJobs","advertPages","selectedPage","favoriteJobs","toggleFavoriteJobs","showSpinner","showSuccessSnackbar","showDialog","userRole","isToDeleteAdvertisementId","closeSnackbar","openAdToSeeAdInfo","warnToDelete","isWarnToDelete","deleteAdvertisement","classes","fetchJobById","t","jobsToRender","setJobsToRender","dateOfApplication","setDateOfApplication","address","setAddress","get","then","res","data","date","length","jobPostAddress"],"sources":["/Users/eduardkazeks/Documents/GitHub/JobPortalEE/src/components/jobs/jobs.component.js"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport classNames from \"classnames\";\nimport { Link } from \"react-router-dom\";\nimport { Grid, Paper, Button, Snackbar, Hidden } from \"@material-ui/core\";\nimport { withStyles } from \"@material-ui/core/styles\";\nimport ReactPaginate from \"react-paginate\";\nimport NavigateNextIcon from \"@material-ui/icons/NavigateNext\";\nimport NavigateBeforeIcon from \"@material-ui/icons/NavigateBefore\";\nimport { useTranslation } from \"react-i18next\";\nimport { customURL, dateFormat } from \"../../utils/helperFunctions\";\nimport { FavBtn } from \"../../utils/favBtn.js\";\nimport SearchFormContainer from \"../../containers/jobs/searchForm.container.js\";\nimport { MySnackbarContentWrapper } from \"../../utils/snackbar.utils\";\nimport CustomizedDialog from \"../../utils/customizedDialog\";\nimport Loader from \"../../utils/loader\";\nimport jobHeroImg from \"../../images/jobportal_hero.jpg\";\nimport { SEO } from \"../seo/metaInfo.component\";\nimport axios from \"axios\";\n\nconst styles = (theme) => ({\n  heroImage: {\n    height: 420,\n    background: `url(${jobHeroImg}) no-repeat`,\n    backgroundSize: \"contain\",\n    backgroundPosition: \"center center\",\n    backgroundColor: \"#F1B1B1\",\n  },\n  heroImageTitle: {\n    color: \"white\",\n    textAlign: \"center\",\n    paddingTop: 20,\n    fontWeight: 800,\n    fontSize: \"4.5rem\",\n    [theme.breakpoints.down(\"sm\")]: {\n      fontSize: \"2.5rem !important\",\n    },\n  },\n  searchForm: {\n    marginTop: -150,\n    backgroundColor: theme.palette.primary.main,\n    padding: \"50px 10px 70px 10px\",\n  },\n  jobInfo: {\n    color: theme.palette.custom.darkText,\n    [theme.breakpoints.down(\"xs\")]: {\n      fontSize: \"1rem\",\n    },\n  },\n  titleSpacer: {\n    [theme.breakpoints.up(\"sm\")]: {\n      height: 170,\n    },\n  },\n  jobTitle: {\n    color: theme.palette.primary.main,\n\n    fontWeight: 600,\n    [theme.breakpoints.down(\"xs\")]: {\n      fontSize: 18,\n    },\n    [theme.breakpoints.up(\"sm\")]: {\n      fontSize: 20,\n    },\n    [theme.breakpoints.up(\"lg\")]: {\n      fontSize: 22,\n    },\n  },\n  companyInfo: {\n    fontWeight: 400,\n    [theme.breakpoints.down(\"xs\")]: {\n      fontSize: 14,\n    },\n    [theme.breakpoints.up(\"sm\")]: {\n      fontSize: 16,\n    },\n    [theme.breakpoints.up(\"lg\")]: {\n      fontSize: 18,\n    },\n  },\n\n  jobInfobody: {\n    [theme.breakpoints.up(\"md\")]: {\n      paddingLeft: \"12px !important\",\n    },\n    [theme.breakpoints.up(\"lg\")]: {\n      paddingLeft: \"40px !important\",\n    },\n  },\n\n  emptyResult: {\n    padding: \"50px 20px 70px 20px\",\n  },\n  listContainer: {\n    backgroundColor: theme.palette.custom.background,\n    paddingBottom: 30,\n  },\n  logoContainer: {\n    height: \"6rem\",\n    width: \"6rem\",\n    position: \"relative\",\n    display: \"flex\",\n    [theme.breakpoints.down(\"xs\")]: {\n      height: \"6rem\",\n      width: \"5rem\",\n      fontSize: 12,\n    },\n    [theme.breakpoints.up(\"lg\")]: {\n      marginLeft: 20,\n    },\n  },\n  logoDiv: {\n    height: \"5.5rem\",\n    width: \"5.5rem\",\n    backgroundSize: \"contain\",\n    backgroundRepeat: \"no-repeat\",\n    backgroundPosition: \"50% 50%\",\n    [theme.breakpoints.down(\"xs\")]: {\n      height: \"4rem\",\n      width: \"4rem\",\n    },\n  },\n  companyName: {\n    borderRadius: 50,\n    overflow: \"hidden\",\n    width: \"100%\",\n    fontSize: 13,\n    alignSelf: \"center\",\n  },\n  jobContainerHover: {\n    position: \"absolute\",\n    width: \"100%\",\n    height: \"100%\",\n    left: 0,\n    top: 0,\n  },\n  paper: {\n    marginTop: 12,\n    position: \"relative\",\n    \"&:hover\": {\n      backgroundColor: theme.palette.custom.jobListHoverColor,\n    },\n  },\n  dateInfo: {\n    \"& span\": {\n      marginRight: 20,\n      fontSize: 16,\n      [theme.breakpoints.down(\"xs\")]: {\n        fontSize: \"0.8rem\",\n      },\n      [theme.breakpoints.down(\"sm\")]: {\n        fontSize: \"0.9rem\",\n      },\n    },\n  },\n  paginationBody: {\n    backgroundColor: theme.palette.custom.background,\n  },\n});\n\nconst JobsComponent = ({\n  jobs,\n  changeAdvertPage,\n  filterJobs,\n  advertPages,\n  selectedPage,\n  favoriteJobs,\n  toggleFavoriteJobs,\n  showSpinner,\n  showSuccessSnackbar,\n  showDialog,\n  userRole,\n  isToDeleteAdvertisementId,\n  closeSnackbar,\n  openAdToSeeAdInfo,\n  warnToDelete,\n  isWarnToDelete,\n  deleteAdvertisement,\n  classes,\n  fetchJobById\n}) => {\n  const { t } = useTranslation(\"jobsList\", \"jobs\");\n  const [jobsToRender, setJobsToRender] = useState([]);\n  const [dateOfApplication, setDateOfApplication] = useState()\n  const [address,setAddress] = useState();\n\n  useEffect(() => {\n    axios.get(`https://localhost:7262/jobsEn`).then((res) => {\n      setJobsToRender(res.data);\n     // let date = res.data.dateOfApplication.split('.')\n\n      if(date.length === 3 )\n      {\n        setDateOfApplication(res.data.dateOfApplication)\n      }\n      else{\n        setDateOfApplication(dateFormat(res.data.dateOfApplication))\n      } \n        setAddress(res.data.jobPostAddress)\n      setDateOfApplication(res.data.dateOfApplication)\n      // setDateOfApplication(res.data.dateOfApplication)\n      // setAddress(res.data.jobPostAddress)\n    });\n  }, [])\n\n  return ( \n    <div>\n      <h1>{address}</h1>\n    </div>\n\n    // <div>\n    //   <SEO title=\"Töökohad | Jobportal\" />\n    //   <div className={classes.heroImage}>\n    //     <div className={classes.titleSpacer} />\n    //     <h1 className={classes.heroImageTitle}>{t(\"heroTitle\")}</h1>\n    //   </div>\n    //   <div>\n    //     <Grid\n    //       container\n    //       justifyContent=\"space-around\"\n    //       className={jobsToRender.length !== 0 ? classes.listContainer : null}\n    //     >\n    //       <Grid item md={3} xs={10} xl={2}>\n    //         <div className={classes.searchForm}>\n    //           <SearchFormContainer />\n    //         </div>\n    //       </Grid>\n    //       <Grid item md={8} xs={12} sm={10} xl={8}>\n    //         {jobsToRender &&\n    //           jobsToRender.length === 0 &&\n    //           showSpinner === false && (\n    //             <p className={classes.emptyResult}>\n    //               <strong>{t(\"noJobsFound\")}</strong>\n    //             </p>\n    //           )}\n    //         <Loader showSpinner={showSpinner} />\n\n    //         {jobsToRender &&\n    //           jobsToRender\n    //             .slice(selectedPage * 10, selectedPage * 10 + 10)\n    //             .map((item) => {\n    //               return (\n    //                 <div key={`${item.companyBusinessId}${item.id}`}>\n    //                   <Paper className={classes.paper}>\n    //                     <Grid\n    //                       container\n    //                       style={{ padding: 8 }}\n    //                       spacing={1}\n    //                       alignItems=\"center\"\n    //                       justifyContent=\"space-around\"\n    //                     >\n    //                       {userRole === \"admin\" ? ( // To give the admins same view as Companies so they can edit ads!\n    //                         <Link\n    //                           className={classes.jobContainerHover}\n    //                           to={customURL(item.url, \"open_position\")}\n    //                           onClick={() => fetchJobById(item.id)}\n    //                         />\n    //                       ) : (\n    //                         <Link\n    //                           onClick={() => fetchJobById(item.id)}\n    //                           className={classes.jobContainerHover}\n    //                           to={customURL(item.url, \"open_position\")}\n    //                         />\n    //                       )}\n    //                       <Grid\n    //                         item\n    //                         sm={2}\n    //                         xs={4}\n    //                         lg={2}\n    //                         xl={1}\n    //                         style={{ display: \"contents\" }}\n    //                       >\n    //                         <div className={classes.logoContainer}>\n    //                           {item.logo ? (\n    //                             // <div\n    //                             //   className={classes.logoDiv}\n    //                             //   style={{\n    //                             //     backgroundImage: `url(${item.logo[0].path})`,\n    //                             //   }}\n    //                             // />\n    //                             <span className={classes.companyName}>\n    //                               {item.companyName.length > 9\n    //                                 ? `${item.companyName.slice(0, 9)}...`\n    //                                 : item.companyName}\n    //                             </span>\n    //                           ) : (\n    //                             <span className={classes.companyName}>\n    //                               {item.companyName.length > 9\n    //                                 ? `${item.companyName.slice(0, 9)}...`\n    //                                 : item.companyName}\n    //                             </span>\n    //                           )}\n    //                         </div>\n    //                       </Grid>\n    //                       <Grid\n    //                         item\n    //                         sm={6}\n    //                         xs={8}\n    //                         lg={7}\n    //                         xl={5}\n    //                         className={classes.jobInfobody}\n    //                       >\n    //                         <div>\n    //                           <h3\n    //                             className={classNames(\n    //                               classes.jobTitle,\n    //                               classes.jobInfo\n    //                             )}\n    //                           >\n    //                             {item.jobName}\n    //                           </h3>\n    //                         </div>\n\n    //                         <div>\n    //                           <h5 className={classes.companyInfo}>\n    //                             {item.companyName},\n    //                             {address}\n    //                           </h5>\n    //                         </div>\n    //                         <Hidden only={\"xl\"}>\n    //                           <Grid container className={classes.dateInfo}>\n    //                             <Grid item>\n    //                               <span>\n    //                                 {t(\"publishedDate\")}:\n    //                                 {/* {item.dateOfApplication} */}\n    //                                 'At the moment'\n    //                               </span>\n    //                             </Grid>\n    //                             <Grid item>\n    //                               <span>\n    //                                 {t(\"applicationDueDate\")}:\n    //                                 {dateOfApplication}\n    //                               </span>\n    //                             </Grid>\n    //                           </Grid>\n    //                         </Hidden>\n    //                       </Grid>\n    //                       <Grid item xl={2}>\n    //                         <Hidden only={[\"xs\", \"sm\", \"md\", \"lg\"]}>\n    //                           <Grid item>\n    //                             <span>\n    //                               {t(\"publishedDate\")}:\n    //                               {/* {item.dateOfApplication} */}\n    //                               'At the moment'\n    //                             </span>\n    //                           </Grid>\n    //                           <Grid item>\n    //                             <span>\n    //                               {t(\"applicationDueDate\")}:\n    //                               {dateOfApplication}\n    //                             </span>\n    //                           </Grid>\n    //                         </Hidden>\n    //                       </Grid>\n    //                       <Grid item xl={2} lg={3} md={4} sm={4} xs={12}>\n    //                         <Grid\n    //                           container\n    //                           justifyContent=\"space-between\"\n    //                           spacing={2}\n    //                         >\n    //                           <Grid item sm={5} xs={6}>\n    //                             {userRole === \"admin\" ? ( // For admins show deleteBtn instead of FavBtn\n    //                               <Button\n    //                                 variant=\"outlined\"\n    //                                 color=\"secondary\"\n    //                                 onClick={() =>\n    //                                   warnToDelete(\n    //                                     `${item.id}admin${item.companyBusinessId}`\n    //                                   )\n    //                                 }\n    //                               >\n    //                                 {t(\"common:deleteBtn\")}\n    //                               </Button>\n    //                             ) : (\n    //                               <FavBtn\n    //                                 className={classes.favBtn}\n    //                                 handleFav={() => {\n    //                                   toggleFavoriteJobs(\n    //                                     item.companyBusinessId,\n    //                                     item.id,\n    //                                     !favoriteJobs.some(\n    //                                       (favList) =>\n    //                                         favList.companyBusinessId ===\n    //                                           item.companyBusinessId &&\n    //                                         favList.id ===\n    //                                           item.id\n    //                                     )\n    //                                   );\n    //                                 }}\n    //                                 isFav={favoriteJobs.some(\n    //                                   (favList) =>\n    //                                     favList.companyBusinessId ===\n    //                                       item.companyBusinessId &&\n    //                                     favList.id ===\n    //                                       item.id\n    //                                 )} // checking from the favoriteJobs list\n    //                                 btnText={\n    //                                   !favoriteJobs.some(\n    //                                     (favList) =>\n    //                                       favList.companyBusinessId ===\n    //                                         item.companyBusinessId &&\n    //                                       favList.id ===\n    //                                         item.id\n    //                                   )\n    //                                     ? t(\"addFav\")\n    //                                     : t(\"delFav\")\n    //                                 }\n    //                               />\n    //                             )}\n    //                           </Grid>\n    //                           <Grid item sm={5} xs={6}>\n    //                             <div>\n    //                               {userRole === \"admin\" ? ( // To show the company view so admins can edit the ads.\n    //                                 <Link\n    //                                   className=\"btnLink\"\n    //                                   to={customURL(item.url, \"internal\")}\n    //                                 >\n    //                                   <Button\n    //                                     variant=\"contained\"\n    //                                     color=\"primary\"\n    //                                     onClick={() =>\n    //                                       fetchJobById(item.id)\n    //                                     }\n    //                                   >\n    //                                     {t(\"common:openBtn\")}\n    //                                   </Button>\n    //                                 </Link>\n    //                               ) : (\n    //                                 <Link\n    //                                   className=\"btnLink\"\n    //                                   to={customURL(item.url, \"open_position\")}\n    //                                 >\n    //                                   <Button\n    //                                     variant=\"contained\"\n    //                                     color=\"primary\"\n    //                                     className=\"fullWidthBtn\"\n    //                                     onClick={() =>\n    //                                       fetchJobById(item.id)\n    //                                     }\n    //                                   >\n    //                                     {t(\"watchBtn\")}\n    //                                   </Button>\n    //                                 </Link>\n    //                               )}\n    //                             </div>\n    //                           </Grid>\n    //                         </Grid>\n    //                       </Grid>\n    //                     </Grid>\n    //                   </Paper>\n    //                 </div>\n    //               );\n    //             })}\n    //       </Grid>\n    //     </Grid>\n    //     <Snackbar\n    //       anchorOrigin={{\n    //         vertical: \"bottom\",\n    //         horizontal: \"center\",\n    //       }}\n    //       open={showSuccessSnackbar}\n    //       autoHideDuration={2000}\n    //       onClose={() => {\n    //         closeSnackbar();\n    //       }}\n    //     >\n    //       <MySnackbarContentWrapper\n    //         variant=\"success\"\n    //         message={t(\"successMsg\")}\n    //         onClose={() => {\n    //           closeSnackbar();\n    //         }}\n    //       />\n    //     </Snackbar>\n    //     <CustomizedDialog\n    //       showDialog={showDialog}\n    //       dialogText={t(\"loginText\")}\n    //       loginModal\n    //     />\n    //     <CustomizedDialog\n    //       showDialog={showDialog && isWarnToDelete}\n    //       dialogText={t(\"jobs:warnToDeletePostText\")}\n    //       warnToDeleteModal\n    //       handleClick={() => deleteAdvertisement(isToDeleteAdvertisementId)}\n    //     />\n    //   </div>\n    //   <div className={classes.paginationBody}>\n    //     <ReactPaginate\n    //       previousLabel={<NavigateBeforeIcon />}\n    //       nextLabel={<NavigateNextIcon />}\n    //       breakLabel=\"...\"\n    //       breakClassName=\"break-me\"\n    //       pageCount={3000}\n    //       marginPagesDisplayed={2}\n    //       pageRangeDisplayed={5}\n    //       onPageChange={(data) => {\n    //         changeAdvertPage({\n    //           selected: data.selected,\n    //         });\n    //         filterJobs(true);\n    //       }}\n    //       containerClassName=\"pagination\"\n    //       subContainerClassName=\"pages pagination\"\n    //       activeClassName=\"active\"\n    //       forcePage={selectedPage}\n    //       // style={{backgroundColor: '#F9FAFB'}}\n    //     />\n    //   </div>\n    // </div>\n  );\n};\n\nexport default withStyles(styles)(JobsComponent);\n"],"mappings":"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AAG,CAACC,IAAJ,CAASP,iBAAV,CAApB,CAZuD,CAavD;MACA;IACD,CAfD;EAgBD,CAjBQ,EAiBN,EAjBM,CAAT;EAmBA,oBACE;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,gBACE;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,GAAKE,OAAL,CADF,CADF,CAKE;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EA/SF;AAiTD,CA9VD;;AAgWA,eAAe7F,UAAU,CAACe,MAAD,CAAV,CAAmBqD,aAAnB,CAAf"},"metadata":{},"sourceType":"module"}