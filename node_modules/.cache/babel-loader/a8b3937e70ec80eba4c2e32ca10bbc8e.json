{"ast":null,"code":"import { useState } from 'react';\nimport { takeEvery, put, call } from 'redux-saga/effects';\nimport { getFormValues, change, formValueSelector, initialize, getFormInitialValues, touch } from 'redux-form';\nimport { SAVE_AND_PUBLISH_ADVERTISEMENT, UPDATE_AND_PUBLISH_ADVERTISEMENT, API_SERVER, API_SERVER_EST, API_SERVER_EST_GET_ID, GET_ALL_CAMPAIGNS, OPEN_AD_TO_SEE_AD_INFO, UPDATE_ADVERTISEMENT, POPULATE_VACANCY_FORM, DELETE_ADVERTISEMENT, GET_ALL_JOB_CATEGORY, GET_ALL_ADS_BY_STATUS, SAVE_ADVERTISEMENT_AS_DRAFT, SAVE_NEW_CAMPAIGN, CHANGE_ACTIVE_POST_TO_INACTIVE, GET_APPLICATION_DETAILS_BY_ID, UPDATE_APPLICANT_STATUS, GET_JOBPOST_VIEWS_BY_DATE, NAVIGATE_ADS_FROM_MAIN_MENU, UPDATE_JOB_APPLICATION_DETAILS, EDIT_INTERVIEW_DETAILS, SAVE_MARKETING_DETAILS, DELETE_APPLICATION, CHANGE_ROUTE, ADMIN_GET_USER_PROFILE, HELP_SERVICE_FEE, SOS_SERVICE_FEE, POPULATE_EMAIL_MESSAGE, AUTO_EMAIL_TO_APPLICANT, GET_JOBS_OFFERS, GET_JOBS_OFFERS_SUCCESS } from '../constants';\nimport store from '../store';\nimport { apiManualRequest, apiManualPost, apiOpenRequest, apiGetJobsOffers, fetchJobTags } from '../utils/request';\nimport { filterObj } from '../utils/wrappers';\nimport { getAllCampaignsSuccess, saveAndPublishAdvertisementSuccess, getAllJobCategorySuccess, saveAndPublishAdvertisementFailed, getAllAdsByStatusSuccess, saveAndPublishAdvertisement, showSuccessSnackbar, showFailedSnackbar, openAdToSeeAdInfo, populateVacancyFormSuccess, updateAndPublishAdvertisementSuccess, getApplicationDetailsById, getApplicationDetailsByIdSuccess, getJobPostViewsByDateSuccess, changeAdvertPage, getAllAdsByStatus, filterJobs, hideSpinner, saveMarketingDetailsSuccess, closeDialog, registerPayment, sendInvoiceToTalous, getCompanyProfileSuccess, openAdToSeeAdInfoSuccess, getJobsOffers, getAllJobCategoryFromEstoniaSuccess } from '../actions';\nimport { customTranslateCampaign } from '../utils/customTranslate';\nimport browserHistory from '../history';\nimport { messageTemplate } from '../components/companies/advertisements/automaticMessageToApplicants/messages';\n\nfunction* getAllCampaignsSaga() {\n  try {\n    const url = `${API_SERVER}/GetCampaigns`;\n    const result = yield call(apiManualRequest, url);\n    const resultParsed = JSON.parse(result.data);\n    yield put(getAllCampaignsSuccess(resultParsed));\n  } catch (error) {\n    console.log(error);\n  }\n}\n\nfunction* getAllJobCategorySaga() {\n  try {\n    const url = `${API_SERVER}/GetJobCategories`;\n    const result = yield call(apiOpenRequest, url);\n    const resultParsed = JSON.parse(result.data);\n    yield put(getAllJobCategorySuccess(resultParsed));\n  } catch (error) {\n    console.log(error);\n  }\n}\n\nfunction* getAllJobCategoryFromEstoniaSaga() {\n  try {\n    const url = `${API_SERVER_EST}`;\n    const jobTags = yield call(fetchJobTags, url);\n    const json = jobTags.json(); //const resultParsed = JSON.parse(jobTags.data);\n\n    yield put(getAllJobCategoryFromEstoniaSuccess(json));\n  } catch (error) {\n    console.log(error);\n  }\n}\n\nfunction* saveAndPublishAdvertisementSaga() {\n  try {\n    let url;\n    let body;\n    let parsedCompany = {};\n    const {\n      advertisement,\n      client,\n      companyProfile\n    } = store.getState();\n    const formValues = getFormValues('vacancy')(store.getState());\n    const paymentInfoForm = getFormValues('paymentInfo')(store.getState());\n    const uuid = client.user.data[2];\n    const userRole = client.user.data[6].user_type;\n    const payment_method = paymentInfoForm && paymentInfoForm.payment_method;\n    const companyBusinessId = companyProfile.profile.companyBusinessId;\n\n    if (!formValues.companyBusinessId) {\n      formValues.companyBusinessId = companyBusinessId; // Also sending company_id to add company specific post.\n    }\n\n    yield put(closeDialog());\n\n    if (userRole === 'admin') {\n      const companyDetails = {\n        companyBusinessId: parseInt(formValues.companyBusinessId),\n        uuid\n      };\n      const jobPostOwner = yield call(apiManualPost, `${API_SERVER_EST}/postJob`, JSON.stringify({ ...companyDetails\n      }));\n      parsedCompany = JSON.parse(jobPostOwner.data);\n    }\n\n    const {\n      selectedCampaign,\n      isSaveAdvertisementAsDraft,\n      isToEdit,\n      uploadedImage,\n      marketingDetails,\n      extraService\n    } = advertisement;\n    const isDraft = isSaveAdvertisementAsDraft;\n    const refinedUploadedImage = uploadedImage && uploadedImage.name && uploadedImage.name.replace(/\\s+\\(\\d+\\)/g, 'JP'); // If stored filename has (int), dropzone doesn't understand the path..so changing such names before sending to db.\n\n    const refinedFormValues = filterObj('image_document', formValues);\n\n    if (isToEdit) {\n      url = `${API_SERVER}/UpdateJobPost`;\n    } else {\n      url = `${API_SERVER_EST}/postJob`;\n    }\n\n    const statusToUpdate = isDraft || extraService.help || extraService.sos ? 0 : selectedCampaign.type === 'free' ? 1 : 4;\n    const selectedService = extraService.help ? 'help' : extraService.sos ? 'sos' : null; // image_document array means, it already exists in db, no need to send while updating\n\n    if (Array.isArray(formValues.image_document) === true) {\n      body = { ...refinedFormValues,\n        uuid,\n        campaign_type: selectedCampaign.type,\n        status: statusToUpdate,\n        extra_service: selectedService\n      };\n    } else if (!uploadedImage.name) {\n      // no uploaded image means, no need to send any base64. Also, if there is an image stored in db..and we want to delete it, I am changing the formvalues of image_document in component\n      body = { ...formValues,\n        uuid,\n        campaign_type: selectedCampaign.type,\n        status: statusToUpdate,\n        extra_service: selectedService\n      };\n    } else if (uploadedImage.name && !Array.isArray(formValues.image_document)) {\n      const base64 = formValues.image_document;\n      body = { ...formValues,\n        uuid,\n        campaign_type: selectedCampaign.type,\n        status: statusToUpdate,\n        image_document: {\n          uuid,\n          document_id: uploadedImage.id,\n          path: '',\n          filename: refinedUploadedImage,\n          filetype: uploadedImage.type,\n          data: base64\n        },\n        extra_service: selectedService\n      };\n    }\n\n    if (selectedCampaign.includes_mktbudget) {\n      const {\n        marketing_platform,\n        more_budget,\n        marketing_budget\n      } = marketingDetails;\n      body.marketing_platform = !!marketing_platform ? marketing_platform : null;\n      body.more_budget = !!more_budget ? more_budget : null;\n      body.marketing_budget = !!marketing_budget ? parseInt(marketing_budget) : 0;\n    } // SAVING AND PUBLISHING JOBPOST\n\n\n    const result = yield call(apiManualPost, url, JSON.stringify({ ...body\n    }));\n    const parsedResult = JSON.parse(result.data); //console.log(result.data);\n    // If publishing post, Generate invoice under the hood via Talousvirta API or online payment via NETS\n\n    if (parsedResult) {\n      const {\n        company_name,\n        business_id,\n        firstname,\n        lastname,\n        email,\n        address,\n        zip_code,\n        city\n      } = userRole === 'admin' ? parsedCompany[0] : companyProfile.profile;\n      const jobTitle = formValues.jobName;\n      const postId = parsedResult[0].jobPostNumber;\n      const orderId = parsedResult[0].order_id;\n      const publishedPostStatus = parsedResult[0].job_post_status;\n      const description = `${jobTitle} | Kampanjapaketti - ${customTranslateCampaign(selectedCampaign.id)}`;\n      const mkt_description = `${jobTitle} | Lisätty markkinointiraha`;\n      const extra_service_description = `Aktivoitu lisäpalvelu | ${extraService.help ? 'HELP' : 'SOS'}`; // If mkt budget is added with campaigns with mkt budget, i.e. 5th campaign for now.\n\n      let marketing_budget = 0;\n\n      if (selectedCampaign.includes_mktbudget && !!parsedResult[0].marketing_budget) {\n        marketing_budget = parsedResult[0].marketing_budget;\n      }\n\n      const extra_service_fee = extraService.help ? HELP_SERVICE_FEE : extraService.sos ? SOS_SERVICE_FEE : 0;\n\n      if (publishedPostStatus === 0 && extra_service_fee > 0 || // If help and sos are added as extra service\n      publishedPostStatus === 4 // If paid campaigns are selected, temporary placeholder status\n      ) {\n        const isExtraServiceAdded = publishedPostStatus === 0 && extra_service_fee > 0 ? true : false;\n        const extra_service_fee_with_vat = extra_service_fee * 1.24; // Total price for the extra service including vat\n\n        const amount = parsedResult[0].job_post_campaign_money;\n        const totalSum = (marketing_budget + amount) * 1.24;\n        const details = {\n          company_id: formValues.company_id,\n          company_name,\n          business_id,\n          firstname,\n          lastname,\n          email,\n          address,\n          zip_code,\n          city,\n          description: isExtraServiceAdded ? extra_service_description : description,\n          totalSum: isExtraServiceAdded ? extra_service_fee_with_vat : totalSum,\n          amount: isExtraServiceAdded ? extra_service_fee : amount,\n          post_id: postId,\n          order_id: orderId,\n          marketing_budget,\n          mkt_description,\n          selectedCampaign\n        };\n\n        if (payment_method === 'invoice') {\n          yield put(sendInvoiceToTalous(details));\n        } else if (payment_method === 'online') {\n          yield put(registerPayment(details));\n        }\n      } // Post saved as a draft or free campaign or help/sos feature\n      //if (parsedResult[0].job_post_status !== 4)\n      else {\n        yield put(saveAndPublishAdvertisementSuccess());\n      }\n    } else {\n      yield put(saveAndPublishAdvertisementFailed());\n    }\n  } catch (error) {\n    console.log(error);\n    yield put(saveAndPublishAdvertisementFailed());\n  }\n}\n\nfunction* getJobPostByPostIdSaga(_ref) {\n  let {\n    id\n  } = _ref;\n\n  try {\n    const url = `${API_SERVER_EST}/${id}`;\n    const companyBusinessId = store.getState().companyProfile.profile.companyBusinessId;\n    const userRole = store.getState().client.user.data[6].user_type;\n    const body = JSON.stringify({\n      jobPostNumber: userRole === 'admin' ? id.split('admin')[0] : id,\n      companyBusinessId: userRole === 'admin' ? id.split('admin')[1] : companyBusinessId\n    });\n    const result = yield call(apiOpenRequest, url, body);\n    const resultParsed = JSON.parse(result.data);\n    yield put(openAdToSeeAdInfoSuccess(resultParsed[0]));\n  } catch (error) {\n    console.log(error);\n    yield put(hideSpinner());\n  }\n}\n\nfunction* getAllAdsByStatusSaga(_ref2) {\n  let {\n    status\n  } = _ref2;\n\n  try {\n    const url = `${API_SERVER}/SearchJobPosts`;\n    const {\n      client,\n      usersCompanyList,\n      companyProfile\n    } = store.getState();\n    const uuid = client.user.data[2];\n    const roleId = client.user.data[5];\n    let selectedCompanyId;\n    selectedCompanyId = usersCompanyList.selectedCompany.company_id;\n    const assignedCompanyId = client.user.data[6].company_id;\n\n    if (!selectedCompanyId) {\n      // For first time registered users, client company_id is null since user profile is not updated\n      selectedCompanyId = companyProfile.profile.company_id;\n    }\n\n    const company_id = roleId === 0 ? selectedCompanyId : assignedCompanyId; //super user with many companies\n\n    const body = JSON.stringify({\n      status,\n      uuid,\n      company_id\n    });\n    const result = yield call(apiManualPost, url, body);\n    const resultParsed = JSON.parse(result.data);\n    yield put(getAllAdsByStatusSuccess(status, resultParsed));\n  } catch (error) {\n    console.log(error);\n  }\n} // Populating vacancy form when editing or copying\n\n\nfunction* populateVacancyFormSaga(_ref3) {\n  let {\n    id,\n    isToEdit\n  } = _ref3;\n\n  try {\n    const url = `${API_SERVER_EST}`;\n    const companyId = store.getState().jobsToRender.companyBusinessId; //const campaigns = store.getState().advertisement.campaigns;\n\n    const userRole = store.getState().client.user.data[6].user_type;\n    const body = JSON.stringify({\n      jobPostNumber: userRole === 'admin' ? id.split('admin')[0] : id,\n      companyBusinessId: userRole === 'admin' ? id.split('admin')[1] : companyId\n    });\n    const result = yield call(apiManualPost, url, body);\n    const resultParsed = JSON.parse(result.data); // console.log('resultParsed', resultParsed);\n    // If we are populating from Draft Component, we are editing--> call UpdateJobPost API, it needs company_id && post_id which is being sent along with the vacancy form!\n\n    const {\n      post_id,\n      company_id,\n      company_image,\n      image_id,\n      job_title,\n      job_type,\n      job_hours,\n      job_category,\n      job_location,\n      job_description,\n      is_agreement,\n      due_date,\n      is_email_notification,\n      email,\n      notice_frequency,\n      campaign_id,\n      marketing_platform,\n      more_budget,\n      marketing_budget,\n      application_link\n    } = resultParsed[0];\n\n    if (isToEdit) {\n      yield put(change('vacancy', 'post_id', post_id));\n      yield put(change('vacancy', 'company_id', company_id));\n\n      if (company_image) {\n        yield put(change('vacancy', 'image_document', company_image));\n        yield put(change('vacancy', 'image_id', image_id));\n      }\n    }\n\n    yield put(change('vacancy', 'job_title', job_title));\n    yield put(change('vacancy', 'job_type', job_type));\n    yield put(change('vacancy', 'job_hours', job_hours));\n    yield put(change('vacancy', 'job_category', job_category));\n    yield put(change('vacancy', 'job_location', job_location));\n    yield put(change('vacancy', 'job_description', job_description));\n    yield put(change('vacancy', 'is_agreement', is_agreement));\n    yield put(change('vacancy', 'application_link', application_link));\n    yield put(change('vacancy', 'due_date', due_date));\n    yield put(change('vacancy', 'is_email_notification', is_email_notification));\n    yield put(change('vacancy', 'email', email));\n    yield put(change('vacancy', 'notice_frequency', notice_frequency)); //const postCampaign = campaigns.find(campaign => campaign.id === campaign_id);\n\n    const campaignDetails = {\n      // postCampaign,\n      marketing_platform,\n      more_budget,\n      marketing_budget\n    };\n    yield put(populateVacancyFormSuccess(campaignDetails, isToEdit));\n  } catch (e) {\n    console.log(e);\n  }\n} // Update advertisement - editAdvertForm is open/ Campaigns are not shown here.\n\n\nfunction* updateJobPostSaga() {\n  try {\n    const advertisement = store.getState().advertisement.viewSelectedAd;\n    const keys = Object.keys(advertisement); // console.log('keys', keys);\n\n    const refinedKeys = keys && keys.filter(key => key !== 'company_image' && key !== 'total_applicants' && key !== 'total_likes' && key !== 'total_viewed' && key !== 'value' && key !== 'company_logo' && key !== 'marketing_budget' // Don't update budget when just editing vacancy.\n    ); // Irrelevant keys, not needed here\n\n    for (const key of refinedKeys) {\n      yield put(change('editVacancy', key, advertisement[key]));\n    }\n\n    if (advertisement.company_image) {\n      yield put(change('editVacancy', 'image_document', advertisement.company_image));\n    }\n\n    if (!advertisement.notice_frequency) {\n      yield put(change('editVacancy', 'notice_frequency', 7));\n    }\n\n    yield put(change('editVacancy', 'is_agreement', true));\n  } catch (error) {\n    console.log(error);\n  }\n}\n\nfunction* updateAndPublishAdvertisementSaga() {\n  try {\n    let body;\n    const url = `${API_SERVER}/UpdateJobPost`;\n    const formValues = getFormValues('editVacancy')(store.getState());\n    const uuid = store.getState().client.user.data[2];\n    const {\n      uploadedImage\n    } = store.getState().advertisement;\n    const userRole = store.getState().client.user.data[6].user_type;\n    const refinedUploadedImage = uploadedImage && uploadedImage.name && uploadedImage.name.replace(/\\(\\d+\\)/, 'JP'); // If stored filename has (int), dropzone doesn't understand the path..so changing such names before sending to db.\n\n    const refinedFormValues = filterObj('image_document', formValues); // image_document array means, it already exists in db, no need to send while updating\n\n    if (Array.isArray(formValues.image_document) === true) {\n      body = JSON.stringify({ ...refinedFormValues,\n        uuid\n      });\n    } else if (!uploadedImage.name) {\n      // no uploaded image means, no need to send any base64. Also, if there is an image stored in db..and we want to delete it, I am changing the formvalues of image_document in component\n      body = JSON.stringify({ ...formValues,\n        uuid\n      });\n    } else {\n      const base64 = formValues.image_document;\n      body = JSON.stringify({ ...formValues,\n        uuid,\n        image_document: {\n          uuid,\n          document_id: uploadedImage.id,\n          path: '',\n          filename: refinedUploadedImage,\n          filetype: uploadedImage.type,\n          data: base64\n        }\n      });\n    }\n\n    const result = yield call(apiManualPost, url, body);\n    const parsedResult = JSON.parse(result.data);\n\n    if (parsedResult) {\n      yield put(updateAndPublishAdvertisementSuccess());\n\n      if (userRole === 'admin') {\n        yield put(openAdToSeeAdInfo(`${formValues.post_id}admin${formValues.company_id}`));\n      } else {\n        yield put(openAdToSeeAdInfo(formValues.post_id));\n      }\n    } else {\n      yield put(saveAndPublishAdvertisementFailed());\n    }\n  } catch (e) {\n    console.log(e);\n    yield put(saveAndPublishAdvertisementFailed());\n  }\n} // Update campaign\n\n\nfunction* updateCampaignSaga(_ref4) {\n  let {\n    id\n  } = _ref4;\n\n  try {\n    yield put(closeDialog());\n    const {\n      advertisement,\n      client,\n      companyProfile\n    } = store.getState();\n    const paymentInfoForm = getFormValues('paymentInfo')(store.getState());\n    const payment_method = paymentInfoForm && paymentInfoForm.payment_method; // Upgrade campaign\n\n    const url = `${API_SERVER}/HandleCampaignUpgrade`;\n    const uuid = store.getState().client.user.data[2];\n    const {\n      type,\n      includes_mktbudget\n    } = advertisement.selectedCampaign;\n    const campaign_id = advertisement.selectedCampaign.id;\n    const userRole = client.user.data[6].user_type;\n    const post_id = userRole === 'admin' ? id.split('admin')[0] : id;\n    const companyId = userRole === 'admin' ? id.split('admin')[1] : companyProfile.profile.company_id;\n    const due_date = formValueSelector('campaign')(store.getState(), 'due_date');\n    let parsedCompany = {};\n    const body = {\n      campaign_type: type,\n      uuid,\n      post_id,\n      company_id: companyId,\n      due_date\n    };\n\n    if (includes_mktbudget) {\n      const {\n        marketing_platform,\n        more_budget,\n        marketing_budget\n      } = advertisement.marketingDetails;\n      body.marketing_platform = !!marketing_platform ? marketing_platform : null;\n      body.more_budget = !!more_budget ? more_budget : null;\n      body.marketing_budget = !!marketing_budget ? parseInt(marketing_budget) : 0;\n    }\n\n    const result = yield call(apiManualPost, url, JSON.stringify({ ...body\n    }));\n    const resultParsed = JSON.parse(result.data);\n\n    if (resultParsed) {\n      //If admin is upgrading post or updating jobpost on behalf of companies:\n      if (userRole === 'admin') {\n        const body2 = {\n          company_id: parseInt(companyId),\n          uuid\n        };\n        const jobPostOwner = yield call(apiManualPost, `${API_SERVER}/GetCompanyProfile`, JSON.stringify({ ...body2\n        }));\n        parsedCompany = JSON.parse(jobPostOwner.data);\n      }\n\n      const {\n        company_name,\n        business_id,\n        firstname,\n        lastname,\n        email,\n        address,\n        zip_code,\n        city\n      } = userRole === 'admin' ? parsedCompany[0] : companyProfile.profile;\n      const jobTitle = advertisement.viewSelectedAd.job_title;\n      const description = `${jobTitle} | Kampanjapaketti - ${customTranslateCampaign(campaign_id)}`;\n      const mkt_description = `${jobTitle} | Lisätty markkinointiraha`;\n      const orderId = resultParsed[0].order_id;\n      const previousCampaignPrice = resultParsed[0].prev_campaign_money;\n      const newCampaignPrice = resultParsed[0].new_campaign_money;\n      const amount = newCampaignPrice - previousCampaignPrice; // If mkt budget is added.\n\n      let marketing_budget = 0;\n      const newMarketingBudget = resultParsed[0].marketing_budget;\n\n      if (includes_mktbudget && newMarketingBudget > 0) {\n        marketing_budget = newMarketingBudget;\n      }\n\n      const totalSum = (marketing_budget + amount) * 1.24; // If new and more expensive campaign price OR more marketing budget, generate invoice\n\n      const details = {\n        company_id: companyId,\n        company_name,\n        business_id,\n        firstname,\n        lastname,\n        email,\n        address,\n        zip_code,\n        city,\n        description,\n        totalSum,\n        amount,\n        post_id: parseInt(post_id),\n        order_id: orderId,\n        marketing_budget,\n        mkt_description,\n        isSameCampaign: amount === 0 ? true : false,\n        // Meaning same campaign but new budget\n        selectedCampaign: advertisement.selectedCampaign,\n        postIdToFetch: id\n      };\n\n      if (payment_method === 'invoice') {\n        yield put(sendInvoiceToTalous(details));\n      } else if (payment_method === 'online') {\n        yield put(registerPayment(details));\n      } else {\n        yield put(showSuccessSnackbar());\n      }\n    }\n  } catch (error) {\n    console.log(error);\n    yield put(showFailedSnackbar());\n  }\n}\n\nfunction* changeJobPostStatusSaga(_ref5) {\n  let {\n    id\n  } = _ref5;\n\n  try {\n    const url = `${API_SERVER}/UpdateJobPostStatus`;\n    const {\n      company_id\n    } = store.getState().companyProfile.profile;\n    const post_id = id;\n    const userRole = store.getState().client.user.data[6].user_type;\n    const body = JSON.stringify({\n      post_id: userRole === 'admin' ? id.split('admin')[0] : post_id,\n      // For admins, we need to get company id from post itself\n      company_id: userRole === 'admin' ? id.split('admin')[1] : company_id,\n      status: 2\n    });\n    const result = yield call(apiManualPost, url, body);\n\n    if (result.data === 'Job Post Status updated successfully!') {\n      yield put(showSuccessSnackbar());\n      yield put(openAdToSeeAdInfo(id));\n    } else {\n      yield put(showFailedSnackbar());\n    }\n  } catch (e) {\n    console.log(e);\n  }\n}\n\nfunction* saveMarketingDetailsSaga() {\n  try {\n    const formValues = getFormValues('marketingDetails')(store.getState());\n    const {\n      marketing_platform,\n      more_budget,\n      marketing_budget\n    } = formValues;\n\n    if (!marketing_platform) {\n      yield put(touch('marketingDetails', 'marketing_platform'));\n      return;\n    }\n\n    if (!more_budget) {\n      yield put(touch('marketingDetails', 'more_budget'));\n      return;\n    }\n\n    if (more_budget === 'yes') {\n      if (!marketing_budget) {\n        yield put(touch('marketingDetails', 'marketing_budget'));\n        return;\n      }\n    }\n\n    if (marketing_budget && (parseInt(marketing_budget) < 1 || !/^[0-9]+$/.test(marketing_budget))) {\n      return;\n    }\n\n    yield put(saveMarketingDetailsSuccess(formValues));\n    yield put(closeDialog());\n  } catch (e) {\n    console.log(e);\n  }\n}\n\nfunction* displayInitialDetails(_ref6) {\n  let {\n    isToEdit\n  } = _ref6;\n\n  try {\n    if (!isToEdit) yield put(initialize('applicantDetails', getFormInitialValues('applicantDetails')(store.getState())));\n  } catch (e) {\n    console.log(e);\n  }\n}\n\nfunction* deleteJobPostSaga(_ref7) {\n  let {\n    id\n  } = _ref7;\n\n  try {\n    const url = `${API_SERVER}/DeleteJobPost`;\n    const companyId = store.getState().companyProfile.profile.company_id;\n    const userRole = store.getState().client.user.data[6].user_type;\n    const body = JSON.stringify({\n      post_id: userRole === 'admin' ? id.split('admin')[0] : id,\n      company_id: userRole === 'admin' ? id.split('admin')[1] : companyId\n    });\n    yield call(apiManualPost, url, body);\n\n    if (userRole === 'admin') {\n      yield put(filterJobs(true));\n    } else {\n      yield put(getAllAdsByStatus(0));\n      yield put(getAllAdsByStatus(1));\n      yield put(getAllAdsByStatus(2));\n    }\n  } catch (error) {\n    console.log(error);\n  }\n}\n\nfunction* saveAdvertisementAsDraft() {\n  yield put(saveAndPublishAdvertisement());\n}\n\nfunction* getApplicationDetailsByIdSaga(_ref8) {\n  let {\n    application_id,\n    company_id,\n    post_id,\n    email\n  } = _ref8;\n\n  try {\n    const url = `${API_SERVER}/GetApplicationById`;\n    const body = JSON.stringify({\n      application_id,\n      company_id,\n      post_id,\n      email\n    });\n    const result = yield call(apiManualPost, url, body);\n    const resultParsed = JSON.parse(result.data);\n\n    if (resultParsed) {\n      yield put(getApplicationDetailsByIdSuccess(resultParsed[0]));\n      yield put(openAdToSeeAdInfo(post_id));\n    }\n    /* if (!resultParsed[0].interview_title) {\n      const form = getFormValues('applicantDetails')(store.getState());\n      form.interview_title = 'Haastattelu';\n    } */\n\n  } catch (e) {\n    console.log(e);\n  }\n}\n\nfunction* updateApplicantStatusSaga(_ref9) {\n  let {\n    application_id,\n    company_id,\n    post_id,\n    email,\n    status\n  } = _ref9;\n\n  try {\n    const url = `${API_SERVER}/UpdateJobApplicationStatus`;\n    const body = JSON.stringify({\n      application_id,\n      company_id,\n      post_id,\n      email,\n      status\n    });\n    const result = yield call(apiManualPost, url, body);\n\n    if (result.data === \"Job Application's status updated successfully!\") {\n      //yield put(showSuccessSnackbar());\n      yield put(getApplicationDetailsById(application_id, company_id, post_id, email));\n      yield put(openAdToSeeAdInfo(post_id));\n    } else {\n      yield put(showFailedSnackbar());\n    }\n  } catch (e) {\n    console.log(e);\n  }\n}\n\nfunction* updateJobApplicationDetailsSaga(_ref10) {\n  let {\n    application_id,\n    company_id,\n    post_id,\n    email,\n    update\n  } = _ref10;\n\n  try {\n    let body;\n    const url = `${API_SERVER}/UpdateJobApplicationDetails`;\n    const formValues = getFormValues('applicantDetails')(store.getState());\n    const loggedInUser = store.getState().client.user.data[1];\n    const {\n      application_notes,\n      interview_title,\n      interview_msg,\n      interview_date,\n      interview_time,\n      interview_place\n    } = formValues;\n\n    if (update === 'note') {\n      body = JSON.stringify({\n        application_id,\n        company_id,\n        post_id,\n        email,\n        update,\n        application_notes\n      });\n    } else {\n      body = JSON.stringify({\n        application_id,\n        company_id,\n        post_id,\n        email,\n        update,\n        interview_title,\n        interview_msg,\n        interview_date,\n        interview_time,\n        interview_place,\n        loggedInUser\n      });\n    }\n\n    const result = yield call(apiManualPost, url, body);\n\n    if (result.data === \"Job Application's details updated successfully!\" || result.data === 'Interview reminder emails sent successfully!') {\n      yield put(showSuccessSnackbar());\n      yield put(getApplicationDetailsById(application_id, company_id, post_id, email));\n      yield put(openAdToSeeAdInfo(post_id));\n    } else {\n      yield put(showFailedSnackbar());\n    } // console.log('result', result);\n\n  } catch (e) {\n    console.log(e);\n  }\n} // Dashboard chart\n\n\nfunction* getJobPostViewsByDateSaga() {\n  try {\n    const url = `${API_SERVER}/GetJobPostViewsByDate`;\n    const {\n      company_id\n    } = store.getState().advertisement.viewSelectedAd;\n    const {\n      post_id\n    } = store.getState().advertisement.viewSelectedAd;\n    const body = JSON.stringify({\n      company_id,\n      post_id\n    });\n    const result = yield call(apiManualPost, url, body);\n    const resultParsed = JSON.parse(result.data);\n\n    if (resultParsed) {\n      yield put(getJobPostViewsByDateSuccess(resultParsed));\n    }\n  } catch (e) {\n    console.log(e);\n  }\n} //DELETE APPLICATION SAGA\n\n\nfunction* deleteApplicationSaga() {\n  try {\n    const url = `${API_SERVER}/DeleteApplicationById`;\n    const {\n      applicationDetailsToDelete\n    } = store.getState().advertisement;\n    const {\n      selectedAd\n    } = store.getState().advertisement;\n    const body = JSON.stringify({ ...applicationDetailsToDelete\n    });\n    const result = yield call(apiManualPost, url, body);\n\n    if (result.data === 'Job application successfully deleted') {\n      yield put(openAdToSeeAdInfo(selectedAd));\n    }\n  } catch (error) {\n    console.log(error);\n  }\n}\n\nfunction* changeRouteSaga() {\n  try {\n    const userRole = store.getState().client.user.data[6].user_type;\n\n    if (userRole === 'company') {\n      browserHistory.push('/omat-ilmoitukseni');\n    }\n\n    if (userRole === 'admin') {\n      browserHistory.push('/lisapalvelu');\n    }\n\n    yield put(null); //Yield statement for generator function\n  } catch (error) {\n    console.log(error);\n  }\n} // When navigateAdsFromMainMenu is dispatched, we want to ensure the page lands to 0 index.\n\n\nfunction* changePaginationSaga() {\n  yield put(changeAdvertPage({\n    selected: 0\n  }));\n}\n\nfunction* adminGetUserCompanyProfileSaga(_ref11) {\n  let {\n    id\n  } = _ref11;\n  const url = `${API_SERVER}/GetCompanyProfile`;\n\n  try {\n    const uuid = store.getState().client.user.data[2];\n    const body = JSON.stringify({\n      company_id: id,\n      uuid\n    });\n    const result = yield call(apiManualPost, url, body);\n    const resultParsed = JSON.parse(result.data)[0];\n    yield put(getCompanyProfileSuccess(resultParsed));\n  } catch (e) {\n    console.log(e);\n  }\n} // Automatic answers with email messages saga\n\n\nfunction* populateEmailMessageSaga(_ref12) {\n  var _store$getState$users;\n\n  let {\n    languages\n  } = _ref12;\n  const companyName = (_store$getState$users = store.getState().usersCompanyList.selectedCompany) === null || _store$getState$users === void 0 ? void 0 : _store$getState$users.company_name;\n  const storedLanguages = formValueSelector('vacancy')(store.getState(), 'email_language');\n  const isToSendAutoEmail = store.getState().advertisement.automaticEmailToggleBtn;\n\n  try {\n    if (isToSendAutoEmail) {\n      const messages = messageTemplate(companyName, languages ? languages : storedLanguages);\n      yield put(change('vacancy', 'email_message', messages));\n    }\n  } catch (e) {\n    console.log(e);\n  }\n} // export function* watchGetJobsOffersSaga() {\n//   yield takeEvery(GET_JOBS_OFFERS, getJobsOffersSaga);\n// } // GET JOBS OFFERS\n\n\nexport function* watchsaveAndPublishAdvertisementSaga() {\n  yield takeEvery(SAVE_AND_PUBLISH_ADVERTISEMENT, saveAndPublishAdvertisementSaga);\n}\nexport function* watchupdateAndPublishAdvertisementSaga() {\n  yield takeEvery(UPDATE_AND_PUBLISH_ADVERTISEMENT, updateAndPublishAdvertisementSaga);\n}\nexport function* watchSaveAdvertisementAsDraft() {\n  yield takeEvery(SAVE_ADVERTISEMENT_AS_DRAFT, saveAdvertisementAsDraft);\n}\nexport function* watchgetAllCampaignsSaga() {\n  yield takeEvery(GET_ALL_CAMPAIGNS, getAllCampaignsSaga);\n}\nexport function* watchgetAllJobCategorysSaga() {\n  yield takeEvery(GET_ALL_JOB_CATEGORY, getAllJobCategorySaga, getAllJobCategoryFromEstoniaSaga);\n}\nexport function* watchgetAllAdsByStatusSaga() {\n  yield takeEvery(GET_ALL_ADS_BY_STATUS, getAllAdsByStatusSaga);\n}\nexport function* watchgetJobPostByPostIdSaga() {\n  yield takeEvery(OPEN_AD_TO_SEE_AD_INFO, getJobPostByPostIdSaga);\n}\nexport function* watchdeleteJobPostSaga() {\n  yield takeEvery(DELETE_ADVERTISEMENT, deleteJobPostSaga);\n}\nexport function* watchupdateJobPostSaga() {\n  yield takeEvery(UPDATE_ADVERTISEMENT, updateJobPostSaga);\n}\nexport function* watchpopulateVacancyFormSaga() {\n  yield takeEvery(POPULATE_VACANCY_FORM, populateVacancyFormSaga);\n}\nexport function* watchupdateCampaignSaga() {\n  yield takeEvery(SAVE_NEW_CAMPAIGN, updateCampaignSaga);\n}\nexport function* watchchangeJobPostStatusSaga() {\n  yield takeEvery(CHANGE_ACTIVE_POST_TO_INACTIVE, changeJobPostStatusSaga);\n}\nexport function* watchgetApplicationDetailsByIdSaga() {\n  yield takeEvery(GET_APPLICATION_DETAILS_BY_ID, getApplicationDetailsByIdSaga);\n}\nexport function* watchupdateApplicantStatusSaga() {\n  yield takeEvery(UPDATE_APPLICANT_STATUS, updateApplicantStatusSaga);\n}\nexport function* watchupdateJobApplicationDetailsSaga() {\n  yield takeEvery(UPDATE_JOB_APPLICATION_DETAILS, updateJobApplicationDetailsSaga);\n}\nexport function* watchgetJobPostViewsByDateSaga() {\n  yield takeEvery(GET_JOBPOST_VIEWS_BY_DATE, getJobPostViewsByDateSaga);\n}\nexport function* watchchangePaginationSaga() {\n  yield takeEvery(NAVIGATE_ADS_FROM_MAIN_MENU, changePaginationSaga);\n  yield takeEvery(OPEN_AD_TO_SEE_AD_INFO, changePaginationSaga);\n}\nexport function* watchEditInterviewDetailsSaga() {\n  yield takeEvery(EDIT_INTERVIEW_DETAILS, displayInitialDetails);\n}\nexport function* watchSaveMarketingDetailsSaga() {\n  yield takeEvery(SAVE_MARKETING_DETAILS, saveMarketingDetailsSaga);\n}\nexport function* watchdeleteApplicationSaga() {\n  yield takeEvery(DELETE_APPLICATION, deleteApplicationSaga);\n}\nexport function* watchChangeRouteSaga() {\n  yield takeEvery(CHANGE_ROUTE, changeRouteSaga);\n}\nexport function* watchAdminGetUserCompanyProfileSaga() {\n  yield takeEvery(ADMIN_GET_USER_PROFILE, adminGetUserCompanyProfileSaga);\n}\nexport function* watchPopulateEmailMessageSaga() {\n  yield takeEvery(POPULATE_EMAIL_MESSAGE, populateEmailMessageSaga);\n  yield takeEvery(AUTO_EMAIL_TO_APPLICANT, populateEmailMessageSaga);\n}","map":{"version":3,"names":["useState","takeEvery","put","call","getFormValues","change","formValueSelector","initialize","getFormInitialValues","touch","SAVE_AND_PUBLISH_ADVERTISEMENT","UPDATE_AND_PUBLISH_ADVERTISEMENT","API_SERVER","API_SERVER_EST","API_SERVER_EST_GET_ID","GET_ALL_CAMPAIGNS","OPEN_AD_TO_SEE_AD_INFO","UPDATE_ADVERTISEMENT","POPULATE_VACANCY_FORM","DELETE_ADVERTISEMENT","GET_ALL_JOB_CATEGORY","GET_ALL_ADS_BY_STATUS","SAVE_ADVERTISEMENT_AS_DRAFT","SAVE_NEW_CAMPAIGN","CHANGE_ACTIVE_POST_TO_INACTIVE","GET_APPLICATION_DETAILS_BY_ID","UPDATE_APPLICANT_STATUS","GET_JOBPOST_VIEWS_BY_DATE","NAVIGATE_ADS_FROM_MAIN_MENU","UPDATE_JOB_APPLICATION_DETAILS","EDIT_INTERVIEW_DETAILS","SAVE_MARKETING_DETAILS","DELETE_APPLICATION","CHANGE_ROUTE","ADMIN_GET_USER_PROFILE","HELP_SERVICE_FEE","SOS_SERVICE_FEE","POPULATE_EMAIL_MESSAGE","AUTO_EMAIL_TO_APPLICANT","GET_JOBS_OFFERS","GET_JOBS_OFFERS_SUCCESS","store","apiManualRequest","apiManualPost","apiOpenRequest","apiGetJobsOffers","fetchJobTags","filterObj","getAllCampaignsSuccess","saveAndPublishAdvertisementSuccess","getAllJobCategorySuccess","saveAndPublishAdvertisementFailed","getAllAdsByStatusSuccess","saveAndPublishAdvertisement","showSuccessSnackbar","showFailedSnackbar","openAdToSeeAdInfo","populateVacancyFormSuccess","updateAndPublishAdvertisementSuccess","getApplicationDetailsById","getApplicationDetailsByIdSuccess","getJobPostViewsByDateSuccess","changeAdvertPage","getAllAdsByStatus","filterJobs","hideSpinner","saveMarketingDetailsSuccess","closeDialog","registerPayment","sendInvoiceToTalous","getCompanyProfileSuccess","openAdToSeeAdInfoSuccess","getJobsOffers","getAllJobCategoryFromEstoniaSuccess","customTranslateCampaign","browserHistory","messageTemplate","getAllCampaignsSaga","url","result","resultParsed","JSON","parse","data","error","console","log","getAllJobCategorySaga","getAllJobCategoryFromEstoniaSaga","jobTags","json","saveAndPublishAdvertisementSaga","body","parsedCompany","advertisement","client","companyProfile","getState","formValues","paymentInfoForm","uuid","user","userRole","user_type","payment_method","companyBusinessId","profile","companyDetails","parseInt","jobPostOwner","stringify","selectedCampaign","isSaveAdvertisementAsDraft","isToEdit","uploadedImage","marketingDetails","extraService","isDraft","refinedUploadedImage","name","replace","refinedFormValues","statusToUpdate","help","sos","type","selectedService","Array","isArray","image_document","campaign_type","status","extra_service","base64","document_id","id","path","filename","filetype","includes_mktbudget","marketing_platform","more_budget","marketing_budget","parsedResult","company_name","business_id","firstname","lastname","email","address","zip_code","city","jobTitle","jobName","postId","jobPostNumber","orderId","order_id","publishedPostStatus","job_post_status","description","mkt_description","extra_service_description","extra_service_fee","isExtraServiceAdded","extra_service_fee_with_vat","amount","job_post_campaign_money","totalSum","details","company_id","post_id","getJobPostByPostIdSaga","split","getAllAdsByStatusSaga","usersCompanyList","roleId","selectedCompanyId","selectedCompany","assignedCompanyId","populateVacancyFormSaga","companyId","jobsToRender","company_image","image_id","job_title","job_type","job_hours","job_category","job_location","job_description","is_agreement","due_date","is_email_notification","notice_frequency","campaign_id","application_link","campaignDetails","e","updateJobPostSaga","viewSelectedAd","keys","Object","refinedKeys","filter","key","updateAndPublishAdvertisementSaga","updateCampaignSaga","body2","previousCampaignPrice","prev_campaign_money","newCampaignPrice","new_campaign_money","newMarketingBudget","isSameCampaign","postIdToFetch","changeJobPostStatusSaga","saveMarketingDetailsSaga","test","displayInitialDetails","deleteJobPostSaga","saveAdvertisementAsDraft","getApplicationDetailsByIdSaga","application_id","updateApplicantStatusSaga","updateJobApplicationDetailsSaga","update","loggedInUser","application_notes","interview_title","interview_msg","interview_date","interview_time","interview_place","getJobPostViewsByDateSaga","deleteApplicationSaga","applicationDetailsToDelete","selectedAd","changeRouteSaga","push","changePaginationSaga","selected","adminGetUserCompanyProfileSaga","populateEmailMessageSaga","languages","companyName","storedLanguages","isToSendAutoEmail","automaticEmailToggleBtn","messages","watchsaveAndPublishAdvertisementSaga","watchupdateAndPublishAdvertisementSaga","watchSaveAdvertisementAsDraft","watchgetAllCampaignsSaga","watchgetAllJobCategorysSaga","watchgetAllAdsByStatusSaga","watchgetJobPostByPostIdSaga","watchdeleteJobPostSaga","watchupdateJobPostSaga","watchpopulateVacancyFormSaga","watchupdateCampaignSaga","watchchangeJobPostStatusSaga","watchgetApplicationDetailsByIdSaga","watchupdateApplicantStatusSaga","watchupdateJobApplicationDetailsSaga","watchgetJobPostViewsByDateSaga","watchchangePaginationSaga","watchEditInterviewDetailsSaga","watchSaveMarketingDetailsSaga","watchdeleteApplicationSaga","watchChangeRouteSaga","watchAdminGetUserCompanyProfileSaga","watchPopulateEmailMessageSaga"],"sources":["/Users/eduardkazeks/Documents/GitHub/JobPortalEE/src/sagas/advertisements.saga.js"],"sourcesContent":["import {useState} from 'react'\nimport { takeEvery, put, call } from 'redux-saga/effects';\nimport { getFormValues, change, formValueSelector, initialize, getFormInitialValues, touch } from 'redux-form';\nimport {\n  SAVE_AND_PUBLISH_ADVERTISEMENT,\n  UPDATE_AND_PUBLISH_ADVERTISEMENT,\n  API_SERVER,\n  API_SERVER_EST,\n  API_SERVER_EST_GET_ID,\n  GET_ALL_CAMPAIGNS,\n  OPEN_AD_TO_SEE_AD_INFO,\n  UPDATE_ADVERTISEMENT,\n  POPULATE_VACANCY_FORM,\n  DELETE_ADVERTISEMENT,\n  GET_ALL_JOB_CATEGORY,\n  GET_ALL_ADS_BY_STATUS,\n  SAVE_ADVERTISEMENT_AS_DRAFT,\n  SAVE_NEW_CAMPAIGN,\n  CHANGE_ACTIVE_POST_TO_INACTIVE,\n  GET_APPLICATION_DETAILS_BY_ID,\n  UPDATE_APPLICANT_STATUS,\n  GET_JOBPOST_VIEWS_BY_DATE,\n  NAVIGATE_ADS_FROM_MAIN_MENU,\n  UPDATE_JOB_APPLICATION_DETAILS,\n  EDIT_INTERVIEW_DETAILS,\n  SAVE_MARKETING_DETAILS,\n  DELETE_APPLICATION,\n  CHANGE_ROUTE,\n  ADMIN_GET_USER_PROFILE,\n  HELP_SERVICE_FEE,\n  SOS_SERVICE_FEE,\n  POPULATE_EMAIL_MESSAGE,\n  AUTO_EMAIL_TO_APPLICANT,\n  GET_JOBS_OFFERS,\n  GET_JOBS_OFFERS_SUCCESS,\n} from '../constants';\nimport store from '../store';\nimport { apiManualRequest, apiManualPost, apiOpenRequest, apiGetJobsOffers, fetchJobTags } from '../utils/request';\nimport { filterObj } from '../utils/wrappers';\nimport {\n  getAllCampaignsSuccess,\n  saveAndPublishAdvertisementSuccess,\n  getAllJobCategorySuccess,\n  saveAndPublishAdvertisementFailed,\n  getAllAdsByStatusSuccess,\n  saveAndPublishAdvertisement,\n  showSuccessSnackbar,\n  showFailedSnackbar,\n  openAdToSeeAdInfo,\n  populateVacancyFormSuccess,\n  updateAndPublishAdvertisementSuccess,\n  getApplicationDetailsById,\n  getApplicationDetailsByIdSuccess,\n  getJobPostViewsByDateSuccess,\n  changeAdvertPage,\n  getAllAdsByStatus,\n  filterJobs,\n  hideSpinner,\n  saveMarketingDetailsSuccess,\n  closeDialog,\n  registerPayment,\n  sendInvoiceToTalous,\n  getCompanyProfileSuccess,\n  openAdToSeeAdInfoSuccess,\n  getJobsOffers,\n  getAllJobCategoryFromEstoniaSuccess,\n} from '../actions';\nimport { customTranslateCampaign } from '../utils/customTranslate';\nimport browserHistory from '../history';\nimport { messageTemplate } from '../components/companies/advertisements/automaticMessageToApplicants/messages';\n\nfunction* getAllCampaignsSaga() {\n  try {\n    const url = `${API_SERVER}/GetCampaigns`;\n    const result = yield call(apiManualRequest, url);\n    const resultParsed = JSON.parse(result.data);\n    yield put(getAllCampaignsSuccess(resultParsed));\n  } catch (error) {\n    console.log(error);\n  }\n}\nfunction* getAllJobCategorySaga() {\n  try {\n    const url = `${API_SERVER}/GetJobCategories`;\n    const result = yield call(apiOpenRequest, url);\n    const resultParsed = JSON.parse(result.data);\n    yield put(getAllJobCategorySuccess(resultParsed));\n  } catch (error) {\n    console.log(error);\n  }\n}\n\nfunction* getAllJobCategoryFromEstoniaSaga() {\n  try {\n    const url = `${API_SERVER_EST}`;\n    const jobTags = yield call(  fetchJobTags, url);\n    const json = jobTags.json()\n    //const resultParsed = JSON.parse(jobTags.data);\n    yield put(getAllJobCategoryFromEstoniaSuccess(json));\n  } catch (error) {\n    console.log(error);\n  }\n}\n\n\nfunction* saveAndPublishAdvertisementSaga() {\n  try {\n    let url;\n    let body;\n    let parsedCompany = {};\n\n    const { advertisement, client, companyProfile } = store.getState();\n    const formValues = getFormValues('vacancy')(store.getState());\n    const paymentInfoForm = getFormValues('paymentInfo')(store.getState());\n    const uuid = client.user.data[2];\n    const userRole = client.user.data[6].user_type;\n    const payment_method = paymentInfoForm && paymentInfoForm.payment_method;\n    const companyBusinessId = companyProfile.profile.companyBusinessId;\n\n    if (!formValues.companyBusinessId) {\n      formValues.companyBusinessId = companyBusinessId; // Also sending company_id to add company specific post.\n    }\n\n    yield put(closeDialog());\n\n    if (userRole === 'admin') {\n      const companyDetails = {\n        companyBusinessId: parseInt(formValues.companyBusinessId),\n        uuid,\n      };\n      const jobPostOwner = yield call(apiManualPost, `${API_SERVER_EST}/postJob`, JSON.stringify({ ...companyDetails }));\n      parsedCompany = JSON.parse(jobPostOwner.data);\n    }\n\n    const { selectedCampaign, isSaveAdvertisementAsDraft, isToEdit, uploadedImage, marketingDetails, extraService } = advertisement;\n    const isDraft = isSaveAdvertisementAsDraft;\n    const refinedUploadedImage = uploadedImage && uploadedImage.name && uploadedImage.name.replace(/\\s+\\(\\d+\\)/g, 'JP'); // If stored filename has (int), dropzone doesn't understand the path..so changing such names before sending to db.\n    const refinedFormValues = filterObj('image_document', formValues);\n\n    if (isToEdit) {\n      url = `${API_SERVER}/UpdateJobPost`;\n    } else {\n      url = `${API_SERVER_EST}/postJob`;\n    }\n\n    const statusToUpdate = isDraft || extraService.help || extraService.sos ? 0 : selectedCampaign.type === 'free' ? 1 : 4;\n\n    const selectedService = extraService.help ? 'help' : extraService.sos ? 'sos' : null;\n\n    // image_document array means, it already exists in db, no need to send while updating\n    if (Array.isArray(formValues.image_document) === true) {\n      body = {\n        ...refinedFormValues,\n        uuid,\n        campaign_type: selectedCampaign.type,\n        status: statusToUpdate,\n        extra_service: selectedService,\n      };\n    } else if (!uploadedImage.name) {\n      // no uploaded image means, no need to send any base64. Also, if there is an image stored in db..and we want to delete it, I am changing the formvalues of image_document in component\n      body = {\n        ...formValues,\n        uuid,\n        campaign_type: selectedCampaign.type,\n        status: statusToUpdate,\n        extra_service: selectedService,\n      };\n    } else if (uploadedImage.name && !Array.isArray(formValues.image_document)) {\n      const base64 = formValues.image_document;\n      body = {\n        ...formValues,\n        uuid,\n        campaign_type: selectedCampaign.type,\n        status: statusToUpdate,\n        image_document: {\n          uuid,\n          document_id: uploadedImage.id,\n          path: '',\n          filename: refinedUploadedImage,\n          filetype: uploadedImage.type,\n          data: base64,\n        },\n        extra_service: selectedService,\n      };\n    }\n    if (selectedCampaign.includes_mktbudget) {\n      const { marketing_platform, more_budget, marketing_budget } = marketingDetails;\n      body.marketing_platform = !!marketing_platform ? marketing_platform : null;\n      body.more_budget = !!more_budget ? more_budget : null;\n      body.marketing_budget = !!marketing_budget ? parseInt(marketing_budget) : 0;\n    }\n    // SAVING AND PUBLISHING JOBPOST\n    const result = yield call(apiManualPost, url, JSON.stringify({ ...body }));\n    const parsedResult = JSON.parse(result.data);\n    //console.log(result.data);\n    // If publishing post, Generate invoice under the hood via Talousvirta API or online payment via NETS\n\n    if (parsedResult) {\n      const { company_name, business_id, firstname, lastname, email, address, zip_code, city } =\n        userRole === 'admin' ? parsedCompany[0] : companyProfile.profile;\n      const jobTitle = formValues.jobName;\n      const postId = parsedResult[0].jobPostNumber;\n      const orderId = parsedResult[0].order_id;\n      const publishedPostStatus = parsedResult[0].job_post_status;\n      const description = `${jobTitle} | Kampanjapaketti - ${customTranslateCampaign(selectedCampaign.id)}`;\n      const mkt_description = `${jobTitle} | Lisätty markkinointiraha`;\n\n      const extra_service_description = `Aktivoitu lisäpalvelu | ${extraService.help ? 'HELP' : 'SOS'}`;\n\n      // If mkt budget is added with campaigns with mkt budget, i.e. 5th campaign for now.\n      let marketing_budget = 0;\n      if (selectedCampaign.includes_mktbudget && !!parsedResult[0].marketing_budget) {\n        marketing_budget = parsedResult[0].marketing_budget;\n      }\n\n      const extra_service_fee = extraService.help ? HELP_SERVICE_FEE : extraService.sos ? SOS_SERVICE_FEE : 0;\n\n      if (\n        (publishedPostStatus === 0 && extra_service_fee > 0) || // If help and sos are added as extra service\n        publishedPostStatus === 4 // If paid campaigns are selected, temporary placeholder status\n      ) {\n        const isExtraServiceAdded = publishedPostStatus === 0 && extra_service_fee > 0 ? true : false;\n        const extra_service_fee_with_vat = extra_service_fee * 1.24; // Total price for the extra service including vat\n\n        const amount = parsedResult[0].job_post_campaign_money;\n        const totalSum = (marketing_budget + amount) * 1.24;\n\n        const details = {\n          company_id: formValues.company_id,\n          company_name,\n          business_id,\n          firstname,\n          lastname,\n          email,\n          address,\n          zip_code,\n          city,\n          description: isExtraServiceAdded ? extra_service_description : description,\n          totalSum: isExtraServiceAdded ? extra_service_fee_with_vat : totalSum,\n          amount: isExtraServiceAdded ? extra_service_fee : amount,\n          post_id: postId,\n          order_id: orderId,\n          marketing_budget,\n          mkt_description,\n          selectedCampaign,\n        };\n\n        if (payment_method === 'invoice') {\n          yield put(sendInvoiceToTalous(details));\n        } else if (payment_method === 'online') {\n          yield put(registerPayment(details));\n        }\n      }\n      // Post saved as a draft or free campaign or help/sos feature\n      //if (parsedResult[0].job_post_status !== 4)\n      else {\n        yield put(saveAndPublishAdvertisementSuccess());\n      }\n    } else {\n      yield put(saveAndPublishAdvertisementFailed());\n    }\n  } catch (error) {\n    console.log(error);\n    yield put(saveAndPublishAdvertisementFailed());\n  }\n}\n\nfunction* getJobPostByPostIdSaga({ id }) {\n  try {\n    const url = `${API_SERVER_EST}/${id}`;\n    const companyBusinessId = store.getState().companyProfile.profile.companyBusinessId;\n    const userRole = store.getState().client.user.data[6].user_type;\n\n    const body = JSON.stringify({\n      jobPostNumber: userRole === 'admin' ? id.split('admin')[0] : id,\n      companyBusinessId: userRole === 'admin' ? id.split('admin')[1] : companyBusinessId,\n    });\n    const result = yield call(apiOpenRequest, url, body);\n    const resultParsed = JSON.parse(result.data);\n    yield put(openAdToSeeAdInfoSuccess(resultParsed[0]));\n  } catch (error) {\n    console.log(error);\n    yield put(hideSpinner());\n  }\n}\n\nfunction* getAllAdsByStatusSaga({ status }) {\n  try {\n    const url = `${API_SERVER}/SearchJobPosts`;\n    const { client, usersCompanyList, companyProfile } = store.getState();\n    const uuid = client.user.data[2];\n    const roleId = client.user.data[5];\n    let selectedCompanyId;\n    selectedCompanyId = usersCompanyList.selectedCompany.company_id;\n    const assignedCompanyId = client.user.data[6].company_id;\n\n    if (!selectedCompanyId) {\n      // For first time registered users, client company_id is null since user profile is not updated\n      selectedCompanyId = companyProfile.profile.company_id;\n    }\n\n    const company_id = roleId === 0 ? selectedCompanyId : assignedCompanyId; //super user with many companies\n    const body = JSON.stringify({\n      status,\n      uuid,\n      company_id,\n    });\n\n    const result = yield call(apiManualPost, url, body);\n    const resultParsed = JSON.parse(result.data);\n    yield put(getAllAdsByStatusSuccess(status, resultParsed));\n  } catch (error) {\n    console.log(error);\n  }\n}\n// Populating vacancy form when editing or copying\nfunction* populateVacancyFormSaga({ id, isToEdit }) {\n  try {\n    const url = `${API_SERVER_EST}`;\n    const companyId = store.getState().jobsToRender.companyBusinessId;\n    //const campaigns = store.getState().advertisement.campaigns;\n    const userRole = store.getState().client.user.data[6].user_type;\n\n    const body = JSON.stringify({\n      jobPostNumber: userRole === 'admin' ? id.split('admin')[0] : id,\n      companyBusinessId: userRole === 'admin' ? id.split('admin')[1] : companyId,\n    });\n    const result = yield call(apiManualPost, url, body);\n    const resultParsed = JSON.parse(result.data);\n    // console.log('resultParsed', resultParsed);\n    // If we are populating from Draft Component, we are editing--> call UpdateJobPost API, it needs company_id && post_id which is being sent along with the vacancy form!\n\n    const {\n      post_id,\n      company_id,\n      company_image,\n      image_id,\n      job_title,\n      job_type,\n      job_hours,\n      job_category,\n      job_location,\n      job_description,\n      is_agreement,\n      due_date,\n      is_email_notification,\n      email,\n      notice_frequency,\n      campaign_id,\n      marketing_platform,\n      more_budget,\n      marketing_budget,\n      application_link,\n    } = resultParsed[0];\n\n    if (isToEdit) {\n      yield put(change('vacancy', 'post_id', post_id));\n      yield put(change('vacancy', 'company_id', company_id));\n      if (company_image) {\n        yield put(change('vacancy', 'image_document', company_image));\n        yield put(change('vacancy', 'image_id', image_id));\n      }\n    }\n    yield put(change('vacancy', 'job_title', job_title));\n    yield put(change('vacancy', 'job_type', job_type));\n    yield put(change('vacancy', 'job_hours', job_hours));\n    yield put(change('vacancy', 'job_category', job_category));\n    yield put(change('vacancy', 'job_location', job_location));\n    yield put(change('vacancy', 'job_description', job_description));\n    yield put(change('vacancy', 'is_agreement', is_agreement));\n    yield put(change('vacancy', 'application_link', application_link));\n\n    yield put(change('vacancy', 'due_date', due_date));\n    yield put(change('vacancy', 'is_email_notification', is_email_notification));\n    yield put(change('vacancy', 'email', email));\n    yield put(change('vacancy', 'notice_frequency', notice_frequency));\n\n    //const postCampaign = campaigns.find(campaign => campaign.id === campaign_id);\n\n    const campaignDetails = {\n     // postCampaign,\n      marketing_platform,\n      more_budget,\n      marketing_budget,\n    };\n\n    yield put(populateVacancyFormSuccess(campaignDetails, isToEdit));\n  } catch (e) {\n    console.log(e);\n  }\n}\n\n// Update advertisement - editAdvertForm is open/ Campaigns are not shown here.\n\nfunction* updateJobPostSaga() {\n  try {\n    const advertisement = store.getState().advertisement.viewSelectedAd;\n    const keys = Object.keys(advertisement);\n    // console.log('keys', keys);\n    const refinedKeys =\n      keys &&\n      keys.filter(\n        key =>\n          key !== 'company_image' &&\n          key !== 'total_applicants' &&\n          key !== 'total_likes' &&\n          key !== 'total_viewed' &&\n          key !== 'value' &&\n          key !== 'company_logo' &&\n          key !== 'marketing_budget', // Don't update budget when just editing vacancy.\n      ); // Irrelevant keys, not needed here\n\n    for (const key of refinedKeys) {\n      yield put(change('editVacancy', key, advertisement[key]));\n    }\n    if (advertisement.company_image) {\n      yield put(change('editVacancy', 'image_document', advertisement.company_image));\n    }\n    if (!advertisement.notice_frequency) {\n      yield put(change('editVacancy', 'notice_frequency', 7));\n    }\n    yield put(change('editVacancy', 'is_agreement', true));\n  } catch (error) {\n    console.log(error);\n  }\n}\n\nfunction* updateAndPublishAdvertisementSaga() {\n  try {\n    let body;\n    const url = `${API_SERVER}/UpdateJobPost`;\n    const formValues = getFormValues('editVacancy')(store.getState());\n    const uuid = store.getState().client.user.data[2];\n    const { uploadedImage } = store.getState().advertisement;\n    const userRole = store.getState().client.user.data[6].user_type;\n\n    const refinedUploadedImage = uploadedImage && uploadedImage.name && uploadedImage.name.replace(/\\(\\d+\\)/, 'JP'); // If stored filename has (int), dropzone doesn't understand the path..so changing such names before sending to db.\n    const refinedFormValues = filterObj('image_document', formValues);\n\n    // image_document array means, it already exists in db, no need to send while updating\n    if (Array.isArray(formValues.image_document) === true) {\n      body = JSON.stringify({\n        ...refinedFormValues,\n        uuid,\n      });\n    } else if (!uploadedImage.name) {\n      // no uploaded image means, no need to send any base64. Also, if there is an image stored in db..and we want to delete it, I am changing the formvalues of image_document in component\n      body = JSON.stringify({\n        ...formValues,\n        uuid,\n      });\n    } else {\n      const base64 = formValues.image_document;\n      body = JSON.stringify({\n        ...formValues,\n        uuid,\n        image_document: {\n          uuid,\n          document_id: uploadedImage.id,\n          path: '',\n          filename: refinedUploadedImage,\n          filetype: uploadedImage.type,\n          data: base64,\n        },\n      });\n    }\n\n    const result = yield call(apiManualPost, url, body);\n    const parsedResult = JSON.parse(result.data);\n    if (parsedResult) {\n      yield put(updateAndPublishAdvertisementSuccess());\n      if (userRole === 'admin') {\n        yield put(openAdToSeeAdInfo(`${formValues.post_id}admin${formValues.company_id}`));\n      } else {\n        yield put(openAdToSeeAdInfo(formValues.post_id));\n      }\n    } else {\n      yield put(saveAndPublishAdvertisementFailed());\n    }\n  } catch (e) {\n    console.log(e);\n    yield put(saveAndPublishAdvertisementFailed());\n  }\n}\n\n// Update campaign\nfunction* updateCampaignSaga({ id }) {\n  try {\n    yield put(closeDialog());\n\n    const { advertisement, client, companyProfile } = store.getState();\n    const paymentInfoForm = getFormValues('paymentInfo')(store.getState());\n    const payment_method = paymentInfoForm && paymentInfoForm.payment_method;\n\n    // Upgrade campaign\n    const url = `${API_SERVER}/HandleCampaignUpgrade`;\n    const uuid = store.getState().client.user.data[2];\n    const { type, includes_mktbudget } = advertisement.selectedCampaign;\n    const campaign_id = advertisement.selectedCampaign.id;\n    const userRole = client.user.data[6].user_type;\n    const post_id = userRole === 'admin' ? id.split('admin')[0] : id;\n    const companyId = userRole === 'admin' ? id.split('admin')[1] : companyProfile.profile.company_id;\n    const due_date = formValueSelector('campaign')(store.getState(), 'due_date');\n    let parsedCompany = {};\n\n    const body = {\n      campaign_type: type,\n      uuid,\n      post_id,\n      company_id: companyId,\n      due_date,\n    };\n\n    if (includes_mktbudget) {\n      const { marketing_platform, more_budget, marketing_budget } = advertisement.marketingDetails;\n\n      body.marketing_platform = !!marketing_platform ? marketing_platform : null;\n      body.more_budget = !!more_budget ? more_budget : null;\n      body.marketing_budget = !!marketing_budget ? parseInt(marketing_budget) : 0;\n    }\n\n    const result = yield call(apiManualPost, url, JSON.stringify({ ...body }));\n    const resultParsed = JSON.parse(result.data);\n\n    if (resultParsed) {\n      //If admin is upgrading post or updating jobpost on behalf of companies:\n      if (userRole === 'admin') {\n        const body2 = {\n          company_id: parseInt(companyId),\n          uuid,\n        };\n        const jobPostOwner = yield call(apiManualPost, `${API_SERVER}/GetCompanyProfile`, JSON.stringify({ ...body2 }));\n        parsedCompany = JSON.parse(jobPostOwner.data);\n      }\n\n      const { company_name, business_id, firstname, lastname, email, address, zip_code, city } =\n        userRole === 'admin' ? parsedCompany[0] : companyProfile.profile;\n      const jobTitle = advertisement.viewSelectedAd.job_title;\n      const description = `${jobTitle} | Kampanjapaketti - ${customTranslateCampaign(campaign_id)}`;\n      const mkt_description = `${jobTitle} | Lisätty markkinointiraha`;\n\n      const orderId = resultParsed[0].order_id;\n      const previousCampaignPrice = resultParsed[0].prev_campaign_money;\n      const newCampaignPrice = resultParsed[0].new_campaign_money;\n      const amount = newCampaignPrice - previousCampaignPrice;\n\n      // If mkt budget is added.\n      let marketing_budget = 0;\n      const newMarketingBudget = resultParsed[0].marketing_budget;\n      if (includes_mktbudget && newMarketingBudget > 0) {\n        marketing_budget = newMarketingBudget;\n      }\n      const totalSum = (marketing_budget + amount) * 1.24;\n\n      // If new and more expensive campaign price OR more marketing budget, generate invoice\n\n      const details = {\n        company_id: companyId,\n        company_name,\n        business_id,\n        firstname,\n        lastname,\n        email,\n        address,\n        zip_code,\n        city,\n        description,\n        totalSum,\n        amount,\n        post_id: parseInt(post_id),\n        order_id: orderId,\n        marketing_budget,\n        mkt_description,\n        isSameCampaign: amount === 0 ? true : false, // Meaning same campaign but new budget\n        selectedCampaign: advertisement.selectedCampaign,\n        postIdToFetch: id,\n      };\n      if (payment_method === 'invoice') {\n        yield put(sendInvoiceToTalous(details));\n      } else if (payment_method === 'online') {\n        yield put(registerPayment(details));\n      } else {\n        yield put(showSuccessSnackbar());\n      }\n    }\n  } catch (error) {\n    console.log(error);\n    yield put(showFailedSnackbar());\n  }\n}\n\nfunction* changeJobPostStatusSaga({ id }) {\n  try {\n    const url = `${API_SERVER}/UpdateJobPostStatus`;\n    const { company_id } = store.getState().companyProfile.profile;\n    const post_id = id;\n    const userRole = store.getState().client.user.data[6].user_type;\n\n    const body = JSON.stringify({\n      post_id: userRole === 'admin' ? id.split('admin')[0] : post_id, // For admins, we need to get company id from post itself\n      company_id: userRole === 'admin' ? id.split('admin')[1] : company_id,\n      status: 2,\n    });\n    const result = yield call(apiManualPost, url, body);\n    if (result.data === 'Job Post Status updated successfully!') {\n      yield put(showSuccessSnackbar());\n      yield put(openAdToSeeAdInfo(id));\n    } else {\n      yield put(showFailedSnackbar());\n    }\n  } catch (e) {\n    console.log(e);\n  }\n}\nfunction* saveMarketingDetailsSaga() {\n  try {\n    const formValues = getFormValues('marketingDetails')(store.getState());\n    const { marketing_platform, more_budget, marketing_budget } = formValues;\n    if (!marketing_platform) {\n      yield put(touch('marketingDetails', 'marketing_platform'));\n      return;\n    }\n    if (!more_budget) {\n      yield put(touch('marketingDetails', 'more_budget'));\n      return;\n    }\n    if (more_budget === 'yes') {\n      if (!marketing_budget) {\n        yield put(touch('marketingDetails', 'marketing_budget'));\n        return;\n      }\n    }\n    if (marketing_budget && (parseInt(marketing_budget) < 1 || !/^[0-9]+$/.test(marketing_budget))) {\n      return;\n    }\n    yield put(saveMarketingDetailsSuccess(formValues));\n    yield put(closeDialog());\n  } catch (e) {\n    console.log(e);\n  }\n}\n\nfunction* displayInitialDetails({ isToEdit }) {\n  try {\n    if (!isToEdit) yield put(initialize('applicantDetails', getFormInitialValues('applicantDetails')(store.getState())));\n  } catch (e) {\n    console.log(e);\n  }\n}\nfunction* deleteJobPostSaga({ id }) {\n  try {\n    const url = `${API_SERVER}/DeleteJobPost`;\n    const companyId = store.getState().companyProfile.profile.company_id;\n    const userRole = store.getState().client.user.data[6].user_type;\n\n    const body = JSON.stringify({\n      post_id: userRole === 'admin' ? id.split('admin')[0] : id,\n      company_id: userRole === 'admin' ? id.split('admin')[1] : companyId,\n    });\n    yield call(apiManualPost, url, body);\n\n    if (userRole === 'admin') {\n      yield put(filterJobs(true));\n    } else {\n      yield put(getAllAdsByStatus(0));\n      yield put(getAllAdsByStatus(1));\n      yield put(getAllAdsByStatus(2));\n    }\n  } catch (error) {\n    console.log(error);\n  }\n}\nfunction* saveAdvertisementAsDraft() {\n  yield put(saveAndPublishAdvertisement());\n}\n\nfunction* getApplicationDetailsByIdSaga({ application_id, company_id, post_id, email }) {\n  try {\n    const url = `${API_SERVER}/GetApplicationById`;\n\n    const body = JSON.stringify({\n      application_id,\n      company_id,\n      post_id,\n      email,\n    });\n\n    const result = yield call(apiManualPost, url, body);\n    const resultParsed = JSON.parse(result.data);\n    if (resultParsed) {\n      yield put(getApplicationDetailsByIdSuccess(resultParsed[0]));\n      yield put(openAdToSeeAdInfo(post_id));\n    }\n\n    /* if (!resultParsed[0].interview_title) {\n      const form = getFormValues('applicantDetails')(store.getState());\n      form.interview_title = 'Haastattelu';\n    } */\n  } catch (e) {\n    console.log(e);\n  }\n}\n\nfunction* updateApplicantStatusSaga({ application_id, company_id, post_id, email, status }) {\n  try {\n    const url = `${API_SERVER}/UpdateJobApplicationStatus`;\n    const body = JSON.stringify({\n      application_id,\n      company_id,\n      post_id,\n      email,\n      status,\n    });\n    const result = yield call(apiManualPost, url, body);\n    if (result.data === \"Job Application's status updated successfully!\") {\n      //yield put(showSuccessSnackbar());\n      yield put(getApplicationDetailsById(application_id, company_id, post_id, email));\n      yield put(openAdToSeeAdInfo(post_id));\n    } else {\n      yield put(showFailedSnackbar());\n    }\n  } catch (e) {\n    console.log(e);\n  }\n}\nfunction* updateJobApplicationDetailsSaga({ application_id, company_id, post_id, email, update }) {\n  try {\n    let body;\n    const url = `${API_SERVER}/UpdateJobApplicationDetails`;\n    const formValues = getFormValues('applicantDetails')(store.getState());\n    const loggedInUser = store.getState().client.user.data[1];\n    const { application_notes, interview_title, interview_msg, interview_date, interview_time, interview_place } = formValues;\n\n    if (update === 'note') {\n      body = JSON.stringify({\n        application_id,\n        company_id,\n        post_id,\n        email,\n        update,\n        application_notes,\n      });\n    } else {\n      body = JSON.stringify({\n        application_id,\n        company_id,\n        post_id,\n        email,\n        update,\n        interview_title,\n        interview_msg,\n        interview_date,\n        interview_time,\n        interview_place,\n        loggedInUser,\n      });\n    }\n    const result = yield call(apiManualPost, url, body);\n    if (result.data === \"Job Application's details updated successfully!\" || result.data === 'Interview reminder emails sent successfully!') {\n      yield put(showSuccessSnackbar());\n      yield put(getApplicationDetailsById(application_id, company_id, post_id, email));\n      yield put(openAdToSeeAdInfo(post_id));\n    } else {\n      yield put(showFailedSnackbar());\n    }\n    // console.log('result', result);\n  } catch (e) {\n    console.log(e);\n  }\n}\n\n// Dashboard chart\nfunction* getJobPostViewsByDateSaga() {\n  try {\n    const url = `${API_SERVER}/GetJobPostViewsByDate`;\n    const { company_id } = store.getState().advertisement.viewSelectedAd;\n    const { post_id } = store.getState().advertisement.viewSelectedAd;\n    const body = JSON.stringify({\n      company_id,\n      post_id,\n    });\n    const result = yield call(apiManualPost, url, body);\n    const resultParsed = JSON.parse(result.data);\n    if (resultParsed) {\n      yield put(getJobPostViewsByDateSuccess(resultParsed));\n    }\n  } catch (e) {\n    console.log(e);\n  }\n}\n\n//DELETE APPLICATION SAGA\nfunction* deleteApplicationSaga() {\n  try {\n    const url = `${API_SERVER}/DeleteApplicationById`;\n    const { applicationDetailsToDelete } = store.getState().advertisement;\n    const { selectedAd } = store.getState().advertisement;\n\n    const body = JSON.stringify({\n      ...applicationDetailsToDelete,\n    });\n\n    const result = yield call(apiManualPost, url, body);\n\n    if (result.data === 'Job application successfully deleted') {\n      yield put(openAdToSeeAdInfo(selectedAd));\n    }\n  } catch (error) {\n    console.log(error);\n  }\n}\n\nfunction* changeRouteSaga() {\n  try {\n    const userRole = store.getState().client.user.data[6].user_type;\n\n    if (userRole === 'company') {\n      browserHistory.push('/omat-ilmoitukseni');\n    }\n    if (userRole === 'admin') {\n      browserHistory.push('/lisapalvelu');\n    }\n    yield put(null); //Yield statement for generator function\n  } catch (error) {\n    console.log(error);\n  }\n}\n\n// When navigateAdsFromMainMenu is dispatched, we want to ensure the page lands to 0 index.\nfunction* changePaginationSaga() {\n  yield put(changeAdvertPage({ selected: 0 }));\n}\n\nfunction* adminGetUserCompanyProfileSaga({ id }) {\n  const url = `${API_SERVER}/GetCompanyProfile`;\n\n  try {\n    const uuid = store.getState().client.user.data[2];\n    const body = JSON.stringify({ company_id: id, uuid });\n    const result = yield call(apiManualPost, url, body);\n    const resultParsed = JSON.parse(result.data)[0];\n    yield put(getCompanyProfileSuccess(resultParsed));\n  } catch (e) {\n    console.log(e);\n  }\n}\n\n// Automatic answers with email messages saga\nfunction* populateEmailMessageSaga({ languages }) {\n  const companyName = store.getState().usersCompanyList.selectedCompany?.company_name;\n  const storedLanguages = formValueSelector('vacancy')(store.getState(), 'email_language');\n\n  const isToSendAutoEmail = store.getState().advertisement.automaticEmailToggleBtn;\n\n  try {\n    if (isToSendAutoEmail) {\n      const messages = messageTemplate(companyName, languages ? languages : storedLanguages);\n      yield put(change('vacancy', 'email_message', messages));\n    }\n  } catch (e) {\n    console.log(e);\n  }\n}\n\n// export function* watchGetJobsOffersSaga() {\n//   yield takeEvery(GET_JOBS_OFFERS, getJobsOffersSaga);\n// } // GET JOBS OFFERS\nexport function* watchsaveAndPublishAdvertisementSaga() {\n  yield takeEvery(SAVE_AND_PUBLISH_ADVERTISEMENT, saveAndPublishAdvertisementSaga);\n}\nexport function* watchupdateAndPublishAdvertisementSaga() {\n  yield takeEvery(UPDATE_AND_PUBLISH_ADVERTISEMENT, updateAndPublishAdvertisementSaga);\n}\nexport function* watchSaveAdvertisementAsDraft() {\n  yield takeEvery(SAVE_ADVERTISEMENT_AS_DRAFT, saveAdvertisementAsDraft);\n}\n\nexport function* watchgetAllCampaignsSaga() {\n  yield takeEvery(GET_ALL_CAMPAIGNS, getAllCampaignsSaga);\n}\n\nexport function* watchgetAllJobCategorysSaga() {\n  yield takeEvery(GET_ALL_JOB_CATEGORY, getAllJobCategorySaga, getAllJobCategoryFromEstoniaSaga);\n}\n\nexport function* watchgetAllAdsByStatusSaga() {\n  yield takeEvery(GET_ALL_ADS_BY_STATUS, getAllAdsByStatusSaga);\n}\nexport function* watchgetJobPostByPostIdSaga() {\n  yield takeEvery(OPEN_AD_TO_SEE_AD_INFO, getJobPostByPostIdSaga);\n}\nexport function* watchdeleteJobPostSaga() {\n  yield takeEvery(DELETE_ADVERTISEMENT, deleteJobPostSaga);\n}\nexport function* watchupdateJobPostSaga() {\n  yield takeEvery(UPDATE_ADVERTISEMENT, updateJobPostSaga);\n}\nexport function* watchpopulateVacancyFormSaga() {\n  yield takeEvery(POPULATE_VACANCY_FORM, populateVacancyFormSaga);\n}\nexport function* watchupdateCampaignSaga() {\n  yield takeEvery(SAVE_NEW_CAMPAIGN, updateCampaignSaga);\n}\nexport function* watchchangeJobPostStatusSaga() {\n  yield takeEvery(CHANGE_ACTIVE_POST_TO_INACTIVE, changeJobPostStatusSaga);\n}\nexport function* watchgetApplicationDetailsByIdSaga() {\n  yield takeEvery(GET_APPLICATION_DETAILS_BY_ID, getApplicationDetailsByIdSaga);\n}\nexport function* watchupdateApplicantStatusSaga() {\n  yield takeEvery(UPDATE_APPLICANT_STATUS, updateApplicantStatusSaga);\n}\nexport function* watchupdateJobApplicationDetailsSaga() {\n  yield takeEvery(UPDATE_JOB_APPLICATION_DETAILS, updateJobApplicationDetailsSaga);\n}\nexport function* watchgetJobPostViewsByDateSaga() {\n  yield takeEvery(GET_JOBPOST_VIEWS_BY_DATE, getJobPostViewsByDateSaga);\n}\nexport function* watchchangePaginationSaga() {\n  yield takeEvery(NAVIGATE_ADS_FROM_MAIN_MENU, changePaginationSaga);\n  yield takeEvery(OPEN_AD_TO_SEE_AD_INFO, changePaginationSaga);\n}\n\nexport function* watchEditInterviewDetailsSaga() {\n  yield takeEvery(EDIT_INTERVIEW_DETAILS, displayInitialDetails);\n}\nexport function* watchSaveMarketingDetailsSaga() {\n  yield takeEvery(SAVE_MARKETING_DETAILS, saveMarketingDetailsSaga);\n}\n\nexport function* watchdeleteApplicationSaga() {\n  yield takeEvery(DELETE_APPLICATION, deleteApplicationSaga);\n}\n\nexport function* watchChangeRouteSaga() {\n  yield takeEvery(CHANGE_ROUTE, changeRouteSaga);\n}\n\nexport function* watchAdminGetUserCompanyProfileSaga() {\n  yield takeEvery(ADMIN_GET_USER_PROFILE, adminGetUserCompanyProfileSaga);\n}\n\nexport function* watchPopulateEmailMessageSaga() {\n  yield takeEvery(POPULATE_EMAIL_MESSAGE, populateEmailMessageSaga);\n  yield takeEvery(AUTO_EMAIL_TO_APPLICANT, populateEmailMessageSaga);\n}\n"],"mappings":"AAAA,SAAQA,QAAR,QAAuB,OAAvB;AACA,SAASC,SAAT,EAAoBC,GAApB,EAAyBC,IAAzB,QAAqC,oBAArC;AACA,SAASC,aAAT,EAAwBC,MAAxB,EAAgCC,iBAAhC,EAAmDC,UAAnD,EAA+DC,oBAA/D,EAAqFC,KAArF,QAAkG,YAAlG;AACA,SACEC,8BADF,EAEEC,gCAFF,EAGEC,UAHF,EAIEC,cAJF,EAKEC,qBALF,EAMEC,iBANF,EAOEC,sBAPF,EAQEC,oBARF,EASEC,qBATF,EAUEC,oBAVF,EAWEC,oBAXF,EAYEC,qBAZF,EAaEC,2BAbF,EAcEC,iBAdF,EAeEC,8BAfF,EAgBEC,6BAhBF,EAiBEC,uBAjBF,EAkBEC,yBAlBF,EAmBEC,2BAnBF,EAoBEC,8BApBF,EAqBEC,sBArBF,EAsBEC,sBAtBF,EAuBEC,kBAvBF,EAwBEC,YAxBF,EAyBEC,sBAzBF,EA0BEC,gBA1BF,EA2BEC,eA3BF,EA4BEC,sBA5BF,EA6BEC,uBA7BF,EA8BEC,eA9BF,EA+BEC,uBA/BF,QAgCO,cAhCP;AAiCA,OAAOC,KAAP,MAAkB,UAAlB;AACA,SAASC,gBAAT,EAA2BC,aAA3B,EAA0CC,cAA1C,EAA0DC,gBAA1D,EAA4EC,YAA5E,QAAgG,kBAAhG;AACA,SAASC,SAAT,QAA0B,mBAA1B;AACA,SACEC,sBADF,EAEEC,kCAFF,EAGEC,wBAHF,EAIEC,iCAJF,EAKEC,wBALF,EAMEC,2BANF,EAOEC,mBAPF,EAQEC,kBARF,EASEC,iBATF,EAUEC,0BAVF,EAWEC,oCAXF,EAYEC,yBAZF,EAaEC,gCAbF,EAcEC,4BAdF,EAeEC,gBAfF,EAgBEC,iBAhBF,EAiBEC,UAjBF,EAkBEC,WAlBF,EAmBEC,2BAnBF,EAoBEC,WApBF,EAqBEC,eArBF,EAsBEC,mBAtBF,EAuBEC,wBAvBF,EAwBEC,wBAxBF,EAyBEC,aAzBF,EA0BEC,mCA1BF,QA2BO,YA3BP;AA4BA,SAASC,uBAAT,QAAwC,0BAAxC;AACA,OAAOC,cAAP,MAA2B,YAA3B;AACA,SAASC,eAAT,QAAgC,8EAAhC;;AAEA,UAAUC,mBAAV,GAAgC;EAC9B,IAAI;IACF,MAAMC,GAAG,GAAI,GAAElE,UAAW,eAA1B;IACA,MAAMmE,MAAM,GAAG,MAAM5E,IAAI,CAACuC,gBAAD,EAAmBoC,GAAnB,CAAzB;IACA,MAAME,YAAY,GAAGC,IAAI,CAACC,KAAL,CAAWH,MAAM,CAACI,IAAlB,CAArB;IACA,MAAMjF,GAAG,CAAC8C,sBAAsB,CAACgC,YAAD,CAAvB,CAAT;EACD,CALD,CAKE,OAAOI,KAAP,EAAc;IACdC,OAAO,CAACC,GAAR,CAAYF,KAAZ;EACD;AACF;;AACD,UAAUG,qBAAV,GAAkC;EAChC,IAAI;IACF,MAAMT,GAAG,GAAI,GAAElE,UAAW,mBAA1B;IACA,MAAMmE,MAAM,GAAG,MAAM5E,IAAI,CAACyC,cAAD,EAAiBkC,GAAjB,CAAzB;IACA,MAAME,YAAY,GAAGC,IAAI,CAACC,KAAL,CAAWH,MAAM,CAACI,IAAlB,CAArB;IACA,MAAMjF,GAAG,CAACgD,wBAAwB,CAAC8B,YAAD,CAAzB,CAAT;EACD,CALD,CAKE,OAAOI,KAAP,EAAc;IACdC,OAAO,CAACC,GAAR,CAAYF,KAAZ;EACD;AACF;;AAED,UAAUI,gCAAV,GAA6C;EAC3C,IAAI;IACF,MAAMV,GAAG,GAAI,GAAEjE,cAAe,EAA9B;IACA,MAAM4E,OAAO,GAAG,MAAMtF,IAAI,CAAG2C,YAAH,EAAiBgC,GAAjB,CAA1B;IACA,MAAMY,IAAI,GAAGD,OAAO,CAACC,IAAR,EAAb,CAHE,CAIF;;IACA,MAAMxF,GAAG,CAACuE,mCAAmC,CAACiB,IAAD,CAApC,CAAT;EACD,CAND,CAME,OAAON,KAAP,EAAc;IACdC,OAAO,CAACC,GAAR,CAAYF,KAAZ;EACD;AACF;;AAGD,UAAUO,+BAAV,GAA4C;EAC1C,IAAI;IACF,IAAIb,GAAJ;IACA,IAAIc,IAAJ;IACA,IAAIC,aAAa,GAAG,EAApB;IAEA,MAAM;MAAEC,aAAF;MAAiBC,MAAjB;MAAyBC;IAAzB,IAA4CvD,KAAK,CAACwD,QAAN,EAAlD;IACA,MAAMC,UAAU,GAAG9F,aAAa,CAAC,SAAD,CAAb,CAAyBqC,KAAK,CAACwD,QAAN,EAAzB,CAAnB;IACA,MAAME,eAAe,GAAG/F,aAAa,CAAC,aAAD,CAAb,CAA6BqC,KAAK,CAACwD,QAAN,EAA7B,CAAxB;IACA,MAAMG,IAAI,GAAGL,MAAM,CAACM,IAAP,CAAYlB,IAAZ,CAAiB,CAAjB,CAAb;IACA,MAAMmB,QAAQ,GAAGP,MAAM,CAACM,IAAP,CAAYlB,IAAZ,CAAiB,CAAjB,EAAoBoB,SAArC;IACA,MAAMC,cAAc,GAAGL,eAAe,IAAIA,eAAe,CAACK,cAA1D;IACA,MAAMC,iBAAiB,GAAGT,cAAc,CAACU,OAAf,CAAuBD,iBAAjD;;IAEA,IAAI,CAACP,UAAU,CAACO,iBAAhB,EAAmC;MACjCP,UAAU,CAACO,iBAAX,GAA+BA,iBAA/B,CADiC,CACiB;IACnD;;IAED,MAAMvG,GAAG,CAACiE,WAAW,EAAZ,CAAT;;IAEA,IAAImC,QAAQ,KAAK,OAAjB,EAA0B;MACxB,MAAMK,cAAc,GAAG;QACrBF,iBAAiB,EAAEG,QAAQ,CAACV,UAAU,CAACO,iBAAZ,CADN;QAErBL;MAFqB,CAAvB;MAIA,MAAMS,YAAY,GAAG,MAAM1G,IAAI,CAACwC,aAAD,EAAiB,GAAE9B,cAAe,UAAlC,EAA6CoE,IAAI,CAAC6B,SAAL,CAAe,EAAE,GAAGH;MAAL,CAAf,CAA7C,CAA/B;MACAd,aAAa,GAAGZ,IAAI,CAACC,KAAL,CAAW2B,YAAY,CAAC1B,IAAxB,CAAhB;IACD;;IAED,MAAM;MAAE4B,gBAAF;MAAoBC,0BAApB;MAAgDC,QAAhD;MAA0DC,aAA1D;MAAyEC,gBAAzE;MAA2FC;IAA3F,IAA4GtB,aAAlH;IACA,MAAMuB,OAAO,GAAGL,0BAAhB;IACA,MAAMM,oBAAoB,GAAGJ,aAAa,IAAIA,aAAa,CAACK,IAA/B,IAAuCL,aAAa,CAACK,IAAd,CAAmBC,OAAnB,CAA2B,aAA3B,EAA0C,IAA1C,CAApE,CA9BE,CA8BmH;;IACrH,MAAMC,iBAAiB,GAAG1E,SAAS,CAAC,gBAAD,EAAmBmD,UAAnB,CAAnC;;IAEA,IAAIe,QAAJ,EAAc;MACZnC,GAAG,GAAI,GAAElE,UAAW,gBAApB;IACD,CAFD,MAEO;MACLkE,GAAG,GAAI,GAAEjE,cAAe,UAAxB;IACD;;IAED,MAAM6G,cAAc,GAAGL,OAAO,IAAID,YAAY,CAACO,IAAxB,IAAgCP,YAAY,CAACQ,GAA7C,GAAmD,CAAnD,GAAuDb,gBAAgB,CAACc,IAAjB,KAA0B,MAA1B,GAAmC,CAAnC,GAAuC,CAArH;IAEA,MAAMC,eAAe,GAAGV,YAAY,CAACO,IAAb,GAAoB,MAApB,GAA6BP,YAAY,CAACQ,GAAb,GAAmB,KAAnB,GAA2B,IAAhF,CAzCE,CA2CF;;IACA,IAAIG,KAAK,CAACC,OAAN,CAAc9B,UAAU,CAAC+B,cAAzB,MAA6C,IAAjD,EAAuD;MACrDrC,IAAI,GAAG,EACL,GAAG6B,iBADE;QAELrB,IAFK;QAGL8B,aAAa,EAAEnB,gBAAgB,CAACc,IAH3B;QAILM,MAAM,EAAET,cAJH;QAKLU,aAAa,EAAEN;MALV,CAAP;IAOD,CARD,MAQO,IAAI,CAACZ,aAAa,CAACK,IAAnB,EAAyB;MAC9B;MACA3B,IAAI,GAAG,EACL,GAAGM,UADE;QAELE,IAFK;QAGL8B,aAAa,EAAEnB,gBAAgB,CAACc,IAH3B;QAILM,MAAM,EAAET,cAJH;QAKLU,aAAa,EAAEN;MALV,CAAP;IAOD,CATM,MASA,IAAIZ,aAAa,CAACK,IAAd,IAAsB,CAACQ,KAAK,CAACC,OAAN,CAAc9B,UAAU,CAAC+B,cAAzB,CAA3B,EAAqE;MAC1E,MAAMI,MAAM,GAAGnC,UAAU,CAAC+B,cAA1B;MACArC,IAAI,GAAG,EACL,GAAGM,UADE;QAELE,IAFK;QAGL8B,aAAa,EAAEnB,gBAAgB,CAACc,IAH3B;QAILM,MAAM,EAAET,cAJH;QAKLO,cAAc,EAAE;UACd7B,IADc;UAEdkC,WAAW,EAAEpB,aAAa,CAACqB,EAFb;UAGdC,IAAI,EAAE,EAHQ;UAIdC,QAAQ,EAAEnB,oBAJI;UAKdoB,QAAQ,EAAExB,aAAa,CAACW,IALV;UAMd1C,IAAI,EAAEkD;QANQ,CALX;QAaLD,aAAa,EAAEN;MAbV,CAAP;IAeD;;IACD,IAAIf,gBAAgB,CAAC4B,kBAArB,EAAyC;MACvC,MAAM;QAAEC,kBAAF;QAAsBC,WAAtB;QAAmCC;MAAnC,IAAwD3B,gBAA9D;MACAvB,IAAI,CAACgD,kBAAL,GAA0B,CAAC,CAACA,kBAAF,GAAuBA,kBAAvB,GAA4C,IAAtE;MACAhD,IAAI,CAACiD,WAAL,GAAmB,CAAC,CAACA,WAAF,GAAgBA,WAAhB,GAA8B,IAAjD;MACAjD,IAAI,CAACkD,gBAAL,GAAwB,CAAC,CAACA,gBAAF,GAAqBlC,QAAQ,CAACkC,gBAAD,CAA7B,GAAkD,CAA1E;IACD,CApFC,CAqFF;;;IACA,MAAM/D,MAAM,GAAG,MAAM5E,IAAI,CAACwC,aAAD,EAAgBmC,GAAhB,EAAqBG,IAAI,CAAC6B,SAAL,CAAe,EAAE,GAAGlB;IAAL,CAAf,CAArB,CAAzB;IACA,MAAMmD,YAAY,GAAG9D,IAAI,CAACC,KAAL,CAAWH,MAAM,CAACI,IAAlB,CAArB,CAvFE,CAwFF;IACA;;IAEA,IAAI4D,YAAJ,EAAkB;MAChB,MAAM;QAAEC,YAAF;QAAgBC,WAAhB;QAA6BC,SAA7B;QAAwCC,QAAxC;QAAkDC,KAAlD;QAAyDC,OAAzD;QAAkEC,QAAlE;QAA4EC;MAA5E,IACJjD,QAAQ,KAAK,OAAb,GAAuBT,aAAa,CAAC,CAAD,CAApC,GAA0CG,cAAc,CAACU,OAD3D;MAEA,MAAM8C,QAAQ,GAAGtD,UAAU,CAACuD,OAA5B;MACA,MAAMC,MAAM,GAAGX,YAAY,CAAC,CAAD,CAAZ,CAAgBY,aAA/B;MACA,MAAMC,OAAO,GAAGb,YAAY,CAAC,CAAD,CAAZ,CAAgBc,QAAhC;MACA,MAAMC,mBAAmB,GAAGf,YAAY,CAAC,CAAD,CAAZ,CAAgBgB,eAA5C;MACA,MAAMC,WAAW,GAAI,GAAER,QAAS,wBAAuB9E,uBAAuB,CAACqC,gBAAgB,CAACwB,EAAlB,CAAsB,EAApG;MACA,MAAM0B,eAAe,GAAI,GAAET,QAAS,6BAApC;MAEA,MAAMU,yBAAyB,GAAI,2BAA0B9C,YAAY,CAACO,IAAb,GAAoB,MAApB,GAA6B,KAAM,EAAhG,CAVgB,CAYhB;;MACA,IAAImB,gBAAgB,GAAG,CAAvB;;MACA,IAAI/B,gBAAgB,CAAC4B,kBAAjB,IAAuC,CAAC,CAACI,YAAY,CAAC,CAAD,CAAZ,CAAgBD,gBAA7D,EAA+E;QAC7EA,gBAAgB,GAAGC,YAAY,CAAC,CAAD,CAAZ,CAAgBD,gBAAnC;MACD;;MAED,MAAMqB,iBAAiB,GAAG/C,YAAY,CAACO,IAAb,GAAoBxF,gBAApB,GAAuCiF,YAAY,CAACQ,GAAb,GAAmBxF,eAAnB,GAAqC,CAAtG;;MAEA,IACG0H,mBAAmB,KAAK,CAAxB,IAA6BK,iBAAiB,GAAG,CAAlD,IAAwD;MACxDL,mBAAmB,KAAK,CAF1B,CAE4B;MAF5B,EAGE;QACA,MAAMM,mBAAmB,GAAGN,mBAAmB,KAAK,CAAxB,IAA6BK,iBAAiB,GAAG,CAAjD,GAAqD,IAArD,GAA4D,KAAxF;QACA,MAAME,0BAA0B,GAAGF,iBAAiB,GAAG,IAAvD,CAFA,CAE6D;;QAE7D,MAAMG,MAAM,GAAGvB,YAAY,CAAC,CAAD,CAAZ,CAAgBwB,uBAA/B;QACA,MAAMC,QAAQ,GAAG,CAAC1B,gBAAgB,GAAGwB,MAApB,IAA8B,IAA/C;QAEA,MAAMG,OAAO,GAAG;UACdC,UAAU,EAAExE,UAAU,CAACwE,UADT;UAEd1B,YAFc;UAGdC,WAHc;UAIdC,SAJc;UAKdC,QALc;UAMdC,KANc;UAOdC,OAPc;UAQdC,QARc;UASdC,IATc;UAUdS,WAAW,EAAEI,mBAAmB,GAAGF,yBAAH,GAA+BF,WAVjD;UAWdQ,QAAQ,EAAEJ,mBAAmB,GAAGC,0BAAH,GAAgCG,QAX/C;UAYdF,MAAM,EAAEF,mBAAmB,GAAGD,iBAAH,GAAuBG,MAZpC;UAadK,OAAO,EAAEjB,MAbK;UAcdG,QAAQ,EAAED,OAdI;UAedd,gBAfc;UAgBdmB,eAhBc;UAiBdlD;QAjBc,CAAhB;;QAoBA,IAAIP,cAAc,KAAK,SAAvB,EAAkC;UAChC,MAAMtG,GAAG,CAACmE,mBAAmB,CAACoG,OAAD,CAApB,CAAT;QACD,CAFD,MAEO,IAAIjE,cAAc,KAAK,QAAvB,EAAiC;UACtC,MAAMtG,GAAG,CAACkE,eAAe,CAACqG,OAAD,CAAhB,CAAT;QACD;MACF,CAnCD,CAoCA;MACA;MArCA,KAsCK;QACH,MAAMvK,GAAG,CAAC+C,kCAAkC,EAAnC,CAAT;MACD;IACF,CA7DD,MA6DO;MACL,MAAM/C,GAAG,CAACiD,iCAAiC,EAAlC,CAAT;IACD;EACF,CA3JD,CA2JE,OAAOiC,KAAP,EAAc;IACdC,OAAO,CAACC,GAAR,CAAYF,KAAZ;IACA,MAAMlF,GAAG,CAACiD,iCAAiC,EAAlC,CAAT;EACD;AACF;;AAED,UAAUyH,sBAAV,OAAyC;EAAA,IAAR;IAAErC;EAAF,CAAQ;;EACvC,IAAI;IACF,MAAMzD,GAAG,GAAI,GAAEjE,cAAe,IAAG0H,EAAG,EAApC;IACA,MAAM9B,iBAAiB,GAAGhE,KAAK,CAACwD,QAAN,GAAiBD,cAAjB,CAAgCU,OAAhC,CAAwCD,iBAAlE;IACA,MAAMH,QAAQ,GAAG7D,KAAK,CAACwD,QAAN,GAAiBF,MAAjB,CAAwBM,IAAxB,CAA6BlB,IAA7B,CAAkC,CAAlC,EAAqCoB,SAAtD;IAEA,MAAMX,IAAI,GAAGX,IAAI,CAAC6B,SAAL,CAAe;MAC1B6C,aAAa,EAAErD,QAAQ,KAAK,OAAb,GAAuBiC,EAAE,CAACsC,KAAH,CAAS,OAAT,EAAkB,CAAlB,CAAvB,GAA8CtC,EADnC;MAE1B9B,iBAAiB,EAAEH,QAAQ,KAAK,OAAb,GAAuBiC,EAAE,CAACsC,KAAH,CAAS,OAAT,EAAkB,CAAlB,CAAvB,GAA8CpE;IAFvC,CAAf,CAAb;IAIA,MAAM1B,MAAM,GAAG,MAAM5E,IAAI,CAACyC,cAAD,EAAiBkC,GAAjB,EAAsBc,IAAtB,CAAzB;IACA,MAAMZ,YAAY,GAAGC,IAAI,CAACC,KAAL,CAAWH,MAAM,CAACI,IAAlB,CAArB;IACA,MAAMjF,GAAG,CAACqE,wBAAwB,CAACS,YAAY,CAAC,CAAD,CAAb,CAAzB,CAAT;EACD,CAZD,CAYE,OAAOI,KAAP,EAAc;IACdC,OAAO,CAACC,GAAR,CAAYF,KAAZ;IACA,MAAMlF,GAAG,CAAC+D,WAAW,EAAZ,CAAT;EACD;AACF;;AAED,UAAU6G,qBAAV,QAA4C;EAAA,IAAZ;IAAE3C;EAAF,CAAY;;EAC1C,IAAI;IACF,MAAMrD,GAAG,GAAI,GAAElE,UAAW,iBAA1B;IACA,MAAM;MAAEmF,MAAF;MAAUgF,gBAAV;MAA4B/E;IAA5B,IAA+CvD,KAAK,CAACwD,QAAN,EAArD;IACA,MAAMG,IAAI,GAAGL,MAAM,CAACM,IAAP,CAAYlB,IAAZ,CAAiB,CAAjB,CAAb;IACA,MAAM6F,MAAM,GAAGjF,MAAM,CAACM,IAAP,CAAYlB,IAAZ,CAAiB,CAAjB,CAAf;IACA,IAAI8F,iBAAJ;IACAA,iBAAiB,GAAGF,gBAAgB,CAACG,eAAjB,CAAiCR,UAArD;IACA,MAAMS,iBAAiB,GAAGpF,MAAM,CAACM,IAAP,CAAYlB,IAAZ,CAAiB,CAAjB,EAAoBuF,UAA9C;;IAEA,IAAI,CAACO,iBAAL,EAAwB;MACtB;MACAA,iBAAiB,GAAGjF,cAAc,CAACU,OAAf,CAAuBgE,UAA3C;IACD;;IAED,MAAMA,UAAU,GAAGM,MAAM,KAAK,CAAX,GAAeC,iBAAf,GAAmCE,iBAAtD,CAdE,CAcuE;;IACzE,MAAMvF,IAAI,GAAGX,IAAI,CAAC6B,SAAL,CAAe;MAC1BqB,MAD0B;MAE1B/B,IAF0B;MAG1BsE;IAH0B,CAAf,CAAb;IAMA,MAAM3F,MAAM,GAAG,MAAM5E,IAAI,CAACwC,aAAD,EAAgBmC,GAAhB,EAAqBc,IAArB,CAAzB;IACA,MAAMZ,YAAY,GAAGC,IAAI,CAACC,KAAL,CAAWH,MAAM,CAACI,IAAlB,CAArB;IACA,MAAMjF,GAAG,CAACkD,wBAAwB,CAAC+E,MAAD,EAASnD,YAAT,CAAzB,CAAT;EACD,CAxBD,CAwBE,OAAOI,KAAP,EAAc;IACdC,OAAO,CAACC,GAAR,CAAYF,KAAZ;EACD;AACF,C,CACD;;;AACA,UAAUgG,uBAAV,QAAoD;EAAA,IAAlB;IAAE7C,EAAF;IAAMtB;EAAN,CAAkB;;EAClD,IAAI;IACF,MAAMnC,GAAG,GAAI,GAAEjE,cAAe,EAA9B;IACA,MAAMwK,SAAS,GAAG5I,KAAK,CAACwD,QAAN,GAAiBqF,YAAjB,CAA8B7E,iBAAhD,CAFE,CAGF;;IACA,MAAMH,QAAQ,GAAG7D,KAAK,CAACwD,QAAN,GAAiBF,MAAjB,CAAwBM,IAAxB,CAA6BlB,IAA7B,CAAkC,CAAlC,EAAqCoB,SAAtD;IAEA,MAAMX,IAAI,GAAGX,IAAI,CAAC6B,SAAL,CAAe;MAC1B6C,aAAa,EAAErD,QAAQ,KAAK,OAAb,GAAuBiC,EAAE,CAACsC,KAAH,CAAS,OAAT,EAAkB,CAAlB,CAAvB,GAA8CtC,EADnC;MAE1B9B,iBAAiB,EAAEH,QAAQ,KAAK,OAAb,GAAuBiC,EAAE,CAACsC,KAAH,CAAS,OAAT,EAAkB,CAAlB,CAAvB,GAA8CQ;IAFvC,CAAf,CAAb;IAIA,MAAMtG,MAAM,GAAG,MAAM5E,IAAI,CAACwC,aAAD,EAAgBmC,GAAhB,EAAqBc,IAArB,CAAzB;IACA,MAAMZ,YAAY,GAAGC,IAAI,CAACC,KAAL,CAAWH,MAAM,CAACI,IAAlB,CAArB,CAXE,CAYF;IACA;;IAEA,MAAM;MACJwF,OADI;MAEJD,UAFI;MAGJa,aAHI;MAIJC,QAJI;MAKJC,SALI;MAMJC,QANI;MAOJC,SAPI;MAQJC,YARI;MASJC,YATI;MAUJC,eAVI;MAWJC,YAXI;MAYJC,QAZI;MAaJC,qBAbI;MAcJ7C,KAdI;MAeJ8C,gBAfI;MAgBJC,WAhBI;MAiBJvD,kBAjBI;MAkBJC,WAlBI;MAmBJC,gBAnBI;MAoBJsD;IApBI,IAqBFpH,YAAY,CAAC,CAAD,CArBhB;;IAuBA,IAAIiC,QAAJ,EAAc;MACZ,MAAM/G,GAAG,CAACG,MAAM,CAAC,SAAD,EAAY,SAAZ,EAAuBsK,OAAvB,CAAP,CAAT;MACA,MAAMzK,GAAG,CAACG,MAAM,CAAC,SAAD,EAAY,YAAZ,EAA0BqK,UAA1B,CAAP,CAAT;;MACA,IAAIa,aAAJ,EAAmB;QACjB,MAAMrL,GAAG,CAACG,MAAM,CAAC,SAAD,EAAY,gBAAZ,EAA8BkL,aAA9B,CAAP,CAAT;QACA,MAAMrL,GAAG,CAACG,MAAM,CAAC,SAAD,EAAY,UAAZ,EAAwBmL,QAAxB,CAAP,CAAT;MACD;IACF;;IACD,MAAMtL,GAAG,CAACG,MAAM,CAAC,SAAD,EAAY,WAAZ,EAAyBoL,SAAzB,CAAP,CAAT;IACA,MAAMvL,GAAG,CAACG,MAAM,CAAC,SAAD,EAAY,UAAZ,EAAwBqL,QAAxB,CAAP,CAAT;IACA,MAAMxL,GAAG,CAACG,MAAM,CAAC,SAAD,EAAY,WAAZ,EAAyBsL,SAAzB,CAAP,CAAT;IACA,MAAMzL,GAAG,CAACG,MAAM,CAAC,SAAD,EAAY,cAAZ,EAA4BuL,YAA5B,CAAP,CAAT;IACA,MAAM1L,GAAG,CAACG,MAAM,CAAC,SAAD,EAAY,cAAZ,EAA4BwL,YAA5B,CAAP,CAAT;IACA,MAAM3L,GAAG,CAACG,MAAM,CAAC,SAAD,EAAY,iBAAZ,EAA+ByL,eAA/B,CAAP,CAAT;IACA,MAAM5L,GAAG,CAACG,MAAM,CAAC,SAAD,EAAY,cAAZ,EAA4B0L,YAA5B,CAAP,CAAT;IACA,MAAM7L,GAAG,CAACG,MAAM,CAAC,SAAD,EAAY,kBAAZ,EAAgC+L,gBAAhC,CAAP,CAAT;IAEA,MAAMlM,GAAG,CAACG,MAAM,CAAC,SAAD,EAAY,UAAZ,EAAwB2L,QAAxB,CAAP,CAAT;IACA,MAAM9L,GAAG,CAACG,MAAM,CAAC,SAAD,EAAY,uBAAZ,EAAqC4L,qBAArC,CAAP,CAAT;IACA,MAAM/L,GAAG,CAACG,MAAM,CAAC,SAAD,EAAY,OAAZ,EAAqB+I,KAArB,CAAP,CAAT;IACA,MAAMlJ,GAAG,CAACG,MAAM,CAAC,SAAD,EAAY,kBAAZ,EAAgC6L,gBAAhC,CAAP,CAAT,CA1DE,CA4DF;;IAEA,MAAMG,eAAe,GAAG;MACvB;MACCzD,kBAFsB;MAGtBC,WAHsB;MAItBC;IAJsB,CAAxB;IAOA,MAAM5I,GAAG,CAACuD,0BAA0B,CAAC4I,eAAD,EAAkBpF,QAAlB,CAA3B,CAAT;EACD,CAtED,CAsEE,OAAOqF,CAAP,EAAU;IACVjH,OAAO,CAACC,GAAR,CAAYgH,CAAZ;EACD;AACF,C,CAED;;;AAEA,UAAUC,iBAAV,GAA8B;EAC5B,IAAI;IACF,MAAMzG,aAAa,GAAGrD,KAAK,CAACwD,QAAN,GAAiBH,aAAjB,CAA+B0G,cAArD;IACA,MAAMC,IAAI,GAAGC,MAAM,CAACD,IAAP,CAAY3G,aAAZ,CAAb,CAFE,CAGF;;IACA,MAAM6G,WAAW,GACfF,IAAI,IACJA,IAAI,CAACG,MAAL,CACEC,GAAG,IACDA,GAAG,KAAK,eAAR,IACAA,GAAG,KAAK,kBADR,IAEAA,GAAG,KAAK,aAFR,IAGAA,GAAG,KAAK,cAHR,IAIAA,GAAG,KAAK,OAJR,IAKAA,GAAG,KAAK,cALR,IAMAA,GAAG,KAAK,kBARZ,CAQgC;IARhC,CAFF,CAJE,CAeG;;IAEL,KAAK,MAAMA,GAAX,IAAkBF,WAAlB,EAA+B;MAC7B,MAAMzM,GAAG,CAACG,MAAM,CAAC,aAAD,EAAgBwM,GAAhB,EAAqB/G,aAAa,CAAC+G,GAAD,CAAlC,CAAP,CAAT;IACD;;IACD,IAAI/G,aAAa,CAACyF,aAAlB,EAAiC;MAC/B,MAAMrL,GAAG,CAACG,MAAM,CAAC,aAAD,EAAgB,gBAAhB,EAAkCyF,aAAa,CAACyF,aAAhD,CAAP,CAAT;IACD;;IACD,IAAI,CAACzF,aAAa,CAACoG,gBAAnB,EAAqC;MACnC,MAAMhM,GAAG,CAACG,MAAM,CAAC,aAAD,EAAgB,kBAAhB,EAAoC,CAApC,CAAP,CAAT;IACD;;IACD,MAAMH,GAAG,CAACG,MAAM,CAAC,aAAD,EAAgB,cAAhB,EAAgC,IAAhC,CAAP,CAAT;EACD,CA3BD,CA2BE,OAAO+E,KAAP,EAAc;IACdC,OAAO,CAACC,GAAR,CAAYF,KAAZ;EACD;AACF;;AAED,UAAU0H,iCAAV,GAA8C;EAC5C,IAAI;IACF,IAAIlH,IAAJ;IACA,MAAMd,GAAG,GAAI,GAAElE,UAAW,gBAA1B;IACA,MAAMsF,UAAU,GAAG9F,aAAa,CAAC,aAAD,CAAb,CAA6BqC,KAAK,CAACwD,QAAN,EAA7B,CAAnB;IACA,MAAMG,IAAI,GAAG3D,KAAK,CAACwD,QAAN,GAAiBF,MAAjB,CAAwBM,IAAxB,CAA6BlB,IAA7B,CAAkC,CAAlC,CAAb;IACA,MAAM;MAAE+B;IAAF,IAAoBzE,KAAK,CAACwD,QAAN,GAAiBH,aAA3C;IACA,MAAMQ,QAAQ,GAAG7D,KAAK,CAACwD,QAAN,GAAiBF,MAAjB,CAAwBM,IAAxB,CAA6BlB,IAA7B,CAAkC,CAAlC,EAAqCoB,SAAtD;IAEA,MAAMe,oBAAoB,GAAGJ,aAAa,IAAIA,aAAa,CAACK,IAA/B,IAAuCL,aAAa,CAACK,IAAd,CAAmBC,OAAnB,CAA2B,SAA3B,EAAsC,IAAtC,CAApE,CARE,CAQ+G;;IACjH,MAAMC,iBAAiB,GAAG1E,SAAS,CAAC,gBAAD,EAAmBmD,UAAnB,CAAnC,CATE,CAWF;;IACA,IAAI6B,KAAK,CAACC,OAAN,CAAc9B,UAAU,CAAC+B,cAAzB,MAA6C,IAAjD,EAAuD;MACrDrC,IAAI,GAAGX,IAAI,CAAC6B,SAAL,CAAe,EACpB,GAAGW,iBADiB;QAEpBrB;MAFoB,CAAf,CAAP;IAID,CALD,MAKO,IAAI,CAACc,aAAa,CAACK,IAAnB,EAAyB;MAC9B;MACA3B,IAAI,GAAGX,IAAI,CAAC6B,SAAL,CAAe,EACpB,GAAGZ,UADiB;QAEpBE;MAFoB,CAAf,CAAP;IAID,CANM,MAMA;MACL,MAAMiC,MAAM,GAAGnC,UAAU,CAAC+B,cAA1B;MACArC,IAAI,GAAGX,IAAI,CAAC6B,SAAL,CAAe,EACpB,GAAGZ,UADiB;QAEpBE,IAFoB;QAGpB6B,cAAc,EAAE;UACd7B,IADc;UAEdkC,WAAW,EAAEpB,aAAa,CAACqB,EAFb;UAGdC,IAAI,EAAE,EAHQ;UAIdC,QAAQ,EAAEnB,oBAJI;UAKdoB,QAAQ,EAAExB,aAAa,CAACW,IALV;UAMd1C,IAAI,EAAEkD;QANQ;MAHI,CAAf,CAAP;IAYD;;IAED,MAAMtD,MAAM,GAAG,MAAM5E,IAAI,CAACwC,aAAD,EAAgBmC,GAAhB,EAAqBc,IAArB,CAAzB;IACA,MAAMmD,YAAY,GAAG9D,IAAI,CAACC,KAAL,CAAWH,MAAM,CAACI,IAAlB,CAArB;;IACA,IAAI4D,YAAJ,EAAkB;MAChB,MAAM7I,GAAG,CAACwD,oCAAoC,EAArC,CAAT;;MACA,IAAI4C,QAAQ,KAAK,OAAjB,EAA0B;QACxB,MAAMpG,GAAG,CAACsD,iBAAiB,CAAE,GAAE0C,UAAU,CAACyE,OAAQ,QAAOzE,UAAU,CAACwE,UAAW,EAApD,CAAlB,CAAT;MACD,CAFD,MAEO;QACL,MAAMxK,GAAG,CAACsD,iBAAiB,CAAC0C,UAAU,CAACyE,OAAZ,CAAlB,CAAT;MACD;IACF,CAPD,MAOO;MACL,MAAMzK,GAAG,CAACiD,iCAAiC,EAAlC,CAAT;IACD;EACF,CAnDD,CAmDE,OAAOmJ,CAAP,EAAU;IACVjH,OAAO,CAACC,GAAR,CAAYgH,CAAZ;IACA,MAAMpM,GAAG,CAACiD,iCAAiC,EAAlC,CAAT;EACD;AACF,C,CAED;;;AACA,UAAU4J,kBAAV,QAAqC;EAAA,IAAR;IAAExE;EAAF,CAAQ;;EACnC,IAAI;IACF,MAAMrI,GAAG,CAACiE,WAAW,EAAZ,CAAT;IAEA,MAAM;MAAE2B,aAAF;MAAiBC,MAAjB;MAAyBC;IAAzB,IAA4CvD,KAAK,CAACwD,QAAN,EAAlD;IACA,MAAME,eAAe,GAAG/F,aAAa,CAAC,aAAD,CAAb,CAA6BqC,KAAK,CAACwD,QAAN,EAA7B,CAAxB;IACA,MAAMO,cAAc,GAAGL,eAAe,IAAIA,eAAe,CAACK,cAA1D,CALE,CAOF;;IACA,MAAM1B,GAAG,GAAI,GAAElE,UAAW,wBAA1B;IACA,MAAMwF,IAAI,GAAG3D,KAAK,CAACwD,QAAN,GAAiBF,MAAjB,CAAwBM,IAAxB,CAA6BlB,IAA7B,CAAkC,CAAlC,CAAb;IACA,MAAM;MAAE0C,IAAF;MAAQc;IAAR,IAA+B7C,aAAa,CAACiB,gBAAnD;IACA,MAAMoF,WAAW,GAAGrG,aAAa,CAACiB,gBAAd,CAA+BwB,EAAnD;IACA,MAAMjC,QAAQ,GAAGP,MAAM,CAACM,IAAP,CAAYlB,IAAZ,CAAiB,CAAjB,EAAoBoB,SAArC;IACA,MAAMoE,OAAO,GAAGrE,QAAQ,KAAK,OAAb,GAAuBiC,EAAE,CAACsC,KAAH,CAAS,OAAT,EAAkB,CAAlB,CAAvB,GAA8CtC,EAA9D;IACA,MAAM8C,SAAS,GAAG/E,QAAQ,KAAK,OAAb,GAAuBiC,EAAE,CAACsC,KAAH,CAAS,OAAT,EAAkB,CAAlB,CAAvB,GAA8C7E,cAAc,CAACU,OAAf,CAAuBgE,UAAvF;IACA,MAAMsB,QAAQ,GAAG1L,iBAAiB,CAAC,UAAD,CAAjB,CAA8BmC,KAAK,CAACwD,QAAN,EAA9B,EAAgD,UAAhD,CAAjB;IACA,IAAIJ,aAAa,GAAG,EAApB;IAEA,MAAMD,IAAI,GAAG;MACXsC,aAAa,EAAEL,IADJ;MAEXzB,IAFW;MAGXuE,OAHW;MAIXD,UAAU,EAAEW,SAJD;MAKXW;IALW,CAAb;;IAQA,IAAIrD,kBAAJ,EAAwB;MACtB,MAAM;QAAEC,kBAAF;QAAsBC,WAAtB;QAAmCC;MAAnC,IAAwDhD,aAAa,CAACqB,gBAA5E;MAEAvB,IAAI,CAACgD,kBAAL,GAA0B,CAAC,CAACA,kBAAF,GAAuBA,kBAAvB,GAA4C,IAAtE;MACAhD,IAAI,CAACiD,WAAL,GAAmB,CAAC,CAACA,WAAF,GAAgBA,WAAhB,GAA8B,IAAjD;MACAjD,IAAI,CAACkD,gBAAL,GAAwB,CAAC,CAACA,gBAAF,GAAqBlC,QAAQ,CAACkC,gBAAD,CAA7B,GAAkD,CAA1E;IACD;;IAED,MAAM/D,MAAM,GAAG,MAAM5E,IAAI,CAACwC,aAAD,EAAgBmC,GAAhB,EAAqBG,IAAI,CAAC6B,SAAL,CAAe,EAAE,GAAGlB;IAAL,CAAf,CAArB,CAAzB;IACA,MAAMZ,YAAY,GAAGC,IAAI,CAACC,KAAL,CAAWH,MAAM,CAACI,IAAlB,CAArB;;IAEA,IAAIH,YAAJ,EAAkB;MAChB;MACA,IAAIsB,QAAQ,KAAK,OAAjB,EAA0B;QACxB,MAAM0G,KAAK,GAAG;UACZtC,UAAU,EAAE9D,QAAQ,CAACyE,SAAD,CADR;UAEZjF;QAFY,CAAd;QAIA,MAAMS,YAAY,GAAG,MAAM1G,IAAI,CAACwC,aAAD,EAAiB,GAAE/B,UAAW,oBAA9B,EAAmDqE,IAAI,CAAC6B,SAAL,CAAe,EAAE,GAAGkG;QAAL,CAAf,CAAnD,CAA/B;QACAnH,aAAa,GAAGZ,IAAI,CAACC,KAAL,CAAW2B,YAAY,CAAC1B,IAAxB,CAAhB;MACD;;MAED,MAAM;QAAE6D,YAAF;QAAgBC,WAAhB;QAA6BC,SAA7B;QAAwCC,QAAxC;QAAkDC,KAAlD;QAAyDC,OAAzD;QAAkEC,QAAlE;QAA4EC;MAA5E,IACJjD,QAAQ,KAAK,OAAb,GAAuBT,aAAa,CAAC,CAAD,CAApC,GAA0CG,cAAc,CAACU,OAD3D;MAEA,MAAM8C,QAAQ,GAAG1D,aAAa,CAAC0G,cAAd,CAA6Bf,SAA9C;MACA,MAAMzB,WAAW,GAAI,GAAER,QAAS,wBAAuB9E,uBAAuB,CAACyH,WAAD,CAAc,EAA5F;MACA,MAAMlC,eAAe,GAAI,GAAET,QAAS,6BAApC;MAEA,MAAMI,OAAO,GAAG5E,YAAY,CAAC,CAAD,CAAZ,CAAgB6E,QAAhC;MACA,MAAMoD,qBAAqB,GAAGjI,YAAY,CAAC,CAAD,CAAZ,CAAgBkI,mBAA9C;MACA,MAAMC,gBAAgB,GAAGnI,YAAY,CAAC,CAAD,CAAZ,CAAgBoI,kBAAzC;MACA,MAAM9C,MAAM,GAAG6C,gBAAgB,GAAGF,qBAAlC,CApBgB,CAsBhB;;MACA,IAAInE,gBAAgB,GAAG,CAAvB;MACA,MAAMuE,kBAAkB,GAAGrI,YAAY,CAAC,CAAD,CAAZ,CAAgB8D,gBAA3C;;MACA,IAAIH,kBAAkB,IAAI0E,kBAAkB,GAAG,CAA/C,EAAkD;QAChDvE,gBAAgB,GAAGuE,kBAAnB;MACD;;MACD,MAAM7C,QAAQ,GAAG,CAAC1B,gBAAgB,GAAGwB,MAApB,IAA8B,IAA/C,CA5BgB,CA8BhB;;MAEA,MAAMG,OAAO,GAAG;QACdC,UAAU,EAAEW,SADE;QAEdrC,YAFc;QAGdC,WAHc;QAIdC,SAJc;QAKdC,QALc;QAMdC,KANc;QAOdC,OAPc;QAQdC,QARc;QASdC,IATc;QAUdS,WAVc;QAWdQ,QAXc;QAYdF,MAZc;QAadK,OAAO,EAAE/D,QAAQ,CAAC+D,OAAD,CAbH;QAcdd,QAAQ,EAAED,OAdI;QAedd,gBAfc;QAgBdmB,eAhBc;QAiBdqD,cAAc,EAAEhD,MAAM,KAAK,CAAX,GAAe,IAAf,GAAsB,KAjBxB;QAiB+B;QAC7CvD,gBAAgB,EAAEjB,aAAa,CAACiB,gBAlBlB;QAmBdwG,aAAa,EAAEhF;MAnBD,CAAhB;;MAqBA,IAAI/B,cAAc,KAAK,SAAvB,EAAkC;QAChC,MAAMtG,GAAG,CAACmE,mBAAmB,CAACoG,OAAD,CAApB,CAAT;MACD,CAFD,MAEO,IAAIjE,cAAc,KAAK,QAAvB,EAAiC;QACtC,MAAMtG,GAAG,CAACkE,eAAe,CAACqG,OAAD,CAAhB,CAAT;MACD,CAFM,MAEA;QACL,MAAMvK,GAAG,CAACoD,mBAAmB,EAApB,CAAT;MACD;IACF;EACF,CAlGD,CAkGE,OAAO8B,KAAP,EAAc;IACdC,OAAO,CAACC,GAAR,CAAYF,KAAZ;IACA,MAAMlF,GAAG,CAACqD,kBAAkB,EAAnB,CAAT;EACD;AACF;;AAED,UAAUiK,uBAAV,QAA0C;EAAA,IAAR;IAAEjF;EAAF,CAAQ;;EACxC,IAAI;IACF,MAAMzD,GAAG,GAAI,GAAElE,UAAW,sBAA1B;IACA,MAAM;MAAE8J;IAAF,IAAiBjI,KAAK,CAACwD,QAAN,GAAiBD,cAAjB,CAAgCU,OAAvD;IACA,MAAMiE,OAAO,GAAGpC,EAAhB;IACA,MAAMjC,QAAQ,GAAG7D,KAAK,CAACwD,QAAN,GAAiBF,MAAjB,CAAwBM,IAAxB,CAA6BlB,IAA7B,CAAkC,CAAlC,EAAqCoB,SAAtD;IAEA,MAAMX,IAAI,GAAGX,IAAI,CAAC6B,SAAL,CAAe;MAC1B6D,OAAO,EAAErE,QAAQ,KAAK,OAAb,GAAuBiC,EAAE,CAACsC,KAAH,CAAS,OAAT,EAAkB,CAAlB,CAAvB,GAA8CF,OAD7B;MACsC;MAChED,UAAU,EAAEpE,QAAQ,KAAK,OAAb,GAAuBiC,EAAE,CAACsC,KAAH,CAAS,OAAT,EAAkB,CAAlB,CAAvB,GAA8CH,UAFhC;MAG1BvC,MAAM,EAAE;IAHkB,CAAf,CAAb;IAKA,MAAMpD,MAAM,GAAG,MAAM5E,IAAI,CAACwC,aAAD,EAAgBmC,GAAhB,EAAqBc,IAArB,CAAzB;;IACA,IAAIb,MAAM,CAACI,IAAP,KAAgB,uCAApB,EAA6D;MAC3D,MAAMjF,GAAG,CAACoD,mBAAmB,EAApB,CAAT;MACA,MAAMpD,GAAG,CAACsD,iBAAiB,CAAC+E,EAAD,CAAlB,CAAT;IACD,CAHD,MAGO;MACL,MAAMrI,GAAG,CAACqD,kBAAkB,EAAnB,CAAT;IACD;EACF,CAlBD,CAkBE,OAAO+I,CAAP,EAAU;IACVjH,OAAO,CAACC,GAAR,CAAYgH,CAAZ;EACD;AACF;;AACD,UAAUmB,wBAAV,GAAqC;EACnC,IAAI;IACF,MAAMvH,UAAU,GAAG9F,aAAa,CAAC,kBAAD,CAAb,CAAkCqC,KAAK,CAACwD,QAAN,EAAlC,CAAnB;IACA,MAAM;MAAE2C,kBAAF;MAAsBC,WAAtB;MAAmCC;IAAnC,IAAwD5C,UAA9D;;IACA,IAAI,CAAC0C,kBAAL,EAAyB;MACvB,MAAM1I,GAAG,CAACO,KAAK,CAAC,kBAAD,EAAqB,oBAArB,CAAN,CAAT;MACA;IACD;;IACD,IAAI,CAACoI,WAAL,EAAkB;MAChB,MAAM3I,GAAG,CAACO,KAAK,CAAC,kBAAD,EAAqB,aAArB,CAAN,CAAT;MACA;IACD;;IACD,IAAIoI,WAAW,KAAK,KAApB,EAA2B;MACzB,IAAI,CAACC,gBAAL,EAAuB;QACrB,MAAM5I,GAAG,CAACO,KAAK,CAAC,kBAAD,EAAqB,kBAArB,CAAN,CAAT;QACA;MACD;IACF;;IACD,IAAIqI,gBAAgB,KAAKlC,QAAQ,CAACkC,gBAAD,CAAR,GAA6B,CAA7B,IAAkC,CAAC,WAAW4E,IAAX,CAAgB5E,gBAAhB,CAAxC,CAApB,EAAgG;MAC9F;IACD;;IACD,MAAM5I,GAAG,CAACgE,2BAA2B,CAACgC,UAAD,CAA5B,CAAT;IACA,MAAMhG,GAAG,CAACiE,WAAW,EAAZ,CAAT;EACD,CAtBD,CAsBE,OAAOmI,CAAP,EAAU;IACVjH,OAAO,CAACC,GAAR,CAAYgH,CAAZ;EACD;AACF;;AAED,UAAUqB,qBAAV,QAA8C;EAAA,IAAd;IAAE1G;EAAF,CAAc;;EAC5C,IAAI;IACF,IAAI,CAACA,QAAL,EAAe,MAAM/G,GAAG,CAACK,UAAU,CAAC,kBAAD,EAAqBC,oBAAoB,CAAC,kBAAD,CAApB,CAAyCiC,KAAK,CAACwD,QAAN,EAAzC,CAArB,CAAX,CAAT;EAChB,CAFD,CAEE,OAAOqG,CAAP,EAAU;IACVjH,OAAO,CAACC,GAAR,CAAYgH,CAAZ;EACD;AACF;;AACD,UAAUsB,iBAAV,QAAoC;EAAA,IAAR;IAAErF;EAAF,CAAQ;;EAClC,IAAI;IACF,MAAMzD,GAAG,GAAI,GAAElE,UAAW,gBAA1B;IACA,MAAMyK,SAAS,GAAG5I,KAAK,CAACwD,QAAN,GAAiBD,cAAjB,CAAgCU,OAAhC,CAAwCgE,UAA1D;IACA,MAAMpE,QAAQ,GAAG7D,KAAK,CAACwD,QAAN,GAAiBF,MAAjB,CAAwBM,IAAxB,CAA6BlB,IAA7B,CAAkC,CAAlC,EAAqCoB,SAAtD;IAEA,MAAMX,IAAI,GAAGX,IAAI,CAAC6B,SAAL,CAAe;MAC1B6D,OAAO,EAAErE,QAAQ,KAAK,OAAb,GAAuBiC,EAAE,CAACsC,KAAH,CAAS,OAAT,EAAkB,CAAlB,CAAvB,GAA8CtC,EAD7B;MAE1BmC,UAAU,EAAEpE,QAAQ,KAAK,OAAb,GAAuBiC,EAAE,CAACsC,KAAH,CAAS,OAAT,EAAkB,CAAlB,CAAvB,GAA8CQ;IAFhC,CAAf,CAAb;IAIA,MAAMlL,IAAI,CAACwC,aAAD,EAAgBmC,GAAhB,EAAqBc,IAArB,CAAV;;IAEA,IAAIU,QAAQ,KAAK,OAAjB,EAA0B;MACxB,MAAMpG,GAAG,CAAC8D,UAAU,CAAC,IAAD,CAAX,CAAT;IACD,CAFD,MAEO;MACL,MAAM9D,GAAG,CAAC6D,iBAAiB,CAAC,CAAD,CAAlB,CAAT;MACA,MAAM7D,GAAG,CAAC6D,iBAAiB,CAAC,CAAD,CAAlB,CAAT;MACA,MAAM7D,GAAG,CAAC6D,iBAAiB,CAAC,CAAD,CAAlB,CAAT;IACD;EACF,CAlBD,CAkBE,OAAOqB,KAAP,EAAc;IACdC,OAAO,CAACC,GAAR,CAAYF,KAAZ;EACD;AACF;;AACD,UAAUyI,wBAAV,GAAqC;EACnC,MAAM3N,GAAG,CAACmD,2BAA2B,EAA5B,CAAT;AACD;;AAED,UAAUyK,6BAAV,QAAwF;EAAA,IAAhD;IAAEC,cAAF;IAAkBrD,UAAlB;IAA8BC,OAA9B;IAAuCvB;EAAvC,CAAgD;;EACtF,IAAI;IACF,MAAMtE,GAAG,GAAI,GAAElE,UAAW,qBAA1B;IAEA,MAAMgF,IAAI,GAAGX,IAAI,CAAC6B,SAAL,CAAe;MAC1BiH,cAD0B;MAE1BrD,UAF0B;MAG1BC,OAH0B;MAI1BvB;IAJ0B,CAAf,CAAb;IAOA,MAAMrE,MAAM,GAAG,MAAM5E,IAAI,CAACwC,aAAD,EAAgBmC,GAAhB,EAAqBc,IAArB,CAAzB;IACA,MAAMZ,YAAY,GAAGC,IAAI,CAACC,KAAL,CAAWH,MAAM,CAACI,IAAlB,CAArB;;IACA,IAAIH,YAAJ,EAAkB;MAChB,MAAM9E,GAAG,CAAC0D,gCAAgC,CAACoB,YAAY,CAAC,CAAD,CAAb,CAAjC,CAAT;MACA,MAAM9E,GAAG,CAACsD,iBAAiB,CAACmH,OAAD,CAAlB,CAAT;IACD;IAED;AACJ;AACA;AACA;;EACG,CArBD,CAqBE,OAAO2B,CAAP,EAAU;IACVjH,OAAO,CAACC,GAAR,CAAYgH,CAAZ;EACD;AACF;;AAED,UAAU0B,yBAAV,QAA4F;EAAA,IAAxD;IAAED,cAAF;IAAkBrD,UAAlB;IAA8BC,OAA9B;IAAuCvB,KAAvC;IAA8CjB;EAA9C,CAAwD;;EAC1F,IAAI;IACF,MAAMrD,GAAG,GAAI,GAAElE,UAAW,6BAA1B;IACA,MAAMgF,IAAI,GAAGX,IAAI,CAAC6B,SAAL,CAAe;MAC1BiH,cAD0B;MAE1BrD,UAF0B;MAG1BC,OAH0B;MAI1BvB,KAJ0B;MAK1BjB;IAL0B,CAAf,CAAb;IAOA,MAAMpD,MAAM,GAAG,MAAM5E,IAAI,CAACwC,aAAD,EAAgBmC,GAAhB,EAAqBc,IAArB,CAAzB;;IACA,IAAIb,MAAM,CAACI,IAAP,KAAgB,gDAApB,EAAsE;MACpE;MACA,MAAMjF,GAAG,CAACyD,yBAAyB,CAACoK,cAAD,EAAiBrD,UAAjB,EAA6BC,OAA7B,EAAsCvB,KAAtC,CAA1B,CAAT;MACA,MAAMlJ,GAAG,CAACsD,iBAAiB,CAACmH,OAAD,CAAlB,CAAT;IACD,CAJD,MAIO;MACL,MAAMzK,GAAG,CAACqD,kBAAkB,EAAnB,CAAT;IACD;EACF,CAjBD,CAiBE,OAAO+I,CAAP,EAAU;IACVjH,OAAO,CAACC,GAAR,CAAYgH,CAAZ;EACD;AACF;;AACD,UAAU2B,+BAAV,SAAkG;EAAA,IAAxD;IAAEF,cAAF;IAAkBrD,UAAlB;IAA8BC,OAA9B;IAAuCvB,KAAvC;IAA8C8E;EAA9C,CAAwD;;EAChG,IAAI;IACF,IAAItI,IAAJ;IACA,MAAMd,GAAG,GAAI,GAAElE,UAAW,8BAA1B;IACA,MAAMsF,UAAU,GAAG9F,aAAa,CAAC,kBAAD,CAAb,CAAkCqC,KAAK,CAACwD,QAAN,EAAlC,CAAnB;IACA,MAAMkI,YAAY,GAAG1L,KAAK,CAACwD,QAAN,GAAiBF,MAAjB,CAAwBM,IAAxB,CAA6BlB,IAA7B,CAAkC,CAAlC,CAArB;IACA,MAAM;MAAEiJ,iBAAF;MAAqBC,eAArB;MAAsCC,aAAtC;MAAqDC,cAArD;MAAqEC,cAArE;MAAqFC;IAArF,IAAyGvI,UAA/G;;IAEA,IAAIgI,MAAM,KAAK,MAAf,EAAuB;MACrBtI,IAAI,GAAGX,IAAI,CAAC6B,SAAL,CAAe;QACpBiH,cADoB;QAEpBrD,UAFoB;QAGpBC,OAHoB;QAIpBvB,KAJoB;QAKpB8E,MALoB;QAMpBE;MANoB,CAAf,CAAP;IAQD,CATD,MASO;MACLxI,IAAI,GAAGX,IAAI,CAAC6B,SAAL,CAAe;QACpBiH,cADoB;QAEpBrD,UAFoB;QAGpBC,OAHoB;QAIpBvB,KAJoB;QAKpB8E,MALoB;QAMpBG,eANoB;QAOpBC,aAPoB;QAQpBC,cARoB;QASpBC,cAToB;QAUpBC,eAVoB;QAWpBN;MAXoB,CAAf,CAAP;IAaD;;IACD,MAAMpJ,MAAM,GAAG,MAAM5E,IAAI,CAACwC,aAAD,EAAgBmC,GAAhB,EAAqBc,IAArB,CAAzB;;IACA,IAAIb,MAAM,CAACI,IAAP,KAAgB,iDAAhB,IAAqEJ,MAAM,CAACI,IAAP,KAAgB,8CAAzF,EAAyI;MACvI,MAAMjF,GAAG,CAACoD,mBAAmB,EAApB,CAAT;MACA,MAAMpD,GAAG,CAACyD,yBAAyB,CAACoK,cAAD,EAAiBrD,UAAjB,EAA6BC,OAA7B,EAAsCvB,KAAtC,CAA1B,CAAT;MACA,MAAMlJ,GAAG,CAACsD,iBAAiB,CAACmH,OAAD,CAAlB,CAAT;IACD,CAJD,MAIO;MACL,MAAMzK,GAAG,CAACqD,kBAAkB,EAAnB,CAAT;IACD,CAtCC,CAuCF;;EACD,CAxCD,CAwCE,OAAO+I,CAAP,EAAU;IACVjH,OAAO,CAACC,GAAR,CAAYgH,CAAZ;EACD;AACF,C,CAED;;;AACA,UAAUoC,yBAAV,GAAsC;EACpC,IAAI;IACF,MAAM5J,GAAG,GAAI,GAAElE,UAAW,wBAA1B;IACA,MAAM;MAAE8J;IAAF,IAAiBjI,KAAK,CAACwD,QAAN,GAAiBH,aAAjB,CAA+B0G,cAAtD;IACA,MAAM;MAAE7B;IAAF,IAAclI,KAAK,CAACwD,QAAN,GAAiBH,aAAjB,CAA+B0G,cAAnD;IACA,MAAM5G,IAAI,GAAGX,IAAI,CAAC6B,SAAL,CAAe;MAC1B4D,UAD0B;MAE1BC;IAF0B,CAAf,CAAb;IAIA,MAAM5F,MAAM,GAAG,MAAM5E,IAAI,CAACwC,aAAD,EAAgBmC,GAAhB,EAAqBc,IAArB,CAAzB;IACA,MAAMZ,YAAY,GAAGC,IAAI,CAACC,KAAL,CAAWH,MAAM,CAACI,IAAlB,CAArB;;IACA,IAAIH,YAAJ,EAAkB;MAChB,MAAM9E,GAAG,CAAC2D,4BAA4B,CAACmB,YAAD,CAA7B,CAAT;IACD;EACF,CAbD,CAaE,OAAOsH,CAAP,EAAU;IACVjH,OAAO,CAACC,GAAR,CAAYgH,CAAZ;EACD;AACF,C,CAED;;;AACA,UAAUqC,qBAAV,GAAkC;EAChC,IAAI;IACF,MAAM7J,GAAG,GAAI,GAAElE,UAAW,wBAA1B;IACA,MAAM;MAAEgO;IAAF,IAAiCnM,KAAK,CAACwD,QAAN,GAAiBH,aAAxD;IACA,MAAM;MAAE+I;IAAF,IAAiBpM,KAAK,CAACwD,QAAN,GAAiBH,aAAxC;IAEA,MAAMF,IAAI,GAAGX,IAAI,CAAC6B,SAAL,CAAe,EAC1B,GAAG8H;IADuB,CAAf,CAAb;IAIA,MAAM7J,MAAM,GAAG,MAAM5E,IAAI,CAACwC,aAAD,EAAgBmC,GAAhB,EAAqBc,IAArB,CAAzB;;IAEA,IAAIb,MAAM,CAACI,IAAP,KAAgB,sCAApB,EAA4D;MAC1D,MAAMjF,GAAG,CAACsD,iBAAiB,CAACqL,UAAD,CAAlB,CAAT;IACD;EACF,CAdD,CAcE,OAAOzJ,KAAP,EAAc;IACdC,OAAO,CAACC,GAAR,CAAYF,KAAZ;EACD;AACF;;AAED,UAAU0J,eAAV,GAA4B;EAC1B,IAAI;IACF,MAAMxI,QAAQ,GAAG7D,KAAK,CAACwD,QAAN,GAAiBF,MAAjB,CAAwBM,IAAxB,CAA6BlB,IAA7B,CAAkC,CAAlC,EAAqCoB,SAAtD;;IAEA,IAAID,QAAQ,KAAK,SAAjB,EAA4B;MAC1B3B,cAAc,CAACoK,IAAf,CAAoB,oBAApB;IACD;;IACD,IAAIzI,QAAQ,KAAK,OAAjB,EAA0B;MACxB3B,cAAc,CAACoK,IAAf,CAAoB,cAApB;IACD;;IACD,MAAM7O,GAAG,CAAC,IAAD,CAAT,CATE,CASe;EAClB,CAVD,CAUE,OAAOkF,KAAP,EAAc;IACdC,OAAO,CAACC,GAAR,CAAYF,KAAZ;EACD;AACF,C,CAED;;;AACA,UAAU4J,oBAAV,GAAiC;EAC/B,MAAM9O,GAAG,CAAC4D,gBAAgB,CAAC;IAAEmL,QAAQ,EAAE;EAAZ,CAAD,CAAjB,CAAT;AACD;;AAED,UAAUC,8BAAV,SAAiD;EAAA,IAAR;IAAE3G;EAAF,CAAQ;EAC/C,MAAMzD,GAAG,GAAI,GAAElE,UAAW,oBAA1B;;EAEA,IAAI;IACF,MAAMwF,IAAI,GAAG3D,KAAK,CAACwD,QAAN,GAAiBF,MAAjB,CAAwBM,IAAxB,CAA6BlB,IAA7B,CAAkC,CAAlC,CAAb;IACA,MAAMS,IAAI,GAAGX,IAAI,CAAC6B,SAAL,CAAe;MAAE4D,UAAU,EAAEnC,EAAd;MAAkBnC;IAAlB,CAAf,CAAb;IACA,MAAMrB,MAAM,GAAG,MAAM5E,IAAI,CAACwC,aAAD,EAAgBmC,GAAhB,EAAqBc,IAArB,CAAzB;IACA,MAAMZ,YAAY,GAAGC,IAAI,CAACC,KAAL,CAAWH,MAAM,CAACI,IAAlB,EAAwB,CAAxB,CAArB;IACA,MAAMjF,GAAG,CAACoE,wBAAwB,CAACU,YAAD,CAAzB,CAAT;EACD,CAND,CAME,OAAOsH,CAAP,EAAU;IACVjH,OAAO,CAACC,GAAR,CAAYgH,CAAZ;EACD;AACF,C,CAED;;;AACA,UAAU6C,wBAAV,SAAkD;EAAA;;EAAA,IAAf;IAAEC;EAAF,CAAe;EAChD,MAAMC,WAAW,4BAAG5M,KAAK,CAACwD,QAAN,GAAiB8E,gBAAjB,CAAkCG,eAArC,0DAAG,sBAAmDlC,YAAvE;EACA,MAAMsG,eAAe,GAAGhP,iBAAiB,CAAC,SAAD,CAAjB,CAA6BmC,KAAK,CAACwD,QAAN,EAA7B,EAA+C,gBAA/C,CAAxB;EAEA,MAAMsJ,iBAAiB,GAAG9M,KAAK,CAACwD,QAAN,GAAiBH,aAAjB,CAA+B0J,uBAAzD;;EAEA,IAAI;IACF,IAAID,iBAAJ,EAAuB;MACrB,MAAME,QAAQ,GAAG7K,eAAe,CAACyK,WAAD,EAAcD,SAAS,GAAGA,SAAH,GAAeE,eAAtC,CAAhC;MACA,MAAMpP,GAAG,CAACG,MAAM,CAAC,SAAD,EAAY,eAAZ,EAA6BoP,QAA7B,CAAP,CAAT;IACD;EACF,CALD,CAKE,OAAOnD,CAAP,EAAU;IACVjH,OAAO,CAACC,GAAR,CAAYgH,CAAZ;EACD;AACF,C,CAED;AACA;AACA;;;AACA,OAAO,UAAUoD,oCAAV,GAAiD;EACtD,MAAMzP,SAAS,CAACS,8BAAD,EAAiCiF,+BAAjC,CAAf;AACD;AACD,OAAO,UAAUgK,sCAAV,GAAmD;EACxD,MAAM1P,SAAS,CAACU,gCAAD,EAAmCmM,iCAAnC,CAAf;AACD;AACD,OAAO,UAAU8C,6BAAV,GAA0C;EAC/C,MAAM3P,SAAS,CAACqB,2BAAD,EAA8BuM,wBAA9B,CAAf;AACD;AAED,OAAO,UAAUgC,wBAAV,GAAqC;EAC1C,MAAM5P,SAAS,CAACc,iBAAD,EAAoB8D,mBAApB,CAAf;AACD;AAED,OAAO,UAAUiL,2BAAV,GAAwC;EAC7C,MAAM7P,SAAS,CAACmB,oBAAD,EAAuBmE,qBAAvB,EAA8CC,gCAA9C,CAAf;AACD;AAED,OAAO,UAAUuK,0BAAV,GAAuC;EAC5C,MAAM9P,SAAS,CAACoB,qBAAD,EAAwByJ,qBAAxB,CAAf;AACD;AACD,OAAO,UAAUkF,2BAAV,GAAwC;EAC7C,MAAM/P,SAAS,CAACe,sBAAD,EAAyB4J,sBAAzB,CAAf;AACD;AACD,OAAO,UAAUqF,sBAAV,GAAmC;EACxC,MAAMhQ,SAAS,CAACkB,oBAAD,EAAuByM,iBAAvB,CAAf;AACD;AACD,OAAO,UAAUsC,sBAAV,GAAmC;EACxC,MAAMjQ,SAAS,CAACgB,oBAAD,EAAuBsL,iBAAvB,CAAf;AACD;AACD,OAAO,UAAU4D,4BAAV,GAAyC;EAC9C,MAAMlQ,SAAS,CAACiB,qBAAD,EAAwBkK,uBAAxB,CAAf;AACD;AACD,OAAO,UAAUgF,uBAAV,GAAoC;EACzC,MAAMnQ,SAAS,CAACsB,iBAAD,EAAoBwL,kBAApB,CAAf;AACD;AACD,OAAO,UAAUsD,4BAAV,GAAyC;EAC9C,MAAMpQ,SAAS,CAACuB,8BAAD,EAAiCgM,uBAAjC,CAAf;AACD;AACD,OAAO,UAAU8C,kCAAV,GAA+C;EACpD,MAAMrQ,SAAS,CAACwB,6BAAD,EAAgCqM,6BAAhC,CAAf;AACD;AACD,OAAO,UAAUyC,8BAAV,GAA2C;EAChD,MAAMtQ,SAAS,CAACyB,uBAAD,EAA0BsM,yBAA1B,CAAf;AACD;AACD,OAAO,UAAUwC,oCAAV,GAAiD;EACtD,MAAMvQ,SAAS,CAAC4B,8BAAD,EAAiCoM,+BAAjC,CAAf;AACD;AACD,OAAO,UAAUwC,8BAAV,GAA2C;EAChD,MAAMxQ,SAAS,CAAC0B,yBAAD,EAA4B+M,yBAA5B,CAAf;AACD;AACD,OAAO,UAAUgC,yBAAV,GAAsC;EAC3C,MAAMzQ,SAAS,CAAC2B,2BAAD,EAA8BoN,oBAA9B,CAAf;EACA,MAAM/O,SAAS,CAACe,sBAAD,EAAyBgO,oBAAzB,CAAf;AACD;AAED,OAAO,UAAU2B,6BAAV,GAA0C;EAC/C,MAAM1Q,SAAS,CAAC6B,sBAAD,EAAyB6L,qBAAzB,CAAf;AACD;AACD,OAAO,UAAUiD,6BAAV,GAA0C;EAC/C,MAAM3Q,SAAS,CAAC8B,sBAAD,EAAyB0L,wBAAzB,CAAf;AACD;AAED,OAAO,UAAUoD,0BAAV,GAAuC;EAC5C,MAAM5Q,SAAS,CAAC+B,kBAAD,EAAqB2M,qBAArB,CAAf;AACD;AAED,OAAO,UAAUmC,oBAAV,GAAiC;EACtC,MAAM7Q,SAAS,CAACgC,YAAD,EAAe6M,eAAf,CAAf;AACD;AAED,OAAO,UAAUiC,mCAAV,GAAgD;EACrD,MAAM9Q,SAAS,CAACiC,sBAAD,EAAyBgN,8BAAzB,CAAf;AACD;AAED,OAAO,UAAU8B,6BAAV,GAA0C;EAC/C,MAAM/Q,SAAS,CAACoC,sBAAD,EAAyB8M,wBAAzB,CAAf;EACA,MAAMlP,SAAS,CAACqC,uBAAD,EAA0B6M,wBAA1B,CAAf;AACD"},"metadata":{},"sourceType":"module"}